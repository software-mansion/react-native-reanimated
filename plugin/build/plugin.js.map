{
  "version": 3,
  "sources": ["../src/commonObjects.ts", "../src/commonFunctions.ts", "../src/makeWorklet.ts", "../src/processWorkletObjectMethod.ts", "../src/processWorkletFunction.ts", "../src/processWorklets.ts", "../src/processIfWorkletNode.ts", "../src/processIfGestureHandlerEventCallbackFunctionNode.ts", "../src/processInlineStylesWarning.ts", "../../package.json", "../src/injectVersion.ts", "../src/plugin.ts"],
  "sourcesContent": ["export const globals = new Set([\n  'this',\n  'console',\n  'performance',\n  'Date',\n  'Array',\n  'ArrayBuffer',\n  'Int8Array',\n  'Int16Array',\n  'Int32Array',\n  'Uint8Array',\n  'Uint8ClampedArray',\n  'Uint16Array',\n  'Uint32Array',\n  'Float32Array',\n  'Float64Array',\n  'HermesInternal',\n  'JSON',\n  'Math',\n  'Number',\n  'Object',\n  'String',\n  'Symbol',\n  'undefined',\n  'null',\n  'UIManager',\n  'requestAnimationFrame',\n  'setImmediate',\n  '_WORKLET',\n  'arguments',\n  'Boolean',\n  'parseInt',\n  'parseFloat',\n  'Map',\n  'WeakMap',\n  'WeakRef',\n  'Set',\n  '_log',\n  '_scheduleOnJS',\n  '_makeShareableClone',\n  '_updateDataSynchronously',\n  'eval',\n  '_updatePropsPaper',\n  '_updatePropsFabric',\n  '_removeShadowNodeFromRegistry',\n  'RegExp',\n  'Error',\n  'ErrorUtils',\n  'global',\n  '_measure',\n  '_scrollTo',\n  '_dispatchCommand',\n  '_setGestureState',\n  '_getCurrentTime',\n  'isNaN',\n  'LayoutAnimationRepository',\n  '_notifyAboutProgress',\n  '_notifyAboutEnd',\n]);\n", "export function isRelease() {\n  return (\n    process.env.BABEL_ENV &&\n    ['production', 'release'].includes(process.env.BABEL_ENV)\n  );\n}\n", "import * as BabelCore from '@babel/core';\nimport * as BabelTypes from '@babel/types';\nimport generate from '@babel/generator';\nimport traverse from '@babel/traverse';\nimport { transformSync } from '@babel/core';\nimport * as fs from 'fs';\nimport * as convertSourceMap from 'convert-source-map';\nimport { ReanimatedPluginPass } from './commonInterfaces';\nimport { isRelease } from './commonFunctions';\nimport { globals } from './commonObjects';\n\nfunction hash(str: string): number {\n  let i = str.length;\n  let hash1 = 5381;\n  let hash2 = 52711;\n\n  while (i--) {\n    const char = str.charCodeAt(i);\n    hash1 = (hash1 * 33) ^ char;\n    hash2 = (hash2 * 33) ^ char;\n  }\n\n  return (hash1 >>> 0) * 4096 + (hash2 >>> 0);\n}\n\nfunction shouldGenerateSourceMap() {\n  if (isRelease()) {\n    return false;\n  }\n\n  if (process.env.REANIMATED_PLUGIN_TESTS === 'jest') {\n    // We want to detect this, so we can disable source maps (because they break\n    // snapshot tests with jest).\n    return false;\n  }\n\n  return true;\n}\n\nfunction buildWorkletString(\n  t: typeof BabelCore.types,\n  fun: BabelCore.types.File,\n  closureVariables: Array<BabelTypes.Identifier>,\n  name: string,\n  inputMap: BabelCore.BabelFileResult['map']\n): Array<string | null | undefined> {\n  function prependClosureVariablesIfNecessary() {\n    const closureDeclaration = t.variableDeclaration('const', [\n      t.variableDeclarator(\n        t.objectPattern(\n          closureVariables.map((variable) =>\n            t.objectProperty(\n              t.identifier(variable.name),\n              t.identifier(variable.name),\n              false,\n              true\n            )\n          )\n        ),\n        t.memberExpression(t.thisExpression(), t.identifier('_closure'))\n      ),\n    ]);\n\n    function prependClosure(\n      path: BabelCore.NodePath<\n        | BabelTypes.FunctionDeclaration\n        | BabelTypes.FunctionExpression\n        | BabelTypes.ArrowFunctionExpression\n        | BabelTypes.ObjectMethod\n      >\n    ) {\n      if (closureVariables.length === 0 || path.parent.type !== 'Program') {\n        return;\n      }\n\n      if (!BabelTypes.isExpression(path.node.body))\n        path.node.body.body.unshift(closureDeclaration);\n    }\n\n    function prependRecursiveDeclaration(\n      path: BabelCore.NodePath<\n        | BabelTypes.FunctionDeclaration\n        | BabelTypes.FunctionExpression\n        | BabelTypes.ArrowFunctionExpression\n        | BabelTypes.ObjectMethod\n      >\n    ) {\n      if (\n        path.parent.type === 'Program' &&\n        !BabelTypes.isArrowFunctionExpression(path.node) &&\n        !BabelTypes.isObjectMethod(path.node) &&\n        path.node.id &&\n        path.scope.parent\n      ) {\n        const hasRecursiveCalls =\n          path.scope.parent.bindings[path.node.id.name]?.references > 0;\n        if (hasRecursiveCalls) {\n          path.node.body.body.unshift(\n            t.variableDeclaration('const', [\n              t.variableDeclarator(\n                t.identifier(path.node.id.name),\n                t.memberExpression(t.thisExpression(), t.identifier('_recur'))\n              ),\n            ])\n          );\n        }\n      }\n    }\n\n    return {\n      visitor: {\n        'FunctionDeclaration|FunctionExpression|ArrowFunctionExpression|ObjectMethod':\n          (\n            path: BabelCore.NodePath<\n              | BabelTypes.FunctionDeclaration\n              | BabelTypes.FunctionExpression\n              | BabelTypes.ArrowFunctionExpression\n              | BabelTypes.ObjectMethod\n            >\n          ) => {\n            prependClosure(path);\n            prependRecursiveDeclaration(path);\n          },\n      },\n    };\n  }\n\n  const draftExpression = (fun.program.body.find((obj) =>\n    BabelTypes.isFunctionDeclaration(obj)\n  ) ||\n    fun.program.body.find((obj) => BabelTypes.isExpressionStatement(obj)) ||\n    undefined) as\n    | BabelTypes.FunctionDeclaration\n    | BabelTypes.ExpressionStatement\n    | undefined;\n\n  if (!draftExpression) throw new Error(\"'draftExpression' is not defined\\n\");\n\n  const expression = BabelTypes.isFunctionDeclaration(draftExpression)\n    ? draftExpression\n    : draftExpression.expression;\n\n  if (!('params' in expression && BabelTypes.isBlockStatement(expression.body)))\n    throw new Error(\n      \"'expression' doesn't have property 'params' or 'expression.body' is not a BlockStatmenent\\n'\"\n    );\n\n  const workletFunction = BabelTypes.functionExpression(\n    BabelTypes.identifier(name),\n    expression.params,\n    expression.body\n  );\n\n  const code = generate(workletFunction).code;\n\n  if (!inputMap) throw new Error(\"'inputMap' is not defined\");\n\n  const includeSourceMap = shouldGenerateSourceMap();\n\n  if (includeSourceMap) {\n    // Clear contents array (should be empty anyways)\n    inputMap.sourcesContent = [];\n    // Include source contents in source map, because Flipper/iframe is not\n    // allowed to read files from disk.\n    for (const sourceFile of inputMap.sources) {\n      inputMap.sourcesContent.push(\n        fs.readFileSync(sourceFile).toString('utf-8')\n      );\n    }\n  }\n\n  const transformed = transformSync(code, {\n    plugins: [prependClosureVariablesIfNecessary()],\n    compact: !includeSourceMap,\n    sourceMaps: includeSourceMap,\n    inputSourceMap: inputMap,\n    ast: false,\n    babelrc: false,\n    configFile: false,\n    comments: false,\n  });\n\n  if (!transformed) throw new Error('transformed is null!\\n');\n\n  let sourceMap;\n  if (includeSourceMap) {\n    sourceMap = convertSourceMap.fromObject(transformed.map).toObject();\n    // sourcesContent field contains a full source code of the file which contains the worklet\n    // and is not needed by the source map interpreter in order to symbolicate a stack trace.\n    // Therefore, we remove it to reduce the bandwith and avoid sending it potentially multiple times\n    // in files that contain multiple worklets. Along with sourcesContent.\n    delete sourceMap.sourcesContent;\n  }\n\n  return [transformed.code, JSON.stringify(sourceMap)];\n}\n\nfunction makeWorkletName(\n  t: typeof BabelCore.types,\n  fun: BabelCore.NodePath<\n    | BabelTypes.FunctionDeclaration\n    | BabelTypes.FunctionExpression\n    | BabelTypes.ObjectMethod\n    | BabelTypes.ArrowFunctionExpression\n  >\n): string {\n  if (t.isObjectMethod(fun.node) && 'name' in fun.node.key) {\n    return fun.node.key.name;\n  }\n  if (t.isFunctionDeclaration(fun.node) && fun.node.id) {\n    return fun.node.id.name;\n  }\n  if (\n    BabelTypes.isFunctionExpression(fun.node) &&\n    BabelTypes.isIdentifier(fun.node.id)\n  ) {\n    return fun.node.id.name;\n  }\n  return 'anonymous'; // fallback for ArrowFunctionExpression and unnamed FunctionExpression\n}\n\nexport function makeWorklet(\n  t: typeof BabelCore.types,\n  fun: BabelCore.NodePath<\n    | BabelTypes.FunctionDeclaration\n    | BabelTypes.FunctionExpression\n    | BabelTypes.ObjectMethod\n    | BabelTypes.ArrowFunctionExpression\n  >,\n  state: ReanimatedPluginPass\n): BabelTypes.FunctionExpression {\n  // Returns a new FunctionExpression which is a workletized version of provided\n  // FunctionDeclaration, FunctionExpression, ArrowFunctionExpression or ObjectMethod.\n\n  const functionName = makeWorkletName(t, fun);\n\n  const closure = new Map<string, BabelTypes.Identifier>();\n\n  // remove 'worklet'; directive before generating string\n  fun.traverse({\n    DirectiveLiteral(path) {\n      if (path.node.value === 'worklet' && path.getFunctionParent() === fun) {\n        path.parentPath.remove();\n      }\n    },\n  });\n\n  // We use copy because some of the plugins don't update bindings and\n  // some even break them\n  if (!state.file.opts.filename)\n    throw new Error(\"'state.file.opts.filename' is undefined\\n\");\n\n  const codeObject = generate(fun.node, {\n    sourceMaps: true,\n    sourceFileName: state.file.opts.filename,\n  });\n\n  // We need to add a newline at the end, because there could potentially be a\n  // comment after the function that gets included here, and then the closing\n  // bracket would become part of the comment thus resulting in an error, since\n  // there is a missing closing bracket.\n  const code =\n    '(' + (t.isObjectMethod(fun) ? 'function ' : '') + codeObject.code + '\\n)';\n\n  const transformed = transformSync(code, {\n    filename: state.file.opts.filename,\n    presets: ['@babel/preset-typescript'],\n    plugins: [\n      '@babel/plugin-transform-shorthand-properties',\n      '@babel/plugin-transform-arrow-functions',\n      '@babel/plugin-proposal-optional-chaining',\n      '@babel/plugin-proposal-nullish-coalescing-operator',\n      ['@babel/plugin-transform-template-literals', { loose: true }],\n    ],\n    ast: true,\n    babelrc: false,\n    configFile: false,\n    inputSourceMap: codeObject.map,\n  });\n\n  if (!transformed || !transformed.ast)\n    throw new Error(\"'transformed' or 'transformed.ast' is undefined\\n\");\n\n  traverse(transformed.ast, {\n    Identifier(path) {\n      if (!path.isReferencedIdentifier()) return;\n      const name = path.node.name;\n      if (\n        globals.has(name) ||\n        (!BabelTypes.isArrowFunctionExpression(fun.node) &&\n          !BabelTypes.isObjectMethod(fun.node) &&\n          fun.node.id &&\n          fun.node.id.name === name)\n      ) {\n        return;\n      }\n\n      const parentNode = path.parent;\n\n      if (\n        parentNode.type === 'MemberExpression' &&\n        parentNode.property === path.node &&\n        !parentNode.computed\n      ) {\n        return;\n      }\n\n      if (\n        parentNode.type === 'ObjectProperty' &&\n        path.parentPath.parent.type === 'ObjectExpression' &&\n        path.node !== parentNode.value\n      ) {\n        return;\n      }\n\n      let currentScope = path.scope;\n\n      while (currentScope != null) {\n        if (currentScope.bindings[name] != null) {\n          return;\n        }\n        currentScope = currentScope.parent;\n      }\n      closure.set(name, path.node);\n    },\n  });\n\n  const variables = Array.from(closure.values());\n\n  const privateFunctionId = t.identifier('_f');\n  const clone = t.cloneNode(fun.node);\n  const funExpression = BabelTypes.isBlockStatement(clone.body)\n    ? BabelTypes.functionExpression(null, clone.params, clone.body)\n    : clone;\n\n  const [funString, sourceMapString] = buildWorkletString(\n    t,\n    transformed.ast,\n    variables,\n    functionName,\n    transformed.map\n  );\n  if (!funString) throw new Error(\"'funString' is not defined\\n\");\n  const workletHash = hash(funString);\n\n  let location = state.file.opts.filename;\n  if (state.opts.relativeSourceLocation) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const path = require('path');\n    location = path.relative(state.cwd, location);\n  }\n\n  let lineOffset = 1;\n  if (closure.size > 0) {\n    // When worklet captures some variables, we append closure destructing at\n    // the beginning of the function body. This effectively results in line\n    // numbers shifting by the number of captured variables (size of the\n    // closure) + 2 (for the opening and closing brackets of the destruct\n    // statement)\n    lineOffset -= closure.size + 2;\n  }\n\n  const pathForStringDefinitions = fun.parentPath.isProgram()\n    ? fun\n    : (fun.findParent(\n        (path) =>\n          (path.parentPath as BabelCore.NodePath<BabelCore.Node>).isProgram() // this causes typescript error on Windows CI build\n      ) as BabelCore.NodePath<BabelCore.Node>); // this causes typescript error on Windows CI build\n\n  const initDataId = (\n    pathForStringDefinitions.parentPath as BabelCore.NodePath<BabelCore.Node>\n  ).scope // this causes typescript error on Windows CI build\n    .generateUidIdentifier(`worklet_${workletHash}_init_data`);\n\n  const initDataObjectExpression = t.objectExpression([\n    t.objectProperty(t.identifier('code'), t.stringLiteral(funString)),\n    t.objectProperty(t.identifier('location'), t.stringLiteral(location)),\n  ]);\n\n  if (sourceMapString) {\n    initDataObjectExpression.properties.push(\n      t.objectProperty(\n        t.identifier('sourceMap'),\n        t.stringLiteral(sourceMapString)\n      )\n    );\n  }\n\n  pathForStringDefinitions.insertBefore(\n    t.variableDeclaration('const', [\n      t.variableDeclarator(initDataId, initDataObjectExpression),\n    ])\n  );\n\n  if (\n    BabelTypes.isFunctionDeclaration(funExpression) ||\n    BabelTypes.isObjectMethod(funExpression)\n  )\n    throw new Error(\n      \"'funExpression' is either FunctionDeclaration or ObjectMethod and cannot be used in variableDeclaration\\n\"\n    );\n\n  const statements: Array<\n    | BabelTypes.VariableDeclaration\n    | BabelTypes.ExpressionStatement\n    | BabelTypes.ReturnStatement\n  > = [\n    t.variableDeclaration('const', [\n      t.variableDeclarator(privateFunctionId, funExpression),\n    ]),\n    t.expressionStatement(\n      t.assignmentExpression(\n        '=',\n        t.memberExpression(privateFunctionId, t.identifier('_closure'), false),\n        t.objectExpression(\n          variables.map((variable) =>\n            t.objectProperty(t.identifier(variable.name), variable, false, true)\n          )\n        )\n      )\n    ),\n    t.expressionStatement(\n      t.assignmentExpression(\n        '=',\n        t.memberExpression(\n          privateFunctionId,\n          t.identifier('__initData'),\n          false\n        ),\n        initDataId\n      )\n    ),\n    t.expressionStatement(\n      t.assignmentExpression(\n        '=',\n        t.memberExpression(\n          privateFunctionId,\n          t.identifier('__workletHash'),\n          false\n        ),\n        t.numericLiteral(workletHash)\n      )\n    ),\n  ];\n\n  if (!isRelease()) {\n    statements.unshift(\n      t.variableDeclaration('const', [\n        t.variableDeclarator(\n          t.identifier('_e'),\n          t.arrayExpression([\n            t.newExpression(\n              t.memberExpression(t.identifier('global'), t.identifier('Error')),\n              []\n            ),\n            t.numericLiteral(lineOffset),\n            t.numericLiteral(-27), // the placement of opening bracket after Exception in line that defined '_e' variable\n          ])\n        ),\n      ])\n    );\n    statements.push(\n      t.expressionStatement(\n        t.assignmentExpression(\n          '=',\n          t.memberExpression(\n            privateFunctionId,\n            t.identifier('__stackDetails'),\n            false\n          ),\n          t.identifier('_e')\n        )\n      )\n    );\n  }\n\n  statements.push(t.returnStatement(privateFunctionId));\n\n  const newFun = t.functionExpression(\n    // !BabelTypes.isArrowFunctionExpression(fun.node) ? fun.node.id : undefined, // [TO DO] --- this never worked\n    undefined,\n    [],\n    t.blockStatement(statements)\n  );\n\n  return newFun;\n}\n", "import * as BabelCore from '@babel/core';\nimport * as BabelTypes from '@babel/types';\nimport { ReanimatedPluginPass } from './commonInterfaces';\nimport { makeWorklet } from './makeWorklet';\n\nexport function processWorkletObjectMethod(\n  t: typeof BabelCore.types,\n  path: BabelCore.NodePath<BabelTypes.ObjectMethod>,\n  state: ReanimatedPluginPass\n) {\n  // Replaces ObjectMethod with a workletized version of itself.\n\n  if (!BabelTypes.isFunctionParent(path)) return;\n\n  const newFun = makeWorklet(t, path, state);\n\n  const replacement = BabelTypes.objectProperty(\n    BabelTypes.identifier(\n      BabelTypes.isIdentifier(path.node.key) ? path.node.key.name : ''\n    ),\n    t.callExpression(newFun, [])\n  );\n\n  path.replaceWith(replacement);\n}\n", "import * as BabelCore from '@babel/core';\nimport * as BabelTypes from '@babel/types';\nimport { ReanimatedPluginPass } from './commonInterfaces';\nimport { makeWorklet } from './makeWorklet';\n\nexport function processWorkletFunction(\n  t: typeof BabelCore.types,\n  fun: BabelCore.NodePath<\n    | BabelTypes.FunctionDeclaration\n    | BabelTypes.FunctionExpression\n    | BabelTypes.ArrowFunctionExpression\n  >,\n  state: ReanimatedPluginPass\n) {\n  // Replaces FunctionDeclaration, FunctionExpression or ArrowFunctionExpression\n  // with a workletized version of itself.\n\n  if (!t.isFunctionParent(fun)) {\n    return;\n  }\n\n  const newFun = makeWorklet(t, fun, state);\n\n  const replacement = t.callExpression(newFun, []);\n\n  // we check if function needs to be assigned to variable declaration.\n  // This is needed if function definition directly in a scope. Some other ways\n  // where function definition can be used is for example with variable declaration:\n  // const ggg = function foo() { }\n  // ^ in such a case we don't need to define variable for the function\n  const needDeclaration =\n    t.isScopable(fun.parent) || t.isExportNamedDeclaration(fun.parent);\n  fun.replaceWith(\n    !BabelTypes.isArrowFunctionExpression(fun.node) &&\n      fun.node.id &&\n      needDeclaration\n      ? t.variableDeclaration('const', [\n          t.variableDeclarator(fun.node.id, replacement),\n        ])\n      : replacement\n  );\n}\n", "import * as BabelCore from '@babel/core';\nimport * as BabelTypes from '@babel/types';\nimport { ReanimatedPluginPass } from './commonInterfaces';\nimport { processWorkletObjectMethod } from './processWorkletObjectMethod';\nimport { processWorkletFunction } from './processWorkletFunction';\n\n/**\n * holds a map of function names as keys and array of argument indexes as values which should be automatically workletized(they have to be functions)(starting from 0)\n */\nconst functionArgsToWorkletize = new Map([\n  ['useFrameCallback', [0]],\n  ['useAnimatedStyle', [0]],\n  ['useAnimatedProps', [0]],\n  ['createAnimatedPropAdapter', [0]],\n  ['useDerivedValue', [0]],\n  ['useAnimatedScrollHandler', [0]],\n  ['useAnimatedReaction', [0, 1]],\n  ['useWorkletCallback', [0]],\n  // animations' callbacks\n  ['withTiming', [2]],\n  ['withSpring', [2]],\n  ['withDecay', [1]],\n  ['withRepeat', [3]],\n]);\n\nconst objectHooks = new Set([\n  'useAnimatedGestureHandler',\n  'useAnimatedScrollHandler',\n]);\n\nexport function processWorklets(\n  t: typeof BabelCore.types,\n  path: BabelCore.NodePath<BabelTypes.CallExpression>,\n  state: ReanimatedPluginPass\n) {\n  const callee = BabelTypes.isSequenceExpression(path.node.callee)\n    ? path.node.callee.expressions[path.node.callee.expressions.length - 1]\n    : path.node.callee;\n\n  let name = '';\n  if ('name' in callee) name = callee.name;\n  else if ('property' in callee && 'name' in callee.property)\n    name = callee.property.name;\n  // else name = 'anonymous'; --- might add it in the future [TO DO]\n\n  if (\n    objectHooks.has(name) &&\n    BabelTypes.isObjectExpression(\n      (\n        path.get('arguments.0') as BabelCore.NodePath<\n          BabelTypes.CallExpression['arguments'][number]\n        >\n      ).node\n    )\n  ) {\n    const properties = path.get('arguments.0.properties') as Array<\n      BabelCore.NodePath<BabelTypes.ObjectMethod | BabelTypes.ObjectProperty>\n    >;\n    for (const property of properties) {\n      if (t.isObjectMethod(property.node)) {\n        processWorkletObjectMethod(\n          t,\n          property as BabelCore.NodePath<BabelTypes.ObjectMethod>,\n          state\n        );\n      } else {\n        const value = property.get('value') as BabelCore.NodePath<\n          BabelTypes.ObjectProperty['value']\n        >;\n        processWorkletFunction(\n          t,\n          value as BabelCore.NodePath<\n            | BabelTypes.FunctionDeclaration\n            | BabelTypes.FunctionExpression\n            | BabelTypes.ArrowFunctionExpression\n          >,\n          state\n        ); // temporarily given 3 types [TO DO]\n      }\n    }\n  } else {\n    const indexes = functionArgsToWorkletize.get(name);\n    if (Array.isArray(indexes)) {\n      indexes.forEach((index) => {\n        processWorkletFunction(\n          t,\n          path.get(`arguments.${index}`) as BabelCore.NodePath<\n            | BabelTypes.FunctionDeclaration\n            | BabelTypes.FunctionExpression\n            | BabelTypes.ArrowFunctionExpression\n          >,\n          state\n        ); // temporarily given 3 types [TO DO]\n      });\n    }\n  }\n}\n", "import * as BabelCore from '@babel/core';\nimport * as BabelTypes from '@babel/types';\nimport { ReanimatedPluginPass } from './commonInterfaces';\nimport { processWorkletFunction } from './processWorkletFunction';\n\nexport function processIfWorkletNode(\n  t: typeof BabelCore.types,\n  fun: BabelCore.NodePath<\n    | BabelTypes.FunctionDeclaration\n    | BabelTypes.FunctionExpression\n    | BabelTypes.ArrowFunctionExpression\n  >,\n  state: ReanimatedPluginPass\n) {\n  fun.traverse({\n    DirectiveLiteral(path) {\n      const value = path.node.value;\n      if (\n        value === 'worklet' &&\n        path.getFunctionParent() === fun &&\n        BabelTypes.isBlockStatement(fun.node.body)\n      ) {\n        // make sure \"worklet\" is listed among directives for the fun\n        // this is necessary as because of some bug, babel will attempt to\n        // process replaced function if it is nested inside another function\n        const directives = fun.node.body.directives;\n        if (\n          directives &&\n          directives.length > 0 &&\n          directives.some(\n            (directive) =>\n              t.isDirectiveLiteral(directive.value) &&\n              directive.value.value === 'worklet'\n          )\n        ) {\n          processWorkletFunction(t, fun, state);\n        }\n      }\n    },\n  });\n}\n", "import * as BabelCore from '@babel/core';\nimport * as BabelTypes from '@babel/types';\nimport { ReanimatedPluginPass } from './commonInterfaces';\nimport { processWorkletFunction } from './processWorkletFunction';\n\nconst gestureHandlerGestureObjects = new Set([\n  // from https://github.com/software-mansion/react-native-gesture-handler/blob/new-api/src/handlers/gestures/gestureObjects.ts\n  'Tap',\n  'Pan',\n  'Pinch',\n  'Rotation',\n  'Fling',\n  'LongPress',\n  'ForceTouch',\n  'Native',\n  'Manual',\n  'Race',\n  'Simultaneous',\n  'Exclusive',\n]);\n\nconst gestureHandlerBuilderMethods = new Set([\n  'onBegin',\n  'onStart',\n  'onEnd',\n  'onFinalize',\n  'onUpdate',\n  'onChange',\n  'onTouchesDown',\n  'onTouchesMove',\n  'onTouchesUp',\n  'onTouchesCancelled',\n]);\n\nexport function processIfGestureHandlerEventCallbackFunctionNode(\n  t: typeof BabelCore.types,\n  fun: BabelCore.NodePath<\n    | BabelTypes.FunctionDeclaration\n    | BabelTypes.FunctionExpression\n    | BabelTypes.ArrowFunctionExpression\n  >,\n  state: ReanimatedPluginPass\n) {\n  // Auto-workletizes React Native Gesture Handler callback functions.\n  // Detects `Gesture.Tap().onEnd(<fun>)` or similar, but skips `something.onEnd(<fun>)`.\n  // Supports method chaining as well, e.g. `Gesture.Tap().onStart(<fun1>).onUpdate(<fun2>).onEnd(<fun3>)`.\n\n  // Example #1: `Gesture.Tap().onEnd(<fun>)`\n  /*\n  CallExpression(\n    callee: MemberExpression(\n      object: CallExpression(\n        callee: MemberExpression(\n          object: Identifier('Gesture')\n          property: Identifier('Tap')\n        )\n      )\n      property: Identifier('onEnd')\n    )\n    arguments: [fun]\n  )\n  */\n\n  // Example #2: `Gesture.Tap().onStart(<fun1>).onUpdate(<fun2>).onEnd(<fun3>)`\n  /*\n  CallExpression(\n    callee: MemberExpression(\n      object: CallExpression(\n        callee: MemberExpression(\n          object: CallExpression(\n            callee: MemberExpression(\n              object: CallExpression(\n                callee: MemberExpression(\n                  object: Identifier('Gesture')\n                  property: Identifier('Tap')\n                )\n              )\n              property: Identifier('onStart')\n            )\n            arguments: [fun1]\n          )\n          property: Identifier('onUpdate')\n        )\n        arguments: [fun2]\n      )\n      property: Identifier('onEnd')\n    )\n    arguments: [fun3]\n  )\n  */\n\n  if (\n    t.isCallExpression(fun.parent) &&\n    t.isExpression(fun.parent.callee) &&\n    isGestureObjectEventCallbackMethod(t, fun.parent.callee)\n  ) {\n    processWorkletFunction(t, fun, state);\n  }\n}\n\nfunction isGestureObjectEventCallbackMethod(\n  t: typeof BabelCore.types,\n  node: BabelTypes.Expression\n) {\n  // Checks if node matches the pattern `Gesture.Foo()[*].onBar`\n  // where `[*]` represents any number of method calls.\n  return (\n    t.isMemberExpression(node) &&\n    t.isIdentifier(node.property) &&\n    gestureHandlerBuilderMethods.has(node.property.name) &&\n    containsGestureObject(t, node.object)\n  );\n}\n\nfunction containsGestureObject(\n  t: typeof BabelCore.types,\n  node: BabelTypes.Expression\n) {\n  // Checks if node matches the pattern `Gesture.Foo()[*]`\n  // where `[*]` represents any number of chained method calls, like `.something(42)`.\n\n  // direct call\n  if (isGestureObject(t, node)) {\n    return true;\n  }\n\n  // method chaining\n  if (\n    t.isCallExpression(node) &&\n    t.isMemberExpression(node.callee) &&\n    containsGestureObject(t, node.callee.object)\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isGestureObject(\n  t: typeof BabelCore.types,\n  node: BabelTypes.Expression\n) {\n  // Checks if node matches `Gesture.Tap()` or similar.\n  /*\n  node: CallExpression(\n    callee: MemberExpression(\n      object: Identifier('Gesture')\n      property: Identifier('Tap')\n    )\n  )\n  */\n  return (\n    t.isCallExpression(node) &&\n    t.isMemberExpression(node.callee) &&\n    t.isIdentifier(node.callee.object) &&\n    node.callee.object.name === 'Gesture' &&\n    t.isIdentifier(node.callee.property) &&\n    gestureHandlerGestureObjects.has(node.callee.property.name)\n  );\n}\n", "import * as BabelCore from '@babel/core';\nimport * as BabelTypes from '@babel/types';\nimport { isRelease } from './commonFunctions';\nimport { ReanimatedPluginPass } from './commonInterfaces';\n\nfunction generateInlineStylesWarning(\n  t: typeof BabelCore.types,\n  memberExpression: BabelCore.NodePath<BabelTypes.MemberExpression>\n) {\n  // replaces `sharedvalue.value` with `(()=>{console.warn(require('react-native-reanimated').getUseOfValueInStyleWarning());return sharedvalue.value;})()`\n  return t.callExpression(\n    t.arrowFunctionExpression(\n      [],\n      t.blockStatement([\n        t.expressionStatement(\n          t.callExpression(\n            t.memberExpression(t.identifier('console'), t.identifier('warn')),\n            [\n              t.callExpression(\n                t.memberExpression(\n                  t.callExpression(t.identifier('require'), [\n                    t.stringLiteral('react-native-reanimated'),\n                  ]),\n                  t.identifier('getUseOfValueInStyleWarning')\n                ),\n                []\n              ),\n            ]\n          )\n        ),\n        t.returnStatement(memberExpression.node),\n      ])\n    ),\n    []\n  );\n}\n\nfunction processPropertyValueForInlineStylesWarning(\n  t: typeof BabelCore.types,\n  path: BabelCore.NodePath<BabelTypes.ObjectProperty['value']>\n) {\n  // if it's something like object.value then raise a warning\n  if (t.isMemberExpression(path.node) && t.isIdentifier(path.node.property)) {\n    if (path.node.property.name === 'value') {\n      path.replaceWith(\n        generateInlineStylesWarning(\n          t,\n          path as BabelCore.NodePath<BabelTypes.MemberExpression>\n        )\n      );\n    }\n  }\n}\n\nfunction processTransformPropertyForInlineStylesWarning(\n  t: typeof BabelCore.types,\n  path: BabelCore.NodePath<BabelTypes.ObjectProperty['value']>\n) {\n  if (t.isArrayExpression(path.node)) {\n    const elements = path.get('elements') as Array<\n      BabelCore.NodePath<BabelTypes.ArrayExpression['elements'][number]>\n    >;\n    for (const element of elements) {\n      if (t.isObjectExpression(element.node)) {\n        processStyleObjectForInlineStylesWarning(\n          t,\n          element as BabelCore.NodePath<BabelTypes.ObjectExpression>\n        ); // why is it not inferred? [TO DO]\n      }\n    }\n  }\n}\n\nfunction processStyleObjectForInlineStylesWarning(\n  t: typeof BabelCore.types,\n  path: BabelCore.NodePath<BabelTypes.ObjectExpression>\n) {\n  const properties = path.get('properties') as Array<\n    BabelCore.NodePath<BabelTypes.ObjectExpression['properties'][number]>\n  >;\n  for (const property of properties) {\n    if (!BabelTypes.isObjectProperty(property.node)) continue;\n    const value = property.get('value') as BabelCore.NodePath<\n      BabelTypes.ObjectProperty['value']\n    >;\n    if (t.isObjectProperty(property)) {\n      if (\n        t.isIdentifier(property.node.key) &&\n        property.node.key.name === 'transform'\n      ) {\n        processTransformPropertyForInlineStylesWarning(t, value);\n      } else {\n        processPropertyValueForInlineStylesWarning(t, value);\n      }\n    }\n  }\n}\n\nexport function processInlineStylesWarning(\n  t: typeof BabelCore.types,\n  path: BabelCore.NodePath<BabelTypes.JSXAttribute>,\n  state: ReanimatedPluginPass\n) {\n  if (isRelease()) return;\n  if (state.opts.disableInlineStylesWarning) return;\n  if (path.node.name.name !== 'style') return;\n  if (!t.isJSXExpressionContainer(path.node.value)) return;\n\n  const expression = path\n    .get('value')\n    .get('expression') as BabelCore.NodePath<BabelTypes.Expression>;\n  // style={[{...}, {...}]}\n  if (BabelTypes.isArrayExpression(expression.node)) {\n    const elements = expression.get('elements') as Array<\n      BabelCore.NodePath<BabelTypes.ArrayExpression['elements'][number]>\n    >;\n    for (const element of elements) {\n      if (t.isObjectExpression(element.node)) {\n        processStyleObjectForInlineStylesWarning(\n          t,\n          element as BabelCore.NodePath<BabelTypes.ObjectExpression>\n        ); // why is it not inferred? [TO DO]\n      }\n    }\n  }\n  // style={{...}}\n  else if (t.isObjectExpression(expression.node)) {\n    processStyleObjectForInlineStylesWarning(\n      t,\n      expression as BabelCore.NodePath<BabelTypes.ObjectExpression>\n    ); // why is it not inferred? [TO DO]\n  }\n}\n", "{\n  \"name\": \"react-native-reanimated\",\n  \"version\": \"3.0.2\",\n  \"description\": \"More powerful alternative to Animated library for React Native.\",\n  \"scripts\": {\n    \"test\": \"yarn run format:js && yarn run lint:js && yarn run test:unit\",\n    \"test:unit\": \"jest\",\n    \"lint\": \"yarn lint:js && yarn lint:plugin && yarn lint:cpp && yarn lint:java && yarn lint:ios && yarn lint:docs\",\n    \"lint:js\": \"eslint --ext '.js,.ts,.tsx' src/ && yarn prettier --check src/\",\n    \"lint:plugin\": \"cd plugin && yarn lint && cd ..\",\n    \"lint:docs\": \"cd docs && yarn lint && cd ..\",\n    \"lint:java\": \"./android/gradlew -p android spotlessCheck -q\",\n    \"lint:cpp\": \"./scripts/cpplint.sh\",\n    \"lint:ios\": \"./scripts/validate-ios.sh && yarn format:ios --dry-run\",\n    \"format\": \"yarn format:js && yarn format:plugin && yarn format:java && yarn format:ios && yarn format:android && yarn format:common\",\n    \"format:js\": \"prettier --write --list-different './src/'\",\n    \"format:plugin\": \"cd plugin && yarn format && cd ..\",\n    \"format:java\": \"node ./scripts/format-java.js\",\n    \"format:ios\": \"find ios/ -iname *.h -o -iname *.m -o -iname *.mm -o -iname *.cpp | xargs clang-format -i --Werror\",\n    \"format:android\": \"find android/src/ -iname *.h -o -iname *.cpp | xargs clang-format -i\",\n    \"format:common\": \"find Common/ -iname *.h -o -iname *.cpp | xargs clang-format -i\",\n    \"release\": \"npm login && release-it\",\n    \"type:check\": \"yarn tsc --noEmit && cd plugin && yarn type:check && cd ..\",\n    \"prepare\": \"bob build && husky install && yarn plugin\",\n    \"circular_dependency_check\": \"yarn madge --extensions js,ts,tsx --circular src lib\",\n    \"setup\": \"yarn && cd Example && yarn && cd ios && pod install --verbose && cd ../..\",\n    \"clean\": \"rm -rf node_modules && cd Example && rm -rf node_modules && cd ios && pod deintegrate && cd ../..\",\n    \"reset\": \"yarn clean && yarn setup\",\n    \"clean:deep\": \"cd android && rm -rf .cxx .gradle build && cd ../Example/android && rm -rf .gradle build app/build && cd ../.. && yarn clean\",\n    \"reset:deep\": \"yarn clean:deep && yarn setup\",\n    \"plugin\": \"cd plugin && yarn && cd ..\"\n  },\n  \"main\": \"lib/commonjs/index\",\n  \"module\": \"lib/module/index\",\n  \"react-native\": \"src/index\",\n  \"source\": \"src/index\",\n  \"types\": \"react-native-reanimated.d.ts\",\n  \"files\": [\n    \"Common/\",\n    \"src/\",\n    \"lib/\",\n    \"react-native-reanimated.d.ts\",\n    \"android/src/main/AndroidManifest.xml\",\n    \"android/src/main/java/\",\n    \"android/build.gradle\",\n    \"android/\",\n    \"ios/\",\n    \"RNReanimated.podspec\",\n    \"scripts/reanimated_utils.rb\",\n    \"README.md\",\n    \"mock.js\",\n    \"plugin/\",\n    \"!**/__tests__\",\n    \"!**/__fixtures__\",\n    \"!**/__mocks__\",\n    \"!lib/typescript\",\n    \"!ios/build/\",\n    \"!android/build/\",\n    \"!android/.cxx/\",\n    \"!android/.gradle/\",\n    \"!__snapshots__\",\n    \"!*.test.js\",\n    \"!*.test.js.map\",\n    \"!**/node_modules\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/software-mansion/react-native-reanimated.git\"\n  },\n  \"author\": {\n    \"email\": \"krzys.magiera@gmail.com\",\n    \"name\": \"Krzysztof Magiera\"\n  },\n  \"license\": \"MIT\",\n  \"readmeFilename\": \"README.md\",\n  \"bugs\": {\n    \"url\": \"https://github.com/software-mansion/react-native-reanimated/issues\"\n  },\n  \"homepage\": \"https://github.com/software-mansion/react-native-reanimated#readme\",\n  \"dependencies\": {\n    \"@babel/plugin-transform-object-assign\": \"^7.16.7\",\n    \"@babel/preset-typescript\": \"^7.16.7\",\n    \"convert-source-map\": \"^2.0.0\",\n    \"invariant\": \"^2.2.4\",\n    \"lodash.isequal\": \"^4.5.0\",\n    \"setimmediate\": \"^1.0.5\",\n    \"string-hash-64\": \"^1.0.3\"\n  },\n  \"peerDependencies\": {\n    \"@babel/core\": \"^7.0.0-0\",\n    \"react\": \"*\",\n    \"react-native\": \"*\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"12.7.12\",\n    \"@babel/cli\": \"^7.17.6\",\n    \"@babel/core\": \"^7.20.0\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.16.7\",\n    \"@babel/plugin-proposal-optional-chaining\": \"^7.16.7\",\n    \"@babel/preset-env\": \"^7.20.0\",\n    \"@react-native-community/eslint-config\": \"^3.2.0\",\n    \"@testing-library/jest-native\": \"^4.0.4\",\n    \"@testing-library/react-hooks\": \"^8.0.0\",\n    \"@testing-library/react-native\": \"^7.1.0\",\n    \"@types/convert-source-map\": \"^2.0.0\",\n    \"@types/babel-types\": \"^7.0.11\",\n    \"@types/babel__core\": \"^7.1.18\",\n    \"@types/babel__generator\": \"^7.6.4\",\n    \"@types/babel__traverse\": \"^7.14.2\",\n    \"@types/invariant\": \"^2.2.35\",\n    \"@types/jest\": \"^27.4.0\",\n    \"@types/react\": \"^18.0.26\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.11.0\",\n    \"@typescript-eslint/parser\": \"^5.11.0\",\n    \"babel-eslint\": \"^10.1.0\",\n    \"babel-jest\": \"^27.5.1\",\n    \"babel-plugin-module-resolver\": \"^4.1.0\",\n    \"clang-format\": \"^1.6.0\",\n    \"eslint\": \"^8.8.0\",\n    \"eslint-config-prettier\": \"^8.3.0\",\n    \"eslint-config-standard\": \"^16.0.3\",\n    \"eslint-import-resolver-babel-module\": \"^5.3.1\",\n    \"eslint-plugin-import\": \"^2.25.4\",\n    \"eslint-plugin-jest\": \"^27.2.1\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-promise\": \"^6.0.0\",\n    \"eslint-plugin-standard\": \"^5.0.0\",\n    \"husky\": \"^7.0.4\",\n    \"jest\": \"^27.5.1\",\n    \"lint-staged\": \"^11.2.0\",\n    \"madge\": \"^5.0.1\",\n    \"prettier\": \"^2.5.1\",\n    \"react\": \"17.0.2\",\n    \"react-native\": \"0.71.3\",\n    \"react-native-builder-bob\": \"^0.18.3\",\n    \"react-native-gesture-handler\": \"^2.4.2\",\n    \"react-test-renderer\": \"17.0.2\",\n    \"release-it\": \"^13.7.2\",\n    \"typescript\": \"^4.1.3\"\n  },\n  \"lint-staged\": {\n    \"*.(js|ts|tsx)\": [\n      \"eslint --ext '.js,.ts,.tsx' src/ --ignore-pattern src/reanimated1 --ignore-pattern react-native-reanimated.d.ts --ignore-pattern docs --ignore-pattern plugin\",\n      \"prettier --write\"\n    ],\n    \"plugin/**/*.ts\": \"yarn lint:plugin\",\n    \"**/*.{h,cpp}\": \"yarn lint:cpp\",\n    \"android/src/**/*.java\": \"yarn format:java\",\n    \"android/src/**/*.{h,cpp}\": \"yarn format:android\",\n    \"ios/**/*.{h,m,mm,cpp}\": \"yarn format:ios\",\n    \"Common/**/*.{h,cpp}\": \"yarn format:common\",\n    \"docs/**/*.{md,mdx}\": \"yarn lint:docs\"\n  },\n  \"release-it\": {\n    \"hooks\": {\n      \"before:git:bump\": [\n        \"# check if version corresponds to changes in native files  \\n  if git diff --name-only ${latestVersion} HEAD | egrep '(android/.*)|(ios/.*)' -q ; then egrep '\\\\.0$' -q <<< ${version} ; else true ; fi ;\"\n      ]\n    }\n  },\n  \"react-native-builder-bob\": {\n    \"source\": \"src\",\n    \"output\": \"lib\",\n    \"targets\": [\n      \"commonjs\",\n      \"module\",\n      [\n        \"typescript\",\n        {\n          \"project\": \"tsconfig.json\"\n        }\n      ]\n    ]\n  },\n  \"sideEffects\": [\n    \"./lib/reanimated2/core\",\n    \"./lib/reanimated2/js-reanimated/global\",\n    \"./lib/index\"\n  ]\n}\n", "import * as BabelCore from '@babel/core';\nimport * as BabelTypes from '@babel/types';\nimport reanimatedPluginVersion from '../../package.json';\n\nexport function injectVersion(\n  path: BabelCore.NodePath<BabelTypes.DirectiveLiteral>\n) {\n  // We want to inject plugin's version only once,\n  // hence we have a Directive Literal line in Reanimated code.\n  // See src/reanimated2/platform-specific/checkPluginVersion.ts\n  // to see the details of this implementation.\n  if (path.node.value !== 'inject Reanimated Babel plugin version') {\n    return;\n  }\n  const injectedName = '_REANIMATED_VERSION_BABEL_PLUGIN';\n  const versionString = reanimatedPluginVersion.version;\n  const pluginVersionNode = BabelTypes.expressionStatement(\n    BabelTypes.assignmentExpression(\n      '=',\n      BabelTypes.memberExpression(\n        BabelTypes.identifier('global'),\n        BabelTypes.identifier(injectedName)\n      ),\n      BabelTypes.stringLiteral(versionString)\n    )\n  );\n\n  const functionParent = (\n    path.getFunctionParent() as BabelCore.NodePath<BabelTypes.FunctionDeclaration>\n  ).node;\n  // DirectiveLiteral is in property of its function parent 'directives' hence we cannot just replace it.\n  functionParent.body.directives = [];\n  functionParent.body.body.unshift(pluginVersionNode);\n}\n", "import * as BabelCore from '@babel/core';\nimport * as BabelTypes from '@babel/types';\nimport { globals } from './commonObjects';\nimport { ReanimatedPluginPass } from './commonInterfaces';\nimport { processWorklets } from './processWorklets';\nimport { processIfWorkletNode } from './processIfWorkletNode';\nimport { processIfGestureHandlerEventCallbackFunctionNode } from './processIfGestureHandlerEventCallbackFunctionNode';\nimport { processInlineStylesWarning } from './processInlineStylesWarning';\nimport { injectVersion } from './injectVersion';\n\nexport default function ({ types: t }: typeof BabelCore): BabelCore.PluginItem {\n  return {\n    pre() {\n      // allows adding custom globals such as host-functions\n      if (this.opts != null && Array.isArray(this.opts.globals)) {\n        this.opts.globals.forEach((name: string) => {\n          globals.add(name);\n        });\n      }\n    },\n    visitor: {\n      DirectiveLiteral: {\n        enter(path: BabelCore.NodePath<BabelTypes.DirectiveLiteral>) {\n          injectVersion(path);\n        },\n      },\n      CallExpression: {\n        enter(\n          path: BabelCore.NodePath<BabelTypes.CallExpression>,\n          state: ReanimatedPluginPass\n        ) {\n          processWorklets(t, path, state);\n        },\n      },\n      'FunctionDeclaration|FunctionExpression|ArrowFunctionExpression': {\n        enter(\n          path: BabelCore.NodePath<\n            | BabelTypes.FunctionDeclaration\n            | BabelTypes.FunctionExpression\n            | BabelTypes.ArrowFunctionExpression\n          >,\n          state: ReanimatedPluginPass\n        ) {\n          processIfWorkletNode(t, path, state);\n          processIfGestureHandlerEventCallbackFunctionNode(t, path, state);\n        },\n      },\n      JSXAttribute: {\n        enter(path, state) {\n          processInlineStylesWarning(t, path, state);\n        },\n      },\n    },\n  };\n}\n"],
  "mappings": "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",
  "names": ["generate", "traverse", "BabelTypes", "BabelTypes", "BabelTypes", "BabelTypes", "memberExpression", "BabelTypes", "BabelTypes"]
}
