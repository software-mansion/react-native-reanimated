#pragma once
#include <string>

#ifdef REANIMATED_FEATURE_FLAGS
#define STRINGIFY(x) #x
#define TOSTRING(x) STRINGIFY(x)
#define REANIMATED_FEATURE_FLAGS_STRING TOSTRING(REANIMATED_FEATURE_FLAGS)
constexpr bool getFlag(const char* key) {
  const std::string keyStr = key;
  std::string featureFlags = REANIMATED_FEATURE_FLAGS_STRING;
  if (featureFlags.find(key) == std::string::npos) {
    // this will cause compilation error not runtime error
    throw std::logic_error("Unable to recognize flag: " + keyStr);
  }
  return featureFlags.find("const" + keyStr + "=true") != std::string::npos;
}
#else
constexpr bool getFlag(const char*) {
  return false;
}
#endif

namespace reanimated {

class FeaturesConfig {
 public:
  static inline bool isLayoutAnimationEnabled() {
    return _isLayoutAnimationEnabled;
  }
  static inline void setLayoutAnimationEnabled(bool isLayoutAnimationEnabled) {
    _isLayoutAnimationEnabled = isLayoutAnimationEnabled;
  }

 private:
  static bool _isLayoutAnimationEnabled;
};

} // namespace reanimated
