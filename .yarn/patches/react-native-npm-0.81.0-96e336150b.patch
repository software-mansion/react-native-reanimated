diff --git a/React/Base/RCTBundleConsumer.h b/React/Base/RCTBundleConsumer.h
new file mode 100644
index 00000000000..8f1eb972424
--- /dev/null
+++ b/React/Base/RCTBundleConsumer.h
@@ -0,0 +1,20 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#import <Foundation/Foundation.h>
+#import <React/NSBigStringBuffer.h>
+
+/**
+ * Provides the interface needed to register a Bundle Consumer module.
+ */
+@protocol RCTBundleConsumer <NSObject>
+
+@property (nonatomic, strong, readwrite) NSBigStringBuffer *scriptBuffer;
+
+@property (nonatomic, strong, readwrite) NSString *sourceURL;
+
+@end
diff --git a/React/CxxBridge/NSBigStringBuffer.h b/React/CxxBridge/NSBigStringBuffer.h
new file mode 100644
index 00000000000..8643c17a5ae
--- /dev/null
+++ b/React/CxxBridge/NSBigStringBuffer.h
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#import <Foundation/Foundation.h>
+
+#ifdef __cplusplus
+#import <jsireact/JSIExecutor.h>
+#import <memory>
+
+using namespace facebook;
+using namespace facebook::react;
+#endif // __cplusplus
+
+@interface NSBigStringBuffer : NSObject
+#ifdef __cplusplus
+
+{
+  std::shared_ptr<const BigStringBuffer> _buffer;
+}
+
+- (instancetype)initWithSharedPtr:(const std::shared_ptr<const BigStringBuffer> &)buffer;
+- (const std::shared_ptr<const BigStringBuffer> &)getBuffer;
+#endif // __cplusplus
+
+@end
diff --git a/React/CxxBridge/NSBigStringBuffer.mm b/React/CxxBridge/NSBigStringBuffer.mm
new file mode 100644
index 00000000000..20ec1a93bc7
--- /dev/null
+++ b/React/CxxBridge/NSBigStringBuffer.mm
@@ -0,0 +1,23 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#import "NSBigStringBuffer.h"
+
+@implementation NSBigStringBuffer
+
+- (instancetype)initWithSharedPtr:(const std::shared_ptr<const BigStringBuffer>&)buffer {
+    if (self = [super init]) {
+        _buffer = buffer;
+    }
+    return self;
+}
+
+- (const std::shared_ptr<const BigStringBuffer>&)getBuffer {
+    return _buffer;
+}
+
+@end
diff --git a/ReactAndroid/src/main/java/com/facebook/react/bridge/BundleConsumer.kt b/ReactAndroid/src/main/java/com/facebook/react/bridge/BundleConsumer.kt
new file mode 100644
index 00000000000..a9f4656e0d9
--- /dev/null
+++ b/ReactAndroid/src/main/java/com/facebook/react/bridge/BundleConsumer.kt
@@ -0,0 +1,15 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.bridge
+
+import com.facebook.react.fabric.BigStringBufferWrapper
+
+public interface BundleConsumer {
+  public fun setScriptWrapper(scriptWrapper: BigStringBufferWrapper)
+  public fun setSourceURL(sourceURL: String)
+}
diff --git a/ReactAndroid/src/main/java/com/facebook/react/fabric/BigStringBufferWrapper.kt b/ReactAndroid/src/main/java/com/facebook/react/fabric/BigStringBufferWrapper.kt
new file mode 100644
index 00000000000..1d41653271a
--- /dev/null
+++ b/ReactAndroid/src/main/java/com/facebook/react/fabric/BigStringBufferWrapper.kt
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.fabric
+
+import android.annotation.SuppressLint
+import android.content.res.AssetManager
+import com.facebook.jni.HybridData
+import com.facebook.proguard.annotations.DoNotStripAny
+
+/** TODO: Description */
+@SuppressLint("MissingNativeLoadLibrary")
+@DoNotStripAny
+public class BigStringBufferWrapper {
+
+  private val mHybridData: HybridData
+
+  public constructor(fileName: String) {
+    mHybridData = initHybridFromFile(fileName)
+  }
+
+  public constructor(assetManager: AssetManager, assetURL: String) {
+    mHybridData = initHybridFromAssets(assetManager, assetURL)
+  }
+
+  private external fun initHybridFromFile(fileName: String): HybridData
+
+  private external fun initHybridFromAssets(
+          assetManager: AssetManager,
+          assetURL: String
+  ): HybridData
+}
diff --git a/ReactAndroid/src/main/java/com/facebook/react/runtime/ReactInstance.kt b/ReactAndroid/src/main/java/com/facebook/react/runtime/ReactInstance.kt
index ff0cdb1d5ac..0842f3879b6 100644
--- a/ReactAndroid/src/main/java/com/facebook/react/runtime/ReactInstance.kt
+++ b/ReactAndroid/src/main/java/com/facebook/react/runtime/ReactInstance.kt
@@ -43,6 +43,7 @@ import com.facebook.react.common.annotations.UnstableReactNativeAPI
 import com.facebook.react.devsupport.InspectorFlags.getIsProfilingBuild
 import com.facebook.react.devsupport.StackTraceHelper
 import com.facebook.react.devsupport.interfaces.DevSupportManager
+import com.facebook.react.fabric.BigStringBufferWrapper
 import com.facebook.react.fabric.ComponentFactory
 import com.facebook.react.fabric.FabricUIManager
 import com.facebook.react.fabric.FabricUIManagerBinding
@@ -288,6 +289,18 @@ internal class ReactInstance(
     }
   }
 
+  fun beforeLoad(scriptWrapper: BigStringBufferWrapper, sourceURL: String){
+    val workletsModule = turboModuleManager.getModule("WorkletsModule")
+    if (workletsModule != null) {
+      val setScriptWrapperMethod = workletsModule::class.java.methods.find { it.name == "setScriptWrapper" }
+      val setSourceURLMethod = workletsModule::class.java.methods.find { it.name == "setSourceURL" }
+      if (setScriptWrapperMethod != null && setSourceURLMethod != null) {
+      setScriptWrapperMethod.invoke(workletsModule, scriptWrapper)
+      setSourceURLMethod.invoke(workletsModule, sourceURL)
+      }
+    }
+  }
+
   fun loadJSBundle(bundleLoader: JSBundleLoader) {
     Systrace.beginSection(Systrace.TRACE_TAG_REACT, "ReactInstance.loadJSBundle")
     bundleLoader.loadScript(
@@ -298,11 +311,18 @@ internal class ReactInstance(
               loadSynchronously: Boolean
           ) {
             context.setSourceURL(sourceURL)
-            loadJSBundleFromFile(fileName, sourceURL)
+
+            val script = BigStringBufferWrapper(fileName);
+
+            beforeLoad(script, sourceURL);
+            loadJSBundle(script, sourceURL)
           }
 
           override fun loadSplitBundleFromFile(fileName: String, sourceURL: String) {
-            loadJSBundleFromFile(fileName, sourceURL)
+            val script = BigStringBufferWrapper(fileName)
+
+            beforeLoad(script, sourceURL);
+            loadJSBundle(script, sourceURL)
           }
 
           override fun loadScriptFromAssets(
@@ -311,7 +331,12 @@ internal class ReactInstance(
               loadSynchronously: Boolean
           ) {
             context.setSourceURL(assetURL)
-            loadJSBundleFromAssets(assetManager, assetURL)
+
+            val sourceURL = assetURL.removePrefix("assets://")
+            val script = BigStringBufferWrapper(assetManager, sourceURL)
+
+            beforeLoad(script, assetURL);
+            loadJSBundle(script, assetURL)
           }
 
           override fun setSourceURLs(deviceURL: String, remoteURL: String) {
@@ -423,7 +448,7 @@ internal class ReactInstance(
       reactHostInspectorTarget: ReactHostInspectorTarget?
   ): HybridData
 
-  private external fun loadJSBundleFromFile(fileName: String, sourceURL: String)
+  private external fun loadJSBundle(scriptWrapper: BigStringBufferWrapper, sourceURL: String)
 
   private external fun loadJSBundleFromAssets(assetManager: AssetManager, assetURL: String)
 
diff --git a/ReactAndroid/src/main/jni/react/fabric/BigStringBufferWrapper.cpp b/ReactAndroid/src/main/jni/react/fabric/BigStringBufferWrapper.cpp
new file mode 100644
index 00000000000..0efb9dac6b6
--- /dev/null
+++ b/ReactAndroid/src/main/jni/react/fabric/BigStringBufferWrapper.cpp
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "BigStringBufferWrapper.h"
+#include <cxxreact/JSBigString.h>
+#include <cxxreact/RecoverableError.h>
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+jni::local_ref<BigStringBufferWrapper::jhybriddata>
+BigStringBufferWrapper::initHybridFromFile(
+    jni::alias_ref<jhybridobject> jThis,
+    std::string fileName) {
+  std::unique_ptr<const JSBigFileString> script;
+  RecoverableError::runRethrowingAsRecoverable<std::system_error>(
+      [&fileName, &script]() { script = JSBigFileString::fromPath(fileName); });
+  auto buffer = std::make_shared<BigStringBuffer>(std::move(script));
+  return makeCxxInstance(buffer);
+}
+
+jni::local_ref<BigStringBufferWrapper::jhybriddata>
+BigStringBufferWrapper::initHybridFromAssets(
+    jni::alias_ref<jhybridobject> jThis,
+    jni::alias_ref<JAssetManager::javaobject> assetManager,
+    const std::string& sourceURL) {
+  auto manager = extractAssetManager(assetManager);
+  auto script = loadScriptFromAssets(manager, sourceURL);
+  auto buffer = std::make_shared<BigStringBuffer>(std::move(script));
+  return makeCxxInstance(buffer);
+}
+
+BigStringBufferWrapper::BigStringBufferWrapper(
+    const std::shared_ptr<const BigStringBuffer>& script)
+    : script_(script) {}
+
+const std::shared_ptr<const BigStringBuffer> BigStringBufferWrapper::getScript()
+    const {
+  return script_;
+}
+
+void BigStringBufferWrapper::registerNatives() {
+  registerHybrid(
+      {makeNativeMethod(
+           "initHybridFromFile", BigStringBufferWrapper::initHybridFromFile),
+       makeNativeMethod(
+           "initHybridFromAssets",
+           BigStringBufferWrapper::initHybridFromAssets)});
+}
+} // namespace facebook::react
diff --git a/ReactAndroid/src/main/jni/react/fabric/BigStringBufferWrapper.h b/ReactAndroid/src/main/jni/react/fabric/BigStringBufferWrapper.h
new file mode 100644
index 00000000000..248f99faf1e
--- /dev/null
+++ b/ReactAndroid/src/main/jni/react/fabric/BigStringBufferWrapper.h
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <memory>
+#include <string>
+
+#include <fbjni/fbjni.h>
+#include <jsireact/JSIExecutor.h>
+#include <react/jni/JSLoader.h>
+
+namespace facebook::react {
+
+class BigStringBufferWrapper : public jni::HybridClass<BigStringBufferWrapper> {
+ public:
+  constexpr static const char* const kJavaDescriptor =
+      "Lcom/facebook/react/fabric/BigStringBufferWrapper;";
+
+  static void registerNatives();
+
+  [[nodiscard]] const std::shared_ptr<const BigStringBuffer> getScript() const;
+
+ private:
+  static jni::local_ref<BigStringBufferWrapper::jhybriddata> initHybridFromFile(
+      jni::alias_ref<jhybridobject> jThis,
+      std::string fileName);
+
+  static jni::local_ref<BigStringBufferWrapper::jhybriddata>
+  initHybridFromAssets(
+      jni::alias_ref<jhybridobject> jThis,
+      jni::alias_ref<JAssetManager::javaobject> assetManager,
+      const std::string& assetURL);
+
+  friend HybridBase;
+
+  explicit BigStringBufferWrapper(
+      const std::shared_ptr<const BigStringBuffer>& script);
+
+  const std::shared_ptr<const BigStringBuffer> script_;
+};
+
+} // namespace facebook::react
diff --git a/ReactAndroid/src/main/jni/react/fabric/OnLoad.cpp b/ReactAndroid/src/main/jni/react/fabric/OnLoad.cpp
index 064aec9141b..78a7ee32019 100644
--- a/ReactAndroid/src/main/jni/react/fabric/OnLoad.cpp
+++ b/ReactAndroid/src/main/jni/react/fabric/OnLoad.cpp
@@ -7,6 +7,7 @@
 
 #include <fbjni/fbjni.h>
 
+#include "BigStringBufferWrapper.h"
 #include "ComponentFactory.h"
 #include "EventBeatManager.h"
 #include "EventEmitterWrapper.h"
@@ -22,5 +23,6 @@ JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void*) {
     facebook::react::StateWrapperImpl::registerNatives();
     facebook::react::ComponentFactory::registerNatives();
     facebook::react::SurfaceHandlerBinding::registerNatives();
+    facebook::react::BigStringBufferWrapper::registerNatives();
   });
 }
diff --git a/ReactAndroid/src/main/jni/react/runtime/jni/JReactInstance.cpp b/ReactAndroid/src/main/jni/react/runtime/jni/JReactInstance.cpp
index 5ffd7492ba8..5414a38d021 100644
--- a/ReactAndroid/src/main/jni/react/runtime/jni/JReactInstance.cpp
+++ b/ReactAndroid/src/main/jni/react/runtime/jni/JReactInstance.cpp
@@ -132,24 +132,11 @@ jni::local_ref<JReactInstance::jhybriddata> JReactInstance::initHybrid(
       jReactHostInspectorTarget);
 }
 
-void JReactInstance::loadJSBundleFromAssets(
-    jni::alias_ref<JAssetManager::javaobject> assetManager,
-    const std::string& assetURL) {
-  const int kAssetsLength = 9; // strlen("assets://");
-  auto sourceURL = assetURL.substr(kAssetsLength);
-
-  auto manager = extractAssetManager(assetManager);
-  auto script = loadScriptFromAssets(manager, sourceURL);
-  instance_->loadScript(std::move(script), sourceURL);
-}
-
-void JReactInstance::loadJSBundleFromFile(
-    const std::string& fileName,
+void JReactInstance::loadJSBundle(
+    jni::alias_ref<BigStringBufferWrapper::javaobject> scriptWrapper,
     const std::string& sourceURL) {
-  std::unique_ptr<const JSBigFileString> script;
-  RecoverableError::runRethrowingAsRecoverable<std::system_error>(
-      [&fileName, &script]() { script = JSBigFileString::fromPath(fileName); });
-  instance_->loadScript(std::move(script), sourceURL);
+  auto script = scriptWrapper->cthis()->getScript();
+  instance_->loadScript(script, sourceURL);
 }
 
 /**
@@ -219,10 +206,7 @@ void JReactInstance::registerNatives() {
       makeNativeMethod("initHybrid", JReactInstance::initHybrid),
       makeNativeMethod(
           "createJSTimerExecutor", JReactInstance::createJSTimerExecutor),
-      makeNativeMethod(
-          "loadJSBundleFromAssets", JReactInstance::loadJSBundleFromAssets),
-      makeNativeMethod(
-          "loadJSBundleFromFile", JReactInstance::loadJSBundleFromFile),
+      makeNativeMethod("loadJSBundle", JReactInstance::loadJSBundle),
       makeNativeMethod(
           "getJSCallInvokerHolder", JReactInstance::getJSCallInvokerHolder),
       makeNativeMethod(
diff --git a/ReactAndroid/src/main/jni/react/runtime/jni/JReactInstance.h b/ReactAndroid/src/main/jni/react/runtime/jni/JReactInstance.h
index d6552a8a978..ff9445980f7 100644
--- a/ReactAndroid/src/main/jni/react/runtime/jni/JReactInstance.h
+++ b/ReactAndroid/src/main/jni/react/runtime/jni/JReactInstance.h
@@ -13,6 +13,7 @@
 #include <fbjni/fbjni.h>
 #include <jni.h>
 #include <jsi/jsi.h>
+#include <react/fabric/BigStringBufferWrapper.h>
 #include <react/jni/JMessageQueueThread.h>
 #include <react/jni/JRuntimeExecutor.h>
 #include <react/jni/JRuntimeScheduler.h>
@@ -58,12 +59,8 @@ class JReactInstance : public jni::HybridClass<JReactInstance> {
 
   static void registerNatives();
 
-  void loadJSBundleFromAssets(
-      jni::alias_ref<JAssetManager::javaobject> assetManager,
-      const std::string& assetURL);
-
-  void loadJSBundleFromFile(
-      const std::string& fileName,
+  void loadJSBundle(
+      jni::alias_ref<BigStringBufferWrapper::javaobject> scriptWrapper,
       const std::string& sourceURL);
 
   void callFunctionOnModule(
diff --git a/ReactCommon/react/nativemodule/core/ReactCommon/TurboModule.h b/ReactCommon/react/nativemodule/core/ReactCommon/TurboModule.h
index d7bc14e3ef3..138691a4ee3 100644
--- a/ReactCommon/react/nativemodule/core/ReactCommon/TurboModule.h
+++ b/ReactCommon/react/nativemodule/core/ReactCommon/TurboModule.h
@@ -150,6 +150,7 @@ class JSI_EXPORT TurboModule : public jsi::HostObject {
  private:
   friend class TurboModuleBinding;
   std::unique_ptr<jsi::WeakObject> jsRepresentation_;
+  jsi::Runtime* representationRuntime_;
 };
 
 /**
diff --git a/ReactCommon/react/nativemodule/core/ReactCommon/TurboModuleBinding.cpp b/ReactCommon/react/nativemodule/core/ReactCommon/TurboModuleBinding.cpp
index 3ec219424f3..bc63b58cf5d 100644
--- a/ReactCommon/react/nativemodule/core/ReactCommon/TurboModuleBinding.cpp
+++ b/ReactCommon/react/nativemodule/core/ReactCommon/TurboModuleBinding.cpp
@@ -178,6 +178,7 @@ jsi::Value TurboModuleBinding::getModule(
     jsi::Object jsRepresentation(runtime);
     weakJsRepresentation =
         std::make_unique<jsi::WeakObject>(runtime, jsRepresentation);
+    module->representationRuntime_ = &runtime;
 
     // Lazily populate the jsRepresentation, on property access.
     //
diff --git a/ReactCommon/react/runtime/ReactInstance.cpp b/ReactCommon/react/runtime/ReactInstance.cpp
index 29d2910fe7a..55b84560ee4 100644
--- a/ReactCommon/react/runtime/ReactInstance.cpp
+++ b/ReactCommon/react/runtime/ReactInstance.cpp
@@ -214,17 +214,16 @@ std::string simpleBasename(const std::string& path) {
  * preferably via the runtimeExecutor_.
  */
 void ReactInstance::loadScript(
-    std::unique_ptr<const JSBigString> script,
+    const std::shared_ptr<const BigStringBuffer>& script,
     const std::string& sourceURL,
     std::function<void(jsi::Runtime& runtime)>&& beforeLoad,
     std::function<void(jsi::Runtime& runtime)>&& afterLoad) {
-  auto buffer = std::make_shared<BigStringBuffer>(std::move(script));
   std::string scriptName = simpleBasename(sourceURL);
 
   runtimeScheduler_->scheduleWork([this,
                                    scriptName,
                                    sourceURL,
-                                   buffer = std::move(buffer),
+                                   script,
                                    weakBufferedRuntimeExecuter =
                                        std::weak_ptr<BufferedRuntimeExecutor>(
                                            bufferedRuntimeExecutor_),
@@ -240,7 +239,7 @@ void ReactInstance::loadScript(
           ReactMarker::RUN_JS_BUNDLE_START, scriptName.c_str());
     }
 
-    runtime.evaluateJavaScript(buffer, sourceURL);
+    runtime.evaluateJavaScript(script, sourceURL);
 
     /**
      * TODO(T183610671): We need a safe/reliable way to enable the js
diff --git a/ReactCommon/react/runtime/ReactInstance.h b/ReactCommon/react/runtime/ReactInstance.h
index 0221ce1f55d..6cd0f105e3a 100644
--- a/ReactCommon/react/runtime/ReactInstance.h
+++ b/ReactCommon/react/runtime/ReactInstance.h
@@ -49,7 +49,7 @@ class ReactInstance final : private jsinspector_modern::InstanceTargetDelegate {
       BindingsInstallFunc bindingsInstallFunc) noexcept;
 
   void loadScript(
-      std::unique_ptr<const JSBigString> script,
+      const std::shared_ptr<const BigStringBuffer>& script,
       const std::string& sourceURL,
       std::function<void(jsi::Runtime& runtime)>&& beforeLoad = nullptr,
       std::function<void(jsi::Runtime& runtime)>&& afterLoad = nullptr);
diff --git a/ReactCommon/react/runtime/platform/ios/ReactCommon/RCTInstance.mm b/ReactCommon/react/runtime/platform/ios/ReactCommon/RCTInstance.mm
index 029c4cf7964..cafc303ab11 100644
--- a/ReactCommon/react/runtime/platform/ios/ReactCommon/RCTInstance.mm
+++ b/ReactCommon/react/runtime/platform/ios/ReactCommon/RCTInstance.mm
@@ -11,6 +11,7 @@
 
 #import <FBReactNativeSpec/FBReactNativeSpec.h>
 #import <React/NSDataBigString.h>
+#import <React/NSBigStringBuffer.h>
 #import <React/RCTAssert.h>
 #import <React/RCTBridge+Inspector.h>
 #import <React/RCTBridge+Private.h>
@@ -19,6 +20,7 @@
 #import <React/RCTBridgeModuleDecorator.h>
 #import <React/RCTBridgeProxy+Cxx.h>
 #import <React/RCTBridgeProxy.h>
+#import <React/RCTBundleConsumer.h>
 #import <React/RCTComponentViewFactory.h>
 #import <React/RCTConstants.h>
 #import <React/RCTCxxUtils.h>
@@ -571,9 +573,19 @@ - (void)_loadScriptFromSource:(RCTSource *)source
   }
 
   auto script = std::make_unique<NSDataBigString>(source.data);
+  const auto scriptBuffer = std::make_shared<const BigStringBuffer>(std::move(script));
   const auto *url = deriveSourceURL(source.url).UTF8String;
 
-  auto beforeLoad = [waitUntilModuleSetupComplete = self->_waitUntilModuleSetupComplete](jsi::Runtime &_) {
+  auto beforeLoad = [waitUntilModuleSetupComplete = self->_waitUntilModuleSetupComplete, turboModuleManager = self->_turboModuleManager, scriptBuffer, url](jsi::Runtime &_) {
+    @try {
+      id workletsModule = [turboModuleManager moduleForName:@"WorkletsModule".UTF8String];
+      if ([workletsModule respondsToSelector:@selector(setScriptBuffer:)] && [workletsModule respondsToSelector:@selector(setSourceURL:)]) {
+        [workletsModule setScriptBuffer:[[NSBigStringBuffer alloc] initWithSharedPtr:scriptBuffer]];
+        [workletsModule setSourceURL:@(url)];
+      }
+    } @catch (NSException *exception) {
+    }
+    
     if (waitUntilModuleSetupComplete) {
       waitUntilModuleSetupComplete();
     }
@@ -581,7 +593,8 @@ - (void)_loadScriptFromSource:(RCTSource *)source
   auto afterLoad = [](jsi::Runtime &_) {
     [[NSNotificationCenter defaultCenter] postNotificationName:@"RCTInstanceDidLoadBundle" object:nil];
   };
-  _reactInstance->loadScript(std::move(script), url, beforeLoad, afterLoad);
+
+  _reactInstance->loadScript(scriptBuffer, url, beforeLoad, afterLoad);
 }
 
 - (void)_handleJSError:(const JsErrorHandler::ProcessedError &)error withRuntime:(jsi::Runtime &)runtime
