diff --git a/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt b/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt
index e3ad6a6117079cb6ebc0fdd070aaba86c64e5e12..808a69e60e9da303f63445a1df3602e7e9f23caa 100644
--- a/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt
+++ b/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt
@@ -1,6 +1,6 @@
 package com.swmansion.gesturehandler
 
-import com.facebook.react.TurboReactPackage
+import com.facebook.react.BaseReactPackage
 import com.facebook.react.ViewManagerOnDemandReactPackage
 import com.facebook.react.bridge.ModuleSpec
 import com.facebook.react.bridge.NativeModule
@@ -19,7 +19,7 @@ import com.swmansion.gesturehandler.react.RNGestureHandlerRootViewManager
     RNGestureHandlerModule::class
   ]
 )
-class RNGestureHandlerPackage : TurboReactPackage(), ViewManagerOnDemandReactPackage {
+class RNGestureHandlerPackage : BaseReactPackage(), ViewManagerOnDemandReactPackage {
   private val viewManagers: Map<String, ModuleSpec> by lazy {
     mapOf(
       RNGestureHandlerRootViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec {
@@ -37,15 +37,15 @@ class RNGestureHandlerPackage : TurboReactPackage(), ViewManagerOnDemandReactPac
       RNGestureHandlerButtonViewManager()
     )
 
-  override fun getViewManagerNames(reactContext: ReactApplicationContext?) =
+  override fun getViewManagerNames(reactContext: ReactApplicationContext) =
     viewManagers.keys.toList()
 
-  override fun getViewManagers(reactContext: ReactApplicationContext?): MutableList<ModuleSpec> =
+  override fun getViewManagers(reactContext: ReactApplicationContext): MutableList<ModuleSpec> =
     viewManagers.values.toMutableList()
 
   override fun createViewManager(
-    reactContext: ReactApplicationContext?,
-    viewManagerName: String?
+    reactContext: ReactApplicationContext,
+    viewManagerName: String
   ) = viewManagers[viewManagerName]?.provider?.get() as? ViewManager<*, *>
 
   override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {
@@ -71,7 +71,6 @@ class RNGestureHandlerPackage : TurboReactPackage(), ViewManagerOnDemandReactPac
             RNGestureHandlerModule::class.java.name,
             reactModule.canOverrideExistingModule,
             reactModule.needsEagerInit,
-            true, // Has constants is hardcoded to return true, so replacing it with `true` changes nothing.
             reactModule.isCxxModule,
             true
           )
diff --git a/src/getShadowNodeFromRef.ts b/src/getShadowNodeFromRef.ts
index eea295302a98438522fcd9d9e0fee91b80f872fd..ff4e96a7440bcc7823be5d36c0ac2047354e4d66 100644
--- a/src/getShadowNodeFromRef.ts
+++ b/src/getShadowNodeFromRef.ts
@@ -11,10 +11,16 @@ export function getShadowNodeFromRef(ref: unknown) {
   // Load findHostInstance_DEPRECATED lazily because it may not be available before render
   if (findHostInstance_DEPRECATED === undefined) {
     try {
+      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-assignment
+      const ReactFabric = require('react-native/Libraries/Renderer/shims/ReactFabric');
+      // Since RN 0.77 ReactFabric exports findHostInstance_DEPRECATED in default object so we're trying to
+      // access it first, then fallback on named export
       // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
       findHostInstance_DEPRECATED =
-        // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-member-access
-        require('react-native/Libraries/Renderer/shims/ReactFabric').findHostInstance_DEPRECATED;
+        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
+        ReactFabric?.default?.findHostInstance_DEPRECATED ||
+        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
+        ReactFabric?.findHostInstance_DEPRECATED;
     } catch (e) {
       findHostInstance_DEPRECATED = (_ref: unknown) => null;
     }
