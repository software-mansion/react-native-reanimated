diff --git a/index.js b/index.js
index 709991da99b8b5cd9c5f4d81774d874da087a20c..d4a1fd6b30af87f3e0a3a32bdc249758df7c1355 100644
--- a/index.js
+++ b/index.js
@@ -46,59 +46,75 @@ module.exports = {
         fixable: "code",
         schema: {
           type: "array",
-          minItems: 0,
-          maxItems: 1,
-          items: [
-            {
-              type: "object",
-              properties: {
-                allowSameFolder: { type: "boolean" },
-                rootDir: { type: "string" },
-                prefix: { type: "string" },
-                allowedDepth: { type: "number" },
-              },
-              additionalProperties: false,
+          items: {
+            type: "object",
+            properties: {
+              allowSameFolder: { type: "boolean" },
+              rootDir: { type: "string" },
+              prefix: { type: "string" },
+              allowedDepth: { type: "number" },
             },
-          ],
+            additionalProperties: false,
+          },
         },
       },
       create: function (context) {
-        const { allowedDepth, allowSameFolder, rootDir, prefix } = {
-          allowedDepth: context.options[0]?.allowedDepth,
-          allowSameFolder: context.options[0]?.allowSameFolder || false,
-          rootDir: context.options[0]?.rootDir || '',
-          prefix: context.options[0]?.prefix || '',
-        };
+        const configs = context.options.map(config => ({
+          allowedDepth: config?.allowedDepth,
+          allowSameFolder: config?.allowSameFolder || false,
+          rootDir: config?.rootDir || '',
+          prefix: config?.prefix || '',
+        }));
 
         return {
           ImportDeclaration: function (node) {
-            const path = node.source.value;
-            if (isParentFolder(path, context, rootDir)) {
-              if (typeof allowedDepth === 'undefined' || getRelativePathDepth(path) > allowedDepth) {
-                context.report({
-                  node,
-                  message: message,
-                  fix: function (fixer) {
-                    return fixer.replaceTextRange(
-                      [node.source.range[0] + 1, node.source.range[1] - 1],
-                      getAbsolutePath(path, context, rootDir, prefix)
-                    );
-                  },
-                });
+            const importPath = node.source.value;
+
+            for (const config of configs) {
+              const { allowedDepth, allowSameFolder, rootDir, prefix } = config;
+
+              if (isParentFolder(importPath, context, rootDir)) {
+                if (typeof allowedDepth === 'undefined' || getRelativePathDepth(importPath) > allowedDepth) {
+                  const absolutePath = getAbsolutePath(importPath, context, rootDir, prefix);
+                  // Only fix if the path is under this rootDir
+                  const absoluteFilePath = path.join(path.dirname(context.getFilename()), importPath);
+                  const absoluteRootPath = path.join(context.getCwd(), rootDir);
+
+                  if (absoluteFilePath.startsWith(absoluteRootPath)) {
+                    context.report({
+                      node,
+                      message: message,
+                      fix: function (fixer) {
+                        return fixer.replaceTextRange(
+                          [node.source.range[0] + 1, node.source.range[1] - 1],
+                          absolutePath
+                        );
+                      },
+                    });
+                    return; // Stop checking other configs once we've found a match
+                  }
+                }
               }
-            }
 
-            if (isSameFolder(path) && !allowSameFolder) {
-              context.report({
-                node,
-                message: message,
-                fix: function (fixer) {
-                  return fixer.replaceTextRange(
-                    [node.source.range[0] + 1, node.source.range[1] - 1],
-                    getAbsolutePath(path, context, rootDir, prefix)
-                  );
-                },
-              });
+              if (isSameFolder(importPath) && !allowSameFolder) {
+                const absolutePath = getAbsolutePath(importPath, context, rootDir, prefix);
+                const absoluteFilePath = path.join(path.dirname(context.getFilename()), importPath);
+                const absoluteRootPath = path.join(context.getCwd(), rootDir);
+
+                if (absoluteFilePath.startsWith(absoluteRootPath)) {
+                  context.report({
+                    node,
+                    message: message,
+                    fix: function (fixer) {
+                      return fixer.replaceTextRange(
+                        [node.source.range[0] + 1, node.source.range[1] - 1],
+                        absolutePath
+                      );
+                    },
+                  });
+                  return; // Stop checking other configs once we've found a match
+                }
+              }
             }
           },
         };
