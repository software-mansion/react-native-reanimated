name: GitHub Release

on:
  push:
    branches: ['@matipl01/github-release-action']
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to release'
        required: true
        type: choice
        options:
          - reanimated
          - worklets
      version:
        description: 'Version to release (e.g. 4.2.0)'
        required: true
        type: string
      branch:
        description: 'Branch to release from'
        required: true
        type: string
        default: 'main'
      dry_run:
        description: 'Dry run (test without creating release)'
        required: false
        type: boolean
        default: true

jobs:
  github-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    env:
      PACKAGE_DIR: packages/${{ inputs.package == 'reanimated' && 'react-native-reanimated' || 'react-native-worklets' }}
      PACKAGE_NAME: ${{ inputs.package == 'reanimated' && 'React Native Reanimated' || 'React Native Worklets' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: |
          corepack enable
          yarn install --immutable

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create temporary semantic-release config
        working-directory: ${{ env.PACKAGE_DIR }}
        run: |
          cat > .releaserc.temp.json << EOF
          {
            "branches": ["${{ inputs.branch }}"],
            "tagFormat": "${{ inputs.package }}-${version}",
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits",
                  "presetConfig": {
                    "types": [
                      { "type": "feat", "section": "🚀 Features" },
                      { "type": "fix", "section": "🐛 Bug Fixes" },
                      { "type": "perf", "section": "⚡ Performance Improvements" },
                      { "type": "docs", "section": "📚 Documentation" },
                      { "type": "revert", "section": "🔄 Reverts" }
                    ],
                    "other": "📝 Other Changes"
                  }
                }
              ],
              [
                "@semantic-release/github",
                {
                  "successComment": "🎉 This PR is included in version \${nextRelease.version} of ${{ env.PACKAGE_NAME }}!\n\n**Release Notes:**\n\${nextRelease.notes}",
                  "releasedLabels": ["${{ inputs.package }} \${nextRelease.version}"],
                  "addReleases": "bottom"
                }
              ]
            ]
          }
          EOF

      - name: Run semantic-release
        working-directory: ${{ env.PACKAGE_DIR }}
        run: |
          # Run semantic-release with the temporary config
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "🧪 Running in dry-run mode - no release will be created"
            yarn semantic-release --dry-run --extends .releaserc.temp.json
          else
            echo "🚀 Creating actual release"
            yarn semantic-release --extends .releaserc.temp.json
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up
        working-directory: ${{ env.PACKAGE_DIR }}
        run: |
          rm -f .releaserc.temp.json
