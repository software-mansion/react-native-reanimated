"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[4088],{18202:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(10287),s=t(14442);const i=()=>{const{colorMode:e}=(0,r.G)();return"light"===e?a.darkText:a.lightText},a=s.A.create({lightText:{color:"var(--swm-off-white)"},darkText:{color:"var(--swm-navy-light-100)"}})},29292:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>y,contentTitle:()=>j,default:()=>w,frontMatter:()=>g,metadata:()=>r,toc:()=>v});const r=JSON.parse('{"id":"threading/runOnUI","title":"runOnUI","description":"runOnUI lets you asynchronously run workletized functions on the UI thread.","source":"@site/versioned_docs/version-3.x/threading/runOnUI.mdx","sourceDirName":"threading","slug":"/threading/runOnUI","permalink":"/react-native-reanimated/docs/3.x/threading/runOnUI","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/versioned_docs/version-3.x/threading/runOnUI.mdx","tags":[],"version":"3.x","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"runOnJS","permalink":"/react-native-reanimated/docs/3.x/threading/runOnJS"},"next":{"title":"runOnRuntime","permalink":"/react-native-reanimated/docs/3.x/threading/runOnRuntime"}}');var s=t(47671),i=t(30620),a=t(39471),o=t(8589),l=t(31071),d=t(14442),c=t(66515),u=t(18202);const h={code:"function RunOnUITsx1(){const{measure,animatedRef,runOnJS,onPress}=this.__closure;const measurements=measure(animatedRef);runOnJS(onPress)(measurements);}"};function m(e){const n=(0,u.A)(),{children:t,onPress:r}=e,i=(0,c.useAnimatedRef)();return(0,s.jsx)(c.default.Text,{style:[x.title,n],onPress:()=>{(0,c.runOnUI)(function({_worklet_13630126343121_init_data:e,measure:n,animatedRef:t,runOnJS:r,onPress:s}){const i=function(){const e=n(t);r(s)(e)};return i.__closure={measure:n,animatedRef:t,runOnJS:r,onPress:s},i.__workletHash=0xc6582d6c3d1,i.__initData=e,i}({_worklet_13630126343121_init_data:h,measure:c.measure,animatedRef:i,runOnJS:c.runOnJS,onPress:r}))()},ref:i,children:t})}function f(){const[e,n]=a.useState(0),t=e=>{n(Math.floor(e.width))};return(0,s.jsxs)(o.A,{style:x.container,children:[["React","Native","Reanimated"].map(e=>(0,s.jsx)(m,{onPress:t,children:e},e)),(0,s.jsxs)(l.A,{style:x.label,children:["width: ",e]})]})}const x=d.A.create({container:{flex:1,alignItems:"center"},box:{height:100,width:100,backgroundColor:"#b58df1",borderRadius:20,marginVertical:64,alignSelf:"center"},title:{fontSize:42,textAlign:"center",fontWeight:"bold",marginRight:8},label:{fontSize:24,marginVertical:16,color:"#b58df1"}}),p="import React from 'react';\nimport { View, StyleSheet, Text } from 'react-native';\nimport Animated, {\n  runOnJS,\n  measure,\n  useAnimatedRef,\n  runOnUI,\n  MeasuredDimensions,\n} from 'react-native-reanimated';\nimport useThemedTextStyle from '@site/src/hooks/useThemedTextStyle';\n\ntype MeasurableTextProps = React.PropsWithChildren<{\n  onPress: (measurements: MeasuredDimensions) => void;\n}>;\n\nfunction MeasurableText(props: MeasurableTextProps) {\n  const textColor = useThemedTextStyle();\n  const { children, onPress } = props;\n  const animatedRef = useAnimatedRef<Animated.View>();\n\n  const handleMeasure = () => {\n    // highlight-next-line\n    runOnUI(() => {\n      const measurements = measure(animatedRef);\n      runOnJS(onPress)(measurements);\n      // highlight-next-line\n    })();\n  };\n\n  return (\n    <Animated.Text\n      style={[styles.title, textColor]}\n      onPress={handleMeasure}\n      ref={animatedRef}>\n      {children}\n    </Animated.Text>\n  );\n}\n\nexport default function App() {\n  const [text, setText] = React.useState(0);\n\n  const handlePress = (measurements: MeasuredDimensions) => {\n    setText(Math.floor(measurements.width));\n  };\n\n  return (\n    <View style={styles.container}>\n      {['React', 'Native', 'Reanimated'].map((word) => (\n        <MeasurableText key={word} onPress={handlePress}>\n          {word}\n        </MeasurableText>\n      ))}\n      <Text style={styles.label}>width: {text}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  box: {\n    height: 100,\n    width: 100,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginVertical: 64,\n    alignSelf: 'center',\n  },\n  title: {\n    fontSize: 42,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    marginRight: 8,\n  },\n  label: {\n    fontSize: 24,\n    marginVertical: 16,\n    color: '#b58df1',\n  },\n});\n",g={sidebar_position:2},j="runOnUI",y={},v=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"fn",id:"fn",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function b(e){const n={a:"a",admonition:"admonition",code:"code",del:"del",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components},{Details:t,InteractiveExample:r,PlatformCompatibility:a}=n;return t||O("Details",!0),r||O("InteractiveExample",!0),a||O("PlatformCompatibility",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"runonui",children:"runOnUI"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"runOnUI"})," lets you asynchronously run ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#to-workletize",children:"workletized"})," functions on the ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Most commonly used either with an ",(0,s.jsx)(n.code,{children:"useEffect"})," to start an animation on component mount/unmount or with ",(0,s.jsx)(n.a,{href:"/docs/advanced/measure",children:(0,s.jsx)(n.code,{children:"measure"})})," and ",(0,s.jsx)(n.a,{href:"/docs/scroll/scrollTo",children:(0,s.jsx)(n.code,{children:"scrollTo"})})," functions which have implementations only on the UI thread."]}),"\n",(0,s.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { runOnUI } from 'react-native-reanimated';\n\nfunction App() {\n  // E.g. in event handler or in an effect\n  // highlight-next-line\n  runOnUI((greeting) => {\n    console.log(`${greeting} from the UI thread`);\n    // highlight-next-line\n  })('Howdy');\n\n  // ...\n}\n"})}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Type definitions"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function runOnUI<A extends any[], R>(\n  fn: (...args: A) => R\n): (...args: Parameters<typeof fn>) => void;\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsx)(n.h4,{id:"fn",children:"fn"}),"\n",(0,s.jsxs)(n.p,{children:["A reference to a function you want to execute on the ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"})," from the ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#javascript-thread",children:"JavaScript thread"}),". Arguments to your function have to be passed to the function returned from ",(0,s.jsx)(n.code,{children:"runOnUI"})," i.e. ",(0,s.jsx)(n.code,{children:"runOnUI(myWorklet)(10);"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"runOnUI"})," returns a function that accepts arguments for the function passed as the first argument."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Don't forget to call the function returned from ",(0,s.jsx)(n.code,{children:"runOnUI"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n","\n",(0,s.jsx)(r,{src:p,component:f,label:"Tap each word"}),"\n",(0,s.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["When implementing your animations you should first reach for more general solutions such as ",(0,s.jsx)(n.a,{href:"/docs/core/useDerivedValue",children:(0,s.jsx)(n.code,{children:"useDerivedValue"})}),", ",(0,s.jsx)(n.a,{href:"/docs/advanced/useAnimatedReaction",children:(0,s.jsx)(n.code,{children:"useAnimatedReaction"})})," or running code in gesture callbacks and only use ",(0,s.jsx)(n.code,{children:"runOnUI"})," after you've tried other methods."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["It's a common mistake to execute function inside of runOnUI like this: ",(0,s.jsx)(n.del,{children:(0,s.jsx)(n.code,{children:"runOnUI(myWorklet(10))()"})}),". Here, the correct usage would be ",(0,s.jsx)(n.code,{children:"runOnUI(myWorklet)(10)"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The callback passed as the argument is automatically ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#to-workletize",children:"workletized"})," and ready to be run on the ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Make sure not to execute ",(0,s.jsx)(n.code,{children:"runOnUI"})," on the UI thread as this will result in an error."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,s.jsx)(a,{android:!0,ios:!0,web:!0})]})}function w(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(b,{...e})}):b(e)}function O(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},30620:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(39471);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);