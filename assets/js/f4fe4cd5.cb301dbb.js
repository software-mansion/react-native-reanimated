"use strict";(globalThis.webpackChunkdocs_reanimated=globalThis.webpackChunkdocs_reanimated||[]).push([[416],{30620:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(39471);const r={},s=a.createContext(r);function o(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}},46801:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"api/hooks/useEvent","title":"useEvent","description":"This is a low-level hook returning an event handler that will be invoked with native events, which should be used in order to create custom event handler hooks, like useAnimatedGestureHandler or useAnimatedScrollHandler.","source":"@site/versioned_docs/version-2.x/api/hooks/useEvent.md","sourceDirName":"api/hooks","slug":"/api/hooks/useEvent","permalink":"/react-native-reanimated/docs/2.x/api/hooks/useEvent","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/versioned_docs/version-2.x/api/hooks/useEvent.md","tags":[],"version":"2.x","frontMatter":{"id":"useEvent","title":"useEvent","sidebar_label":"useEvent"},"sidebar":"docs","previous":{"title":"useDerivedValue","permalink":"/react-native-reanimated/docs/2.x/api/hooks/useDerivedValue"},"next":{"title":"useFrameCallback","permalink":"/react-native-reanimated/docs/2.x/api/hooks/useFrameCallback"}}');var r=t(47671),s=t(30620);const o={id:"useEvent",title:"useEvent",sidebar_label:"useEvent"},i=void 0,l={},d=[{value:"Arguments",id:"arguments",level:3},{value:"<code>handler</code> [function]",id:"handler-function",level:4},{value:"<code>eventNames</code> [Array]",id:"eventnames-array",level:4},{value:"<code>rebuilt</code> [boolean]",id:"rebuilt-boolean",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This is a low-level hook returning an event handler that will be invoked with native events, which should be used in order to create custom event handler hooks, like ",(0,r.jsx)(n.code,{children:"useAnimatedGestureHandler"})," or ",(0,r.jsx)(n.code,{children:"useAnimatedScrollHandler"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(n.h4,{id:"handler-function",children:[(0,r.jsx)(n.code,{children:"handler"})," [function]"]}),"\n",(0,r.jsx)(n.p,{children:"Handler that will receive an event object with a native payload, which can be passed to the custom handler hook's worklets."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"event"})," [object] - event object.\nThe payload can differ depending on the type of the event."]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"eventnames-array",children:[(0,r.jsx)(n.code,{children:"eventNames"})," [Array]"]}),"\n",(0,r.jsx)(n.p,{children:"Array of event names that will be handled by handler."}),"\n",(0,r.jsxs)(n.h4,{id:"rebuilt-boolean",children:[(0,r.jsx)(n.code,{children:"rebuilt"})," [boolean]"]}),"\n",(0,r.jsx)(n.p,{children:"Value indicating whether the handler should be rebuilt."}),"\n",(0,r.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:"The hook returns an event handler that will be invoked when a native event is dispatched."}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function useAnimatedPagerScrollHandler(handlers, dependencies) {\n  const { context, doDependenciesDiffer } = useHandler(handlers, dependencies);\n\n  return useEvent(\n    (event) => {\n      'worklet';\n      const { onPageScroll } = handlers;\n\n      if (onPageScroll && event.eventName.endsWith('onPageScroll')) {\n        onPageScroll(event, context);\n      }\n    },\n    ['onPageScroll'],\n    doDependenciesDiffer,\n  );\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);