"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[7067],{10248:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"layout-animations/layout-animation-config","title":"LayoutAnimationConfig","description":"LayoutAnimationConfig is a component that lets you skip entering and exiting animations.","source":"@site/docs/layout-animations/layout-animation-config.mdx","sourceDirName":"layout-animations","slug":"/layout-animations/layout-animation-config","permalink":"/react-native-reanimated/docs/layout-animations/layout-animation-config","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/docs/layout-animations/layout-animation-config.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"LayoutAnimationConfig","sidebar_label":"Skipping Layout Animations"},"sidebar":"tutorialSidebar","previous":{"title":"Custom animations","permalink":"/react-native-reanimated/docs/layout-animations/custom-animations"},"next":{"title":"List Layout Animations","permalink":"/react-native-reanimated/docs/layout-animations/list-layout-animations"}}');var o=i(47671),a=i(30620),s=i(68430);const r={sidebar_position:5,title:"LayoutAnimationConfig",sidebar_label:"Skipping Layout Animations"},l=void 0,c={},d=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>skipEntering</code> <Optional></Optional>",id:"skipentering-",level:4},{value:"<code>skipExiting</code> <Optional></Optional>",id:"skipexiting-",level:4},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function u(n){const e={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...n.components},{CollapsibleCode:i,Details:t,Optional:r,PlatformCompatibility:l,Row:c,ThemedVideo:d}=e;return i||h("CollapsibleCode",!0),t||h("Details",!0),r||h("Optional",!0),l||h("PlatformCompatibility",!0),c||h("Row",!0),d||h("ThemedVideo",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"LayoutAnimationConfig"})," is a component that lets you skip entering and exiting animations."]}),"\n",(0,o.jsx)(e.h2,{id:"reference",children:"Reference"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { LayoutAnimationConfig } from 'react-native-reanimated';\n\nfunction App() {\n  const [show, setShow] = React.useState(true);\n\n  return (\n    // highlight-next-line\n    <LayoutAnimationConfig skipEntering>\n      <View>\n        {show && <Animated.View entering={PinwheelIn} exiting={PinwheelOut} />}\n      </View>\n      // highlight-next-line\n    </LayoutAnimationConfig>\n  );\n}\n"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Type definitions"}),(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"interface LayoutAnimationConfigProps {\n  skipEntering?: boolean;\n  skipExiting?: boolean;\n  children: ReactNode;\n}\n"})})]}),"\n",(0,o.jsx)(e.h3,{id:"arguments",children:"Arguments"}),"\n",(0,o.jsxs)(e.h4,{id:"skipentering-",children:[(0,o.jsx)(e.code,{children:"skipEntering"})," ",(0,o.jsx)(r,{})]}),"\n",(0,o.jsxs)(e.p,{children:["A boolean indicating whether children's entering animations should be skipped when ",(0,o.jsx)(e.code,{children:"LayoutAnimationConfig"})," is mounted."]}),"\n",(0,o.jsxs)(e.h4,{id:"skipexiting-",children:[(0,o.jsx)(e.code,{children:"skipExiting"})," ",(0,o.jsx)(r,{})]}),"\n",(0,o.jsxs)(e.p,{children:["A boolean indicating whether children's exiting animations should be skipped when ",(0,o.jsx)(e.code,{children:"LayoutAnimationConfig"})," is unmounted."]}),"\n",(0,o.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(c,{children:[(0,o.jsx)(d,{sources:{light:"/recordings/layout-animations/layoutconfig_light.mov",dark:"/recordings/layout-animations/layoutconfig_dark.mov"}}),(0,o.jsx)("div",{style:{flexGrow:1},children:(0,o.jsx)(i,{src:s.A,showLines:[29,46]})})]}),"\n",(0,o.jsx)(e.h2,{id:"remarks",children:"Remarks"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:["You can nest the ",(0,o.jsx)(e.code,{children:"LayoutAnimationConfig"})," component if you want to disable animations on a smaller subset of components."]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:["If you are working with a ",(0,o.jsx)(e.code,{children:"FlatList"})," and want to skip animations in items when the list is mounted and unmounted you can use ",(0,o.jsx)(e.code,{children:"skipEnteringExitingAnimations"}),". This prop automatically wraps your ",(0,o.jsx)(e.code,{children:"FlatList"})," with ",(0,o.jsx)(e.code,{children:"<LayoutAnimationConfig skipEntering skipExiting>"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,o.jsx)(l,{android:!0,ios:!0})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}function h(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},30620:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>r});var t=i(39471);const o={},a=t.createContext(o);function s(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),t.createElement(a.Provider,{value:e},n.children)}},68430:(n,e,i)=>{i.d(e,{A:()=>t});const t="import React from 'react';\nimport Animated, {\n  LayoutAnimationConfig,\n  PinwheelIn,\n  PinwheelOut,\n} from 'react-native-reanimated';\nimport { Button, StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  const [outer, setOuter] = React.useState<boolean>(true);\n  const [inner, setInner] = React.useState<boolean>(true);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.buttonColumn}>\n        <Button\n          onPress={() => {\n            setOuter(!outer);\n          }}\n          title={toggleString(outer) + ' outer'}\n        />\n        <Button\n          disabled={!outer}\n          onPress={() => {\n            setInner(!inner);\n          }}\n          title={toggleString(inner) + ' inner'}\n        />\n      </View>\n      <LayoutAnimationConfig skipEntering>\n        {outer && (\n          <Animated.View\n            entering={PinwheelIn}\n            exiting={PinwheelOut}\n            style={styles.outerBox}>\n            <LayoutAnimationConfig skipEntering skipExiting>\n              {inner && (\n                <Animated.View\n                  style={styles.box}\n                  entering={PinwheelIn}\n                  exiting={PinwheelOut}\n                />\n              )}\n            </LayoutAnimationConfig>\n          </Animated.View>\n        )}\n      </LayoutAnimationConfig>\n    </View>\n  );\n}\n\nfunction toggleString(value: boolean) {\n  return value ? 'Hide' : 'Show';\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    height: 220,\n  },\n  buttonColumn: {\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n    height: 90,\n  },\n  outerBox: {\n    width: 150,\n    height: 150,\n    backgroundColor: '#b58df1',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 20,\n    margin: 20,\n  },\n  box: {\n    width: 80,\n    height: 80,\n    backgroundColor: '#782aeb',\n  },\n});\n"}}]);