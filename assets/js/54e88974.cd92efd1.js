"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[39],{21238:(e,n,t)=>{t.d(n,{A:()=>i});const i="import React from 'react';\nimport Animated, {\n  useAnimatedKeyboard,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\nimport { StyleSheet, TextInput, View, useColorScheme } from 'react-native';\n\nexport default function App() {\n  const colorScheme = useColorScheme();\n  const keyboard = useAnimatedKeyboard();\n\n  const animatedStyles = useAnimatedStyle(() => ({\n    transform: [{ translateY: -keyboard.height.value }],\n  }));\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        animatedStyles,\n        { backgroundColor: colorScheme === 'light' ? '#fff' : '#000' },\n      ]}>\n      <View style={styles.box}>\n        <TextInput placeholder=\"Text Input\" />\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    borderWidth: 5,\n    borderColor: '#782aeb',\n    borderRadius: 2,\n  },\n  box: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 200,\n    backgroundColor: '#b58df1',\n    borderRadius: 5,\n    margin: 20,\n  },\n});\n"},23130:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"device/useAnimatedKeyboard","title":"useAnimatedKeyboard","description":"useAnimatedKeyboard lets you create animations based on state and height of the virtual keyboard.","source":"@site/docs/device/useAnimatedKeyboard.mdx","sourceDirName":"device","slug":"/device/useAnimatedKeyboard","permalink":"/react-native-reanimated/docs/device/useAnimatedKeyboard","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/device/useAnimatedKeyboard.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Device","permalink":"/react-native-reanimated/docs/category/device"},"next":{"title":"useAnimatedSensor","permalink":"/react-native-reanimated/docs/device/useAnimatedSensor"}}');var r=t(47671),s=t(30620),d=(t(69719),t(21238));const a={sidebar_position:1},o=void 0,l={},c=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>options</code> <Optional></Optional>",id:"options-",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components},{AvailableFrom:t,Details:i,InteractiveExample:a,Optional:o,PlatformCompatibility:l,ThemedVideo:c}=n;return t||m("AvailableFrom",!0),i||m("Details",!0),a||m("InteractiveExample",!0),o||m("Optional",!0),l||m("PlatformCompatibility",!0),c||m("ThemedVideo",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"useAnimatedKeyboard"})," lets you create animations based on state and height of the virtual keyboard."]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["Android implementation of ",(0,r.jsx)(n.code,{children:"useAnimatedKeyboard"})," has drawbacks on Android SDK < 30, for more details see ",(0,r.jsx)(n.a,{href:"/docs/device/useAnimatedKeyboard#remarks",children:"remarks"})," section."]})}),"\n",(0,r.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { useAnimatedKeyboard, useAnimatedStyle } from 'react-native-reanimated';\n\nexport default function App() {\n  const keyboard = useAnimatedKeyboard();\n\n  const animatedStyles = useAnimatedStyle(() => ({\n    transform: [{ translateY: -keyboard.height.value }],\n  }));\n}\n"})}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Type definitions"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// --- Function declaration ---\n\nfunction useAnimatedKeyboard(\n  options: AnimatedKeyboardOptions\n): AnimatedKeyboardInfo;\n\n// --- Configuration types ---\n\nexport interface AnimatedKeyboardOptions {\n  isStatusBarTranslucentAndroid?: boolean;\n}\n\n// --- Return types ---\n\nexport type AnimatedKeyboardInfo = {\n  height: SharedValue<number>;\n  state: SharedValue<KeyboardState>;\n};\n\nexport enum KeyboardState {\n  UNKNOWN = 0,\n  OPENING = 1,\n  OPEN = 2,\n  CLOSING = 3,\n  CLOSED = 4,\n}\n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(n.h4,{id:"options-",children:[(0,r.jsx)(n.code,{children:"options"})," ",(0,r.jsx)(o,{})]}),"\n",(0,r.jsx)(n.p,{children:"Optional object containing additional configuration:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isStatusBarTranslucentAndroid"})," - removes top inset on Android i.e. to use translucent status bar on Android, set this option to ",(0,r.jsx)(n.code,{children:"true"}),". Defaults to ",(0,r.jsx)(n.code,{children:"false"}),". Ignored on iOS."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:["Hook ",(0,r.jsx)(n.code,{children:"useAnimatedKeyboard"})," returns an object containing these fields:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"height"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SharedValue<number>"})}),(0,r.jsxs)(n.td,{children:["A ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/glossary#shared-value",children:"shared value"})," containing current height of the keyboard."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"state"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SharedValue<KeyboardState>"})}),(0,r.jsxs)(n.td,{children:["A ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/glossary#shared-value",children:"shared value"})," containing current state of the keyboard. Possible states: ",(0,r.jsx)(n.code,{children:"{ CLOSED, OPEN, CLOSING, OPENING }"})]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n","\n",(0,r.jsx)(a,{src:d.A,component:()=>(0,r.jsx)(c,{center:!0,width:300,sources:{light:"/recordings/useAnimatedKeyboard_light.mov",dark:"/recordings/useAnimatedKeyboard_dark.mov"}})}),"\n",(0,r.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["On Android, make sure to set ",(0,r.jsx)(n.code,{children:"android:windowSoftInputMode"})," in your ",(0,r.jsx)(n.code,{children:"AndroidManifest.xml"})," to ",(0,r.jsx)(n.code,{children:"adjustResize"}),". Then, using the ",(0,r.jsx)(n.code,{children:"useAnimatedKeyboard"})," hook disables\nthe default Android behavior (resizing the view to accommodate keyboard) in the whole app. Using values from ",(0,r.jsx)(n.code,{children:"useAnimatedKeyboard"})," hook you can handle the keyboard yourself. Unmounting all components that use ",(0,r.jsx)(n.code,{children:"useAnimatedKeyboard"})," hook brings back the default Android behavior."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["On Android, using the ",(0,r.jsx)(n.code,{children:"useAnimatedKeyboard"})," hook expands root view to full screen (",(0,r.jsx)(n.a,{href:"https://developer.android.com/develop/ui/views/layout/immersive",children:"immersive mode"}),") and takes control over insets management."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"isStatusBarTranslucentAndroid"})," is ",(0,r.jsx)(n.code,{children:"false"})," it applies the top margin according to the insets."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"isStatusBarTranslucentAndroid"})," is ",(0,r.jsx)(n.code,{children:"true"})," it sets top margin to ",(0,r.jsx)(n.code,{children:"0"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"isNavigationBarTranslucentAndroid"})," is ",(0,r.jsx)(n.code,{children:"false"})," it applies the bottom margin according to the insets."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"isNavigationBarTranslucentAndroid"})," is ",(0,r.jsx)(n.code,{children:"true"})," it sets bottom margin to ",(0,r.jsx)(n.code,{children:"0"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["On Android, when using navigation with native header, ",(0,r.jsx)(n.code,{children:"isStatusBarTranslucentAndroid"})," doesn't affect the top inset."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"On Android SDK < 30, when status bar is hidden, the keyboard reverts to the default Android behavior."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(t,{version:"3.17.0"})," On iPad, when the keyboard is floating, the\nhook will always return height: ",(0,r.jsx)("code",{children:"0"}),"\nand state: ",(0,r.jsx)("code",{children:"CLOSED"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,r.jsx)(l,{android:!0,ios:!0})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},30620:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>a});var i=t(39471);const r={},s=i.createContext(r);function d(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);