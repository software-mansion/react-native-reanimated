"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[4091],{30620:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var r=i(39471);const o={},t=r.createContext(o);function a(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(t.Provider,{value:n},e.children)}},36369:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"debugging/logger-configuration","title":"Logger configuration","description":"Reanimated shows warnings that indicate misuses of the library API, such as modifying the shared value during component re-render. These logs can be configured to be more or less verbose.","source":"@site/docs/debugging/logger-configuration.mdx","sourceDirName":"debugging","slug":"/debugging/logger-configuration","permalink":"/react-native-reanimated/docs/debugging/logger-configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/docs/debugging/logger-configuration.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"logger-configuration","sidebar_label":"Logger configuration","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Accurate Call Stacks","permalink":"/react-native-reanimated/docs/debugging/accurate-call-stacks"},"next":{"title":"Guides","permalink":"/react-native-reanimated/docs/category/guides"}}');var o=i(47671),t=i(30620);const a={id:"logger-configuration",sidebar_label:"Logger configuration",sidebar_position:2},s="Logger configuration",l={},d=[{value:"Reference",id:"reference",level:2},{value:"Configuration options",id:"configuration-options",level:3},{value:"<code>level</code>",id:"level",level:4},{value:"<code>strict</code>",id:"strict",level:4},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:i,PlatformCompatibility:r}=n;return i||u("Details",!0),r||u("PlatformCompatibility",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"logger-configuration",children:"Logger configuration"})}),"\n",(0,o.jsxs)(n.p,{children:["Reanimated shows warnings that indicate misuses of the library API, such as modifying the ",(0,o.jsx)(n.a,{href:"/docs/fundamentals/glossary#shared-value",children:"shared value"})," during component re-render. These logs can be configured to be more or less verbose."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"default"})," logger configuration doesn't require any user setup and displays ",(0,o.jsx)(n.strong,{children:"all warnings and errors"}),". If you want to change this behavior, use the ",(0,o.jsx)(n.code,{children:"configureReanimatedLogger"})," function."]}),"\n",(0,o.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,o.jsxs)(n.p,{children:["To modify the default Reanimated logger configuration, import ",(0,o.jsx)(n.code,{children:"configureReanimatedLogger"})," from ",(0,o.jsx)(n.code,{children:"react-native-reanimated"})," and call it with the desired configuration."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import {\n  configureReanimatedLogger,\n  ReanimatedLogLevel,\n} from 'react-native-reanimated';\n\n// This is the default configuration\nconfigureReanimatedLogger({\n  level: ReanimatedLogLevel.warn,\n  strict: true, // Reanimated runs in strict mode by default\n});\n"})}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"Type definitions"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"function configureReanimatedLogger(config: LoggerConfig): void;\n\ntype LoggerConfig = {\n  level?: ReanimatedLogLevel;\n  strict?: boolean;\n};\n\nenum ReanimatedLogLevel {\n  warn = 1,\n  error = 2,\n}\n"})})]}),"\n",(0,o.jsx)(n.h3,{id:"configuration-options",children:"Configuration options"}),"\n",(0,o.jsx)(n.h4,{id:"level",children:(0,o.jsx)(n.code,{children:"level"})}),"\n",(0,o.jsxs)(n.p,{children:["A value of the ",(0,o.jsx)(n.code,{children:"ReanimatedLogLevel"})," enum that defines the ",(0,o.jsx)(n.strong,{children:"minimum level"})," of the logs that will be shown."]}),"\n",(0,o.jsx)(n.h4,{id:"strict",children:(0,o.jsx)(n.code,{children:"strict"})}),"\n",(0,o.jsxs)(n.p,{children:["A boolean value that enables or disables ",(0,o.jsx)(n.strong,{children:"strict"})," mode. When ",(0,o.jsx)(n.strong,{children:"strict"})," mode is enabled, Reanimated will show more warnings that can help you to catch potential issues in your code."]}),"\n",(0,o.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"The logger configuration is global and affects all warnings and errors displayed by Reanimated. There's no option to configure the logger per file/component."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"configureReanimatedLogger"})," function should be called before any Reanimated animations are created, e.g. in the root file of your app."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"configureReanimatedLogger"})," function is intended for application developers. If you are creating a library that relies on Reanimated, don't include this function call in your library source code - users will inherit the configuration which will override the default configuration in the Reanimated library."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,o.jsx)(r,{android:!0,ios:!0,web:!0})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);