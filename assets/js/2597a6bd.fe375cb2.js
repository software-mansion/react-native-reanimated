"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[7895],{30620:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>r});var t=a(39471);const l={},s=t.createContext(l);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},82945:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"api/hooks/useFrameCallback","title":"useFrameCallback","description":"useFrameCallback is available since v2.10.0","source":"@site/versioned_docs/version-2.x/api/hooks/useFrameCallback.md","sourceDirName":"api/hooks","slug":"/api/hooks/useFrameCallback","permalink":"/react-native-reanimated/docs/2.x/api/hooks/useFrameCallback","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/versioned_docs/version-2.x/api/hooks/useFrameCallback.md","tags":[],"version":"2.x","frontMatter":{"id":"useFrameCallback","title":"useFrameCallback","sidebar_label":"useFrameCallback"},"sidebar":"docs","previous":{"title":"useEvent","permalink":"/react-native-reanimated/docs/2.x/api/hooks/useEvent"},"next":{"title":"useHandler","permalink":"/react-native-reanimated/docs/2.x/api/hooks/useHandler"}}');var l=a(47671),s=a(30620);const i={id:"useFrameCallback",title:"useFrameCallback",sidebar_label:"useFrameCallback"},r=void 0,c={},o=[{value:"Arguments",id:"arguments",level:3},{value:"<code>callback</code> [Function]",id:"callback-function",level:4},{value:"<code>autostart</code> [boolean]",id:"autostart-boolean",level:4},{value:"Returns",id:"returns",level:3},{value:"Types",id:"types",level:3},{value:"<code>FrameCallback: [object]</code>",id:"framecallback-object",level:4},{value:"<code>FrameInfo: [object]</code>",id:"frameinfo-object",level:4},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsx)(n.p,{children:"useFrameCallback is available since v2.10.0"})}),"\n",(0,l.jsx)(n.p,{children:"This hook allows you to run a piece of code on every frame update."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"useFrameCallback(callback: (frameInfo: FrameInfo) => void, autostart = true): [FrameCallback]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,l.jsxs)(n.h4,{id:"callback-function",children:[(0,l.jsx)(n.code,{children:"callback"})," [Function]"]}),"\n",(0,l.jsxs)(n.p,{children:["A single worklet function that will be called on every frame update.\nThis function receives a ",(0,l.jsx)(n.a,{href:"#frameinfo-object",children:(0,l.jsx)(n.code,{children:"FrameInfo"})})," object as an argument."]}),"\n",(0,l.jsxs)(n.h4,{id:"autostart-boolean",children:[(0,l.jsx)(n.code,{children:"autostart"})," [boolean]"]}),"\n",(0,l.jsxs)(n.p,{children:["Optional boolean that specifies if the callback should start running when\nregistration is complete. This argument defaults to ",(0,l.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:["An object of type ",(0,l.jsx)(n.a,{href:"#framecallback-object",children:(0,l.jsx)(n.code,{children:"FrameCallback"})})," which allows you to read and control the\ncallback state."]}),"\n",(0,l.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,l.jsx)(n.h4,{id:"framecallback-object",children:(0,l.jsx)(n.code,{children:"FrameCallback: [object]"})}),"\n",(0,l.jsx)(n.p,{children:"Properties:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"setActive: (isActive: boolean) => void"}),": begins / stops listening for frame updates"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"isActive: boolean"}),": indicates whether the callback is active (",(0,l.jsx)(n.code,{children:"true"}),")\nor not (",(0,l.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"callbackId: number"}),": a unique identifier of the callback function"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"frameinfo-object",children:(0,l.jsx)(n.code,{children:"FrameInfo: [object]"})}),"\n",(0,l.jsx)(n.p,{children:"Properties:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"timestamp: number"}),": the system time (in milliseconds) when the last\nframe was rendered"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"timeSincePreviousFrame: number | null"}),": time (in milliseconds) since last frame. This value\nwill be ",(0,l.jsx)(n.code,{children:"null"})," on the first frame after activation. Starting from the second frame,\nit should be ~16 ms on 60 Hz or ~8 ms on 120 Hz displays (when there is no lag)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"timeSinceFirstFrame: number"}),": time (in milliseconds) since the callback was last activated"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",metastring:"{13-21}",children:"import Animated, {\n  useAnimatedStyle,\n  useFrameCallback,\n  useSharedValue,\n} from 'react-native-reanimated';\nimport { Button, StyleSheet, View } from 'react-native';\n\nimport React from 'react';\n\nexport default function FrameCallbackExample() {\n  const x = useSharedValue(0);\n\n  const frameCallback = useFrameCallback((frameInfo) => {\n    if (frameInfo.timeSincePreviousFrame === null) {\n      console.log('First frame!');\n    } else {\n      console.log(\n        `${frameInfo.timeSincePreviousFrame} ms have passed since the previous frame`\n      );\n    }\n    // Move the box by one pixel on every frame\n    x.value += 1;\n  }, false);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX: x.value,\n        },\n      ],\n    };\n  });\n\n  return (\n    <View>\n      <Animated.View style={[styles.box, animatedStyle]} />\n      <Button\n        title=\"Start/stop\"\n        onPress={() => frameCallback.setActive(!frameCallback.isActive)}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    width: 100,\n    height: 100,\n    backgroundColor: 'red',\n  },\n});\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);