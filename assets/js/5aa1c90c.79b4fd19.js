"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[5456],{30620:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var a=n(39471);const s={},i=a.createContext(s);function o(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(i.Provider,{value:t},e.children)}},94499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"event","title":"Event handling with reanimated nodes","description":"react-native-reanimated\'s new syntax is possible to be used with Animated.event. Instead of providing only a mapping from event fields to animated nodes, it is allowed to write a function that takes reanimated values map as an input and return a block (or any other reanimated function) that will be then used to handle the event.","source":"@site/versioned_docs/version-1.x/event.md","sourceDirName":".","slug":"/event","permalink":"/react-native-reanimated/docs/1.x/event","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/versioned_docs/version-1.x/event.md","tags":[],"version":"1.x","frontMatter":{"id":"event","title":"Event handling with reanimated nodes","sidebar_label":"Event handling"},"sidebar":"docs","previous":{"title":"set","permalink":"/react-native-reanimated/docs/1.x/nodes/set"},"next":{"title":"View, Props, etc","permalink":"/react-native-reanimated/docs/1.x/view"}}');var s=n(47671),i=n(30620);const o={id:"event",title:"Event handling with reanimated nodes",sidebar_label:"Event handling"},r=void 0,d={},l=[];function c(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"react-native-reanimated"}),"'s new syntax is possible to be used with ",(0,s.jsx)(t.code,{children:"Animated.event"}),". Instead of providing only a mapping from event fields to animated nodes, it is allowed to write a function that takes reanimated values map as an input and return a block (or any other reanimated function) that will be then used to handle the event."]}),"\n",(0,s.jsxs)(t.p,{children:["This syntax allows for providing some post-processing for the event data that does not fit well as a dependency of other nodes we connect to ",(0,s.jsx)(t.code,{children:"Animated.View"})," component props. ",(0,s.jsx)(t.a,{href:"https://github.com/software-mansion/react-native-reanimated/blob/Reanimated2/Example/reanimated1/PanRotateAndZoom/index.js#L25",children:"See example"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import { event, set } from 'react-native-reanimated';\n\nthis.onGestureEvent = event([\n  {\n    nativeEvent: {\n      translationX: (x) => set(this._x, x),\n    },\n  },\n]);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If you'd like to use more than one event attribute in your reanimated code, this is also supported. Instead of defining event handler methods for a single attribute you can define at the level of ",(0,s.jsx)(t.code,{children:"nativeEvent"}),". Here is an example that takes both translation attributes and state attribute from ",(0,s.jsx)(t.code,{children:"PanGestureHandler"})," event:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"<PanGestureHandler\n  onGestureEvent={event([\n    {\n      nativeEvent: ({ translationX: x, translationY: y, state }) =>\n        block([\n          set(this._transX, add(x, offsetX)),\n          set(this._transY, add(y, offsetY)),\n          cond(eq(state, State.END), [\n            set(this.offsetX, add(this.offsetX, x)),\n            set(this.offsetY, add(this.offsetY, y)),\n          ]),\n        ]),\n    },\n  ])}>\n  <Animated.View\n    style={{\n      transform: [{ translateX: this._transX, translateY: this._transY }],\n    }}\n  />\n</PanGestureHandler>\n"})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);