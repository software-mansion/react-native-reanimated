"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[5790],{10101:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>d,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"fundamentals/your-first-animation","title":"Your First Animation","description":"In this section, we\'ll guide you through the basic concepts of Reanimated. If you\'re new to Reanimated, you\'re in the right hands! We\'re going to start by building a simple animation which will help you develop a basic understanding of the library. Then, in the following sections, we\'re going to build on top of this knowledge and further expand your skills. Let\'s go!","source":"@site/docs/fundamentals/your-first-animation.mdx","sourceDirName":"fundamentals","slug":"/fundamentals/your-first-animation","permalink":"/react-native-reanimated/docs/fundamentals/your-first-animation","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/fundamentals/your-first-animation.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/react-native-reanimated/docs/fundamentals/getting-started"},"next":{"title":"Animating styles and props","permalink":"/react-native-reanimated/docs/fundamentals/animating-styles-and-props"}}');var a=t(47671),s=t(30620),r=t(16405),o=t(66482);const d={sidebar_position:2},l="Your First Animation",c={},h=[{value:"Using an Animated component",id:"using-an-animated-component",level:2},{value:"Defining a shared value",id:"defining-a-shared-value",level:2},{value:"Using a shared value",id:"using-a-shared-value",level:2},{value:"Using an animation function",id:"using-an-animation-function",level:2},{value:"Summary",id:"summary",level:2},{value:"What&#39;s next?",id:"whats-next",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",del:"del",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{InteractiveExample:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("InteractiveExample",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"your-first-animation",children:"Your First Animation"})}),"\n",(0,a.jsx)(n.p,{children:"In this section, we'll guide you through the basic concepts of Reanimated. If you're new to Reanimated, you're in the right hands! We're going to start by building a simple animation which will help you develop a basic understanding of the library. Then, in the following sections, we're going to build on top of this knowledge and further expand your skills. Let's go!"}),"\n",(0,a.jsx)(n.h2,{id:"using-an-animated-component",children:"Using an Animated component"}),"\n",(0,a.jsxs)(n.p,{children:["Let's start by having something that we could see on the screen. First, to create an animatable component you need to import an ",(0,a.jsx)(n.code,{children:"Animated"})," object:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import Animated from 'react-native-reanimated';\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This ",(0,a.jsx)(n.code,{children:"Animated"})," object wraps React Native built-ins such as ",(0,a.jsx)(n.code,{children:"View"}),", ",(0,a.jsx)(n.code,{children:"ScrollView"})," or ",(0,a.jsx)(n.code,{children:"FlatList"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"You use these components as any other JSX components:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"{5}",children:"import Animated from 'react-native-reanimated';\n\nexport default function App() {\n  return (\n    <Animated.View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: 'violet',\n      }}\n    />\n  );\n}\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["You can create your own custom Animated components with ",(0,a.jsx)(n.a,{href:"/docs/core/createAnimatedComponent",children:(0,a.jsx)(n.code,{children:"createAnimatedComponent"})}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"defining-a-shared-value",children:"Defining a shared value"}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.a,{href:"/docs/fundamentals/glossary#shared-value",children:"shared value"})," is a driving factor of all your animations. You can think of it as a React state which is automagically kept in sync between the \u201cJavaScript\u201d and the \u201cnative\u201d side of your app (hence the name). You create shared values using a ",(0,a.jsx)(n.code,{children:"useSharedValue"})," hook:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { useSharedValue } from 'react-native-reanimated';\n"})}),"\n",(0,a.jsxs)(n.p,{children:["As with any other ",(0,a.jsx)(n.a,{href:"https://reactjs.org/docs/hooks-rules.html",children:"React hook"}),", you need to define it in your component's body. In a shared value, you can store any JS value like ",(0,a.jsx)(n.code,{children:"number"}),", ",(0,a.jsx)(n.code,{children:"string"})," or ",(0,a.jsx)(n.code,{children:"boolean"})," but also data structures such as ",(0,a.jsx)(n.code,{children:"array"})," and ",(0,a.jsx)(n.code,{children:"object"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["For now, let's use ",(0,a.jsx)(n.code,{children:"100"})," as the default value of the ",(0,a.jsx)(n.code,{children:"useSharedValue"})," hook and pass the returned value as an inline style of the ",(0,a.jsx)(n.code,{children:"Animated.View"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"{4,9}",children:"import Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  return (\n    <Animated.View\n      style={{\n        width,\n        height: 100,\n        backgroundColor: 'violet',\n      }}\n    />\n  );\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"using-a-shared-value",children:"Using a shared value"}),"\n",(0,a.jsxs)(n.p,{children:["Let's create a very simple animation that will animate a ",(0,a.jsx)(n.code,{children:"width"})," of an element. We'll make it expand by ",(0,a.jsx)(n.code,{children:"50px"})," on each button press. We can do this by modifying a shared value connected to the ",(0,a.jsx)(n.code,{children:"width"})," property of an ",(0,a.jsx)(n.code,{children:"Animated.View"})," component. I know it might sound complicated, but it's actually quite simple."]}),"\n",(0,a.jsxs)(n.p,{children:["Values stored in shared values are accessed and modified by their ",(0,a.jsx)(n.code,{children:".value"})," property."]}),"\n",(0,a.jsxs)(n.p,{children:["There's no setter or anything - you simply mutate the ",(0,a.jsx)(n.code,{children:".value"})," property like there's no tomorrow."]}),"\n",(0,a.jsxs)(n.p,{children:["Let's define a ",(0,a.jsx)(n.code,{children:"handlePress"})," function inside of which we'll modify the shared value:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"{8,20}",children:"import { Button, View } from 'react-native';\nimport Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  const handlePress = () => {\n    width.value = width.value + 50;\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Animated.View\n        style={{\n          width,\n          height: 100,\n          backgroundColor: 'violet',\n        }}\n      />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Please hold on a second before you shorten ",(0,a.jsx)(n.code,{children:"width.value = width.value + 50"})," to ",(0,a.jsx)(n.code,{children:"width.value += 50"}),". We're preparing this code for the final step which will finally bring our animation to life!"]}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsxs)(n.p,{children:["It's a common mistake to modify a shared value directly like this: ",(0,a.jsx)(n.del,{children:(0,a.jsx)(n.code,{children:"sv = sv + 100;"})}),". Always remember to access the shared value by using the ",(0,a.jsx)(n.code,{children:".value"})," property instead. Here, the correct usage would be ",(0,a.jsx)(n.code,{children:"sv.value = sv.value + 100;"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"using-an-animation-function",children:"Using an animation function"}),"\n",(0,a.jsxs)(n.p,{children:["Finally, import ",(0,a.jsx)(n.code,{children:"withSpring"})," function and wrap around ",(0,a.jsx)(n.code,{children:"width.value + 50"})," in the ",(0,a.jsx)(n.code,{children:"handlePress"})," function so that the value which ",(0,a.jsx)(n.code,{children:"withSpring"})," returns modifies the shared value. This will create a bouncy spring animation that transitions the width of the element from its current value (here ",(0,a.jsx)(n.code,{children:"width.value"}),") to the new one (here ",(0,a.jsx)(n.code,{children:"width.value + 50"}),")."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"{2,8}",children:"import { Button, View } from 'react-native';\nimport Animated, { useSharedValue, withSpring } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  const handlePress = () => {\n    width.value = withSpring(width.value + 50);\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Animated.View\n        style={{\n          width,\n          height: 100,\n          backgroundColor: 'violet',\n        }}\n      />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"And voil\xe0, we've made our first animation using Reanimated! You can see how it works in its full glory in a preview below:"}),"\n","\n",(0,a.jsx)(t,{src:o.A,component:r.A}),"\n",(0,a.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsxs)(n.p,{children:["In this section, we gained a firm grasp on the Reanimated fundamentals. We learned about ",(0,a.jsx)(n.code,{children:"Animated"})," components, shared values and how to use them to create a simple animation. To sum up:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Animated"})," components are used to define animatable elements."]}),"\n",(0,a.jsxs)(n.li,{children:["Shared values are a driving factor of all animations and we define them using a ",(0,a.jsx)(n.code,{children:"useSharedValue"})," hook."]}),"\n",(0,a.jsxs)(n.li,{children:["Shared values are always accessed and modified by their ",(0,a.jsx)(n.code,{children:".value"})," property (eg. ",(0,a.jsx)(n.code,{children:"sv.value = 100;"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:["To create smooth animations modify shared values using animation functions like ",(0,a.jsx)(n.code,{children:"withTiming"})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"whats-next",children:"What's next?"}),"\n",(0,a.jsxs)(n.p,{children:["In ",(0,a.jsx)(n.a,{href:"/docs/fundamentals/animating-styles-and-props",children:"the next section"}),", we will learn more about how to animate styles and props using ",(0,a.jsx)(n.code,{children:"useAnimatedStyle"})," and ",(0,a.jsx)(n.code,{children:"useAnimatedProps"})," hooks."]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},16405:(e,n,t)=>{t.d(n,{A:()=>d});var i=t(14442),a=t(90424),s=t(8589),r=t(19727),o=t(47671);function d(){const e=(0,r.useSharedValue)(100);return(0,o.jsxs)(s.A,{style:l.container,children:[(0,o.jsx)(r.default.View,{style:{...l.box,width:e}}),(0,o.jsx)(a.A,{onPress:()=>{e.value=(0,r.withSpring)(e.value+50)},title:"Click me"})]})}const l=i.A.create({container:{flex:1,alignItems:"center"},box:{height:100,backgroundColor:"#b58df1",borderRadius:20,marginVertical:64}})},66482:(e,n,t)=>{t.d(n,{A:()=>i});const i="import React from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport Animated, { useSharedValue, withSpring } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue<number>(100);\n\n  const handlePress = () => {\n    width.value = withSpring(width.value + 50);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={{ ...styles.box, width }} />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  box: {\n    height: 100,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginVertical: 64,\n  },\n});\n"},90424:(e,n,t)=>{t.d(n,{A:()=>l});var i=t(39471),a=t(14442),s=t(21844),r=t(31071),o=i.forwardRef((e,n)=>{var t=e.accessibilityLabel,a=e.color,o=e.disabled,l=e.onPress,c=e.testID,h=e.title;return i.createElement(s.A,{accessibilityLabel:t,accessibilityRole:"button",disabled:o,focusable:!o,onPress:l,ref:n,style:[d.button,a&&{backgroundColor:a},o&&d.buttonDisabled],testID:c},i.createElement(r.A,{style:[d.text,o&&d.textDisabled]},h))});o.displayName="Button";var d=a.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const l=o}}]);