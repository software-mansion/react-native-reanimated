"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[3371],{30620:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(39471);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},67353:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api/miscellaneous/runOnUI","title":"runOnUI","description":"Enables executing worklet functions on the UI thread. Note that UI execution is asynchronous from the caller\u2019s perspective. When you pass arguments, they will be copied to the UI context.","source":"@site/versioned_docs/version-2.x/api/miscellaneous/runOnUI.md","sourceDirName":"api/miscellaneous","slug":"/api/miscellaneous/runOnUI","permalink":"/react-native-reanimated/docs/2.x/api/miscellaneous/runOnUI","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-2.x/api/miscellaneous/runOnUI.md","tags":[],"version":"2.x","frontMatter":{"id":"runOnUI","title":"runOnUI","sidebar_label":"runOnUI"},"sidebar":"docs","previous":{"title":"runOnJS","permalink":"/react-native-reanimated/docs/2.x/api/miscellaneous/runOnJS"},"next":{"title":"interpolateColor","permalink":"/react-native-reanimated/docs/2.x/api/miscellaneous/interpolateColors"}}');var o=t(47671),s=t(30620);const i={id:"runOnUI",title:"runOnUI",sidebar_label:"runOnUI"},a=void 0,c={},l=[{value:"Arguments",id:"arguments",level:3},{value:"<code>fn</code> [function]",id:"fn-function",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2}];function u(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Enables executing worklet functions on the UI thread. Note that UI execution is asynchronous from the caller\u2019s perspective. When you pass arguments, they will be copied to the UI context."}),"\n",(0,o.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,o.jsxs)(n.h4,{id:"fn-function",children:[(0,o.jsx)(n.code,{children:"fn"})," [function]"]}),"\n",(0,o.jsx)(n.p,{children:"The first and only argument is a worklet function that is supposed to be run."}),"\n",(0,o.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"runOnUI"})," returns a function which will be executed on UI thread."]}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:"{12}",children:"import { runOnUI } from 'react-native-reanimated';\nimport { View, Button } from 'react-native';\nimport React from 'react';\n\nexport default function App() {\n  const someWorklet = (greeting) => {\n    'worklet';\n    console.log(greeting, 'From the UI thread');\n  };\n\n  const onPress = () => {\n    runOnUI(someWorklet)('Howdy');\n  };\n\n  return (\n    <View>\n      <Button title=\"toggle\" onPress={onPress} />\n    </View>\n  );\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);