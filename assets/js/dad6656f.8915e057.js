"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[2583],{30620:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(39471);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},45348:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"api/nativeMethods/scrollTo","title":"scrollTo","description":"Provides synchronous scroll on the UI thread to a given offset using an animated ref to a scroll view. This allows performing smooth scrolling without lags (which might have otherwise occurred when it was asynchronous and based on lots of events).","source":"@site/versioned_docs/version-2.x/api/nativeMethods/scrollTo.md","sourceDirName":"api/nativeMethods","slug":"/api/nativeMethods/scrollTo","permalink":"/react-native-reanimated/docs/2.x/api/nativeMethods/scrollTo","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-2.x/api/nativeMethods/scrollTo.md","tags":[],"version":"2.x","frontMatter":{"id":"scrollTo","title":"scrollTo","sidebar_label":"scrollTo"},"sidebar":"docs","previous":{"title":"measure","permalink":"/react-native-reanimated/docs/2.x/api/nativeMethods/measure"},"next":{"title":"getRelativeCoords","permalink":"/react-native-reanimated/docs/2.x/api/miscellaneous/getRelativeCoords"}}');var r=t(47671),s=t(30620);const a={id:"scrollTo",title:"scrollTo",sidebar_label:"scrollTo"},i=void 0,l={},c=[{value:"Arguments",id:"arguments",level:3},{value:"<code>animatedRef</code>",id:"animatedref",level:4},{value:"<code>x</code> [Float]",id:"x-float",level:4},{value:"<code>y</code> [Float]",id:"y-float",level:4},{value:"<code>animated</code> [Boolean]",id:"animated-boolean",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Provides synchronous scroll on the UI thread to a given offset using an animated ref to a scroll view. This allows performing smooth scrolling without lags (which might have otherwise occurred when it was asynchronous and based on lots of events)."}),"\n",(0,r.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsx)(n.h4,{id:"animatedref",children:(0,r.jsx)(n.code,{children:"animatedRef"})}),"\n",(0,r.jsxs)(n.p,{children:["The product of ",(0,r.jsx)(n.a,{href:"/docs/2.x/api/hooks/useAnimatedRef",children:(0,r.jsx)(n.code,{children:"useAnimatedRef"})})," which is Reanimated's extension of a standard React ref (delivers the view tag on the UI thread)."]}),"\n",(0,r.jsxs)(n.h4,{id:"x-float",children:[(0,r.jsx)(n.code,{children:"x"})," [Float]"]}),"\n",(0,r.jsx)(n.p,{children:"Corresponds to the pixel along the horizontal axis of the element that you want displayed in the upper left."}),"\n",(0,r.jsxs)(n.h4,{id:"y-float",children:[(0,r.jsx)(n.code,{children:"y"})," [Float]"]}),"\n",(0,r.jsx)(n.p,{children:"Corresponds to the pixel along the vertical axis of the element that you want displayed in the upper left."}),"\n",(0,r.jsxs)(n.h4,{id:"animated-boolean",children:[(0,r.jsx)(n.code,{children:"animated"})," [Boolean]"]}),"\n",(0,r.jsxs)(n.p,{children:["Indicates whether the scroll should be smooth (",(0,r.jsx)(n.code,{children:"true"}),") or instant (",(0,r.jsx)(n.code,{children:"false"}),")."]}),"\n",(0,r.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"void"})}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import React from 'react';\nimport { TouchableOpacity, View, Text, ScrollView } from 'react-native';\nimport {\n  useAnimatedRef,\n  useDerivedValue,\n  useSharedValue,\n  scrollTo,\n} from 'react-native-reanimated';\n\nconst ITEM_COUNT = 10;\nconst ITEM_SIZE = 100;\nconst ITEM_MARGIN = 10;\n\nexport const Comp = () => {\n  const aref = useAnimatedRef();\n  const scroll = useSharedValue(0);\n\n  useDerivedValue(() => {\n    scrollTo(aref, 0, scroll.value * (ITEM_SIZE + 2 * ITEM_MARGIN), true);\n  });\n\n  const items = Array.from(Array(ITEM_COUNT).keys());\n\n  const Incrementor = ({ increment }) => (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <TouchableOpacity\n        onPress={() => {\n          scroll.value =\n            scroll.value + increment > 0\n              ? scroll.value + increment\n              : ITEM_COUNT - 1 + increment;\n\n          if (scroll.value >= ITEM_COUNT - 2) scroll.value = 0;\n        }}>\n        <Text>{`Scroll ${Math.abs(increment)} ${\n          increment > 0 ? 'down' : 'up'\n        }`}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n\n  return (\n    <View style={{ flex: 1, flexDirection: 'column' }}>\n      <Incrementor increment={1} />\n      <View\n        style={{ width: '100%', height: (ITEM_SIZE + 2 * ITEM_MARGIN) * 2 }}>\n        <ScrollView ref={aref} style={{ backgroundColor: 'orange' }}>\n          {items.map((_, i) => (\n            <View\n              key={i}\n              style={{\n                backgroundColor: 'white',\n                aspectRatio: 1,\n                width: ITEM_SIZE,\n                margin: ITEM_MARGIN,\n                justifyContent: 'center',\n                alignContent: 'center',\n              }}>\n              <Text style={{ textAlign: 'center' }}>{i}</Text>\n            </View>\n          ))}\n        </ScrollView>\n      </View>\n\n      <Incrementor increment={-1} />\n    </View>\n  );\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);