"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[5152],{14105:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>A,contentTitle:()=>j,default:()=>R,frontMatter:()=>y,metadata:()=>l,toc:()=>w});const l=JSON.parse('{"id":"scroll/useScrollOffset","title":"useScrollOffset","description":"useScrollOffset lets you to create animations based on the offset of a scrollable component (e.g. ScrollView, FlatList, FlashList).","source":"@site/docs/scroll/useScrollOffset.mdx","sourceDirName":"scroll","slug":"/scroll/useScrollOffset","permalink":"/react-native-reanimated/docs/scroll/useScrollOffset","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/scroll/useScrollOffset.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"scrollTo","permalink":"/react-native-reanimated/docs/scroll/scrollTo"},"next":{"title":"useAnimatedScrollHandler","permalink":"/react-native-reanimated/docs/scroll/useAnimatedScrollHandler"}}');var o=n(47671),r=n(30620),s=n(39471),a=n(8589),i=n(986),c=n(31071),d=n(90424),f=n(14442),u=n(28313),m=n(19727);const h={code:'function ScrollOffsetTsx1(){const{offset}=this.__closure;return"Scroll offset: "+offset.value.toFixed(1);}'};function p(){const e=(0,m.useAnimatedRef)(),t=(0,m.useScrollOffset)(e),n=(0,m.useDerivedValue)(function({_worklet_1923784119974_init_data:e,offset:t}){const n=()=>`Scroll offset: ${t.value.toFixed(1)}`;return n.__closure={offset:t},n.__workletHash=1923784119974,n.__initData=e,n}({_worklet_1923784119974_init_data:h,offset:t})),[l,r]=s.useState(!1);return(0,o.jsxs)(a.A,{style:x.container,children:[(0,o.jsx)(g,{text:n}),(0,o.jsx)(i.A,{style:x.scroll,contentContainerStyle:x.scrollContent,ref:e,horizontal:l,children:Array.from({length:10}).map(((e,t)=>(0,o.jsx)(a.A,{style:x.box,children:(0,o.jsx)(c.A,{style:x.center,children:t})},t)))}),(0,o.jsx)(d.A,{title:"Toggle scroll to "+(l?"vertical":"horizontal"),onPress:()=>r(!l)})]})}const x=f.A.create({container:{alignItems:"center"},scroll:{borderWidth:1,borderColor:"gray",height:250,width:250,margin:20},scrollContent:{alignItems:"center"},box:{width:100,height:100,margin:10,borderRadius:15,backgroundColor:"#b58df1",alignItems:"center",justifyContent:"center"},center:{textAlign:"center"}}),b=m.default.createAnimatedComponent(u.A),S={code:"function ScrollOffsetTsx2(){const{text}=this.__closure;return{text:text.value,defaultValue:text.value};}"};function g(e){const t=e.text,n=(0,m.useAnimatedProps)(function({_worklet_1536181240904_init_data:e,text:t}){const n=()=>({text:t.value,defaultValue:t.value});return n.__closure={text:t},n.__workletHash=1536181240904,n.__initData=e,n}({_worklet_1536181240904_init_data:S,text:t}));return(0,o.jsx)(b,{...e,editable:!1,animatedProps:n})}const v="import React from 'react';\nimport {\n  Button,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TextInput,\n  View,\n} from 'react-native';\nimport type { DerivedValue } from 'react-native-reanimated';\nimport Animated, {\n  useAnimatedProps,\n  useAnimatedRef,\n  useDerivedValue,\n  useScrollOffset,\n} from 'react-native-reanimated';\n\nexport default function App() {\n  const animatedRef = useAnimatedRef<ScrollView>();\n  // highlight-start\n  const offset = useScrollOffset(animatedRef);\n  const text = useDerivedValue(\n    () => `Scroll offset: ${offset.value.toFixed(1)}`\n  );\n  // highlight-end\n  const [isScrollHorizontal, setIsScrollHorizontal] =\n    React.useState<boolean>(false);\n\n  return (\n    <View style={styles.container}>\n      <AnimatedText text={text} />\n      <ScrollView\n        style={styles.scroll}\n        contentContainerStyle={styles.scrollContent}\n        ref={animatedRef}\n        horizontal={isScrollHorizontal}>\n        {Array.from({ length: 10 }).map((_, i) => (\n          <View key={i} style={styles.box}>\n            <Text style={styles.center}>{i}</Text>\n          </View>\n        ))}\n      </ScrollView>\n      <Button\n        title={`Toggle scroll to ${\n          isScrollHorizontal ? 'vertical' : 'horizontal'\n        }`}\n        onPress={() => setIsScrollHorizontal(!isScrollHorizontal)}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n  },\n  scroll: {\n    borderWidth: 1,\n    borderColor: 'gray',\n    height: 250,\n    width: 250,\n    margin: 20,\n  },\n  scrollContent: {\n    alignItems: 'center',\n  },\n  box: {\n    width: 100,\n    height: 100,\n    margin: 10,\n    borderRadius: 15,\n    backgroundColor: '#b58df1',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  center: {\n    textAlign: 'center',\n  },\n});\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n\nfunction AnimatedText(props: { text: DerivedValue<string> }) {\n  const text = props.text;\n  const animatedProps = useAnimatedProps(() => ({\n    text: text.value,\n    defaultValue: text.value,\n  }));\n  return (\n    <AnimatedTextInput\n      {...props}\n      editable={false}\n      animatedProps={animatedProps}\n    />\n  );\n}\n",y={sidebar_position:2},j="useScrollOffset",A={},w=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>animatedRef</code>",id:"animatedref",level:4},{value:"<code>providedOffset</code> <Optional></Optional>",id:"providedoffset-",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function _(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:n,InteractiveExample:l,Optional:s,PlatformCompatibility:a}=t;return n||k("Details",!0),l||k("InteractiveExample",!0),s||k("Optional",!0),a||k("PlatformCompatibility",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"usescrolloffset",children:"useScrollOffset"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"useScrollOffset"})," lets you to create animations based on the offset of a scrollable component (e.g. ",(0,o.jsx)(t.code,{children:"ScrollView"}),", ",(0,o.jsx)(t.code,{children:"FlatList"}),", ",(0,o.jsx)(t.code,{children:"FlashList"}),").\nThe hook automatically detects if the scrollable is horizontal or vertical."]}),"\n",(0,o.jsx)(t.h2,{id:"reference",children:"Reference"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"import { useScrollOffset } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef<ScrollView>();\n  // highlight-next-line\n  const scrollOffset = useScrollOffset(animatedRef);\n  return <ScrollView ref={animatedRef}>{/* ... */}</ScrollView>;\n}\n"})}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Type definitions"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"function useScrollOffset<C extends ScrollableComponent>(\n  animatedRef: AnimatedRef<C> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number>;\n\ntype ScrollableComponent = Component<\n  Pick<\n    ScrollViewProps,\n    | 'onScroll'\n    | 'onScrollBeginDrag'\n    | 'onScrollEndDrag'\n    | 'onMomentumScrollBegin'\n    | 'onMomentumScrollEnd'\n  >\n> &\n  Pick<ScrollView, 'getScrollableNode'>;\n"})})]}),"\n",(0,o.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,o.jsx)(t.h4,{id:"animatedref",children:(0,o.jsx)(t.code,{children:"animatedRef"})}),"\n",(0,o.jsxs)(t.p,{children:["An ",(0,o.jsx)(t.a,{href:"/docs/core/useAnimatedRef#returns",children:"animated ref"})," connected to the scrollable component you'd want to scroll on. The animated ref has to be passed either to an [Animated component](/docs/fundamentals/\nglossary#animated-component) or a React Native built-in component."]}),"\n",(0,o.jsxs)(t.h4,{id:"providedoffset-",children:[(0,o.jsx)(t.code,{children:"providedOffset"})," ",(0,o.jsx)(s,{})]}),"\n",(0,o.jsx)(t.p,{children:"An optional shared value to be updated with the scroll offset. If not provided a new shared value, created internally, will be updated and returned."}),"\n",(0,o.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"useScrollOffset"})," returns a ",(0,o.jsx)(t.a,{href:"/docs/fundamentals/glossary#shared-value",children:"shared value"})," which holds the current offset of the scrollable component."]}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n","\n",(0,o.jsx)(l,{src:v,component:p,showCode:!0}),"\n",(0,o.jsx)(t.h2,{id:"remarks",children:"Remarks"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"animatedRef"})," argument can be changed at will and the hook will correctly return values based on the scrollable component it is connected to, for example:"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.code,{children:"useScrollOffset(someState ? someScrollRefA : someScrollRefB)"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,o.jsx)(a,{android:!0,ios:!0,web:!0})]})}function R(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(_,{...e})}):_(e)}function k(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},90424:(e,t,n)=>{n.d(t,{A:()=>c});var l=n(39471),o=n(14442),r=n(21844),s=n(31071),a=l.forwardRef(((e,t)=>{var n=e.accessibilityLabel,o=e.color,a=e.disabled,c=e.onPress,d=e.testID,f=e.title;return l.createElement(r.A,{accessibilityLabel:n,accessibilityRole:"button",disabled:a,focusable:!a,onPress:c,ref:t,style:[i.button,o&&{backgroundColor:o},a&&i.buttonDisabled],testID:d},l.createElement(s.A,{style:[i.text,a&&i.textDisabled]},f))}));a.displayName="Button";var i=o.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const c=a}}]);