"use strict";(globalThis.webpackChunkdocs_reanimated=globalThis.webpackChunkdocs_reanimated||[]).push([[2852],{35211:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"3.x","label":"3.x","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-3.x","isLast":false,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Fundamentals","collapsible":false,"collapsed":false,"items":[{"type":"link","href":"/react-native-reanimated/docs/3.x/fundamentals/getting-started","label":"Getting started","docId":"fundamentals/getting-started","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/fundamentals/your-first-animation","label":"Your First Animation","docId":"fundamentals/your-first-animation","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/fundamentals/animating-styles-and-props","label":"Animating styles and props","docId":"fundamentals/animating-styles-and-props","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/fundamentals/customizing-animation","label":"Customizing animations","docId":"fundamentals/customizing-animation","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/fundamentals/applying-modifiers","label":"Applying modifiers","docId":"fundamentals/applying-modifiers","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/fundamentals/handling-gestures","label":"Handling gestures","docId":"fundamentals/handling-gestures","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/fundamentals/glossary","label":"Glossary of terms","docId":"fundamentals/glossary","unlisted":false}],"href":"/react-native-reanimated/docs/3.x/category/fundamentals"},{"type":"category","label":"Animations","collapsible":false,"collapsed":false,"items":[{"type":"link","href":"/react-native-reanimated/docs/3.x/animations/withTiming","label":"withTiming","docId":"animations/withTiming","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/animations/withSpring","label":"withSpring","docId":"animations/withSpring","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/animations/withDecay","label":"withDecay","docId":"animations/withDecay","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/animations/withSequence","label":"withSequence","docId":"animations/withSequence","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/animations/withRepeat","label":"withRepeat","docId":"animations/withRepeat","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/animations/withDelay","label":"withDelay","docId":"animations/withDelay","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/animations/withClamp","label":"withClamp","docId":"animations/withClamp","unlisted":false}],"href":"/react-native-reanimated/docs/3.x/category/animations"},{"type":"category","label":"Core","collapsible":false,"collapsed":false,"items":[{"type":"link","href":"/react-native-reanimated/docs/3.x/core/useSharedValue","label":"useSharedValue","docId":"core/useSharedValue","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/core/useAnimatedStyle","label":"useAnimatedStyle","docId":"core/useAnimatedStyle","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/core/useAnimatedProps","label":"useAnimatedProps","docId":"core/useAnimatedProps","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/core/useAnimatedRef","label":"useAnimatedRef","docId":"core/useAnimatedRef","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/core/useDerivedValue","label":"useDerivedValue","docId":"core/useDerivedValue","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/core/createAnimatedComponent","label":"createAnimatedComponent","docId":"core/createAnimatedComponent","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/core/cancelAnimation","label":"cancelAnimation","docId":"core/cancelAnimation","unlisted":false}],"href":"/react-native-reanimated/docs/3.x/category/core"},{"type":"category","label":"Scroll","collapsible":false,"collapsed":false,"items":[{"type":"link","href":"/react-native-reanimated/docs/3.x/scroll/scrollTo","label":"scrollTo","docId":"scroll/scrollTo","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/scroll/useScrollViewOffset","label":"useScrollViewOffset","docId":"scroll/useScrollViewOffset","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/scroll/useAnimatedScrollHandler","label":"useAnimatedScrollHandler","docId":"scroll/useAnimatedScrollHandler","unlisted":false}],"href":"/react-native-reanimated/docs/3.x/category/scroll"},{"type":"category","label":"Device","collapsible":false,"collapsed":false,"items":[{"type":"link","href":"/react-native-reanimated/docs/3.x/device/useAnimatedKeyboard","label":"useAnimatedKeyboard","docId":"device/useAnimatedKeyboard","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/device/useAnimatedSensor","label":"useAnimatedSensor","docId":"device/useAnimatedSensor","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/device/useReducedMotion","label":"useReducedMotion","docId":"device/useReducedMotion","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/device/ReducedMotionConfig","label":"ReducedMotionConfig","docId":"device/ReducedMotionConfig","unlisted":false}],"href":"/react-native-reanimated/docs/3.x/category/device"},{"type":"category","label":"Layout Animations","collapsible":false,"collapsed":false,"items":[{"type":"link","href":"/react-native-reanimated/docs/3.x/layout-animations/entering-exiting-animations","label":"Entering/Exiting animations","docId":"layout-animations/entering-exiting-animations","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/layout-animations/keyframe-animations","label":"Keyframe animations","docId":"layout-animations/keyframe-animations","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/layout-animations/layout-transitions","label":"Layout transitions","docId":"layout-animations/layout-transitions","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/layout-animations/custom-animations","label":"Custom animations","docId":"layout-animations/custom-animations","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/layout-animations/layout-animation-config","label":"Skipping Layout Animations","docId":"layout-animations/layout-animation-config","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/layout-animations/list-layout-animations","label":"List Layout Animations","docId":"layout-animations/list-layout-animations","unlisted":false}],"href":"/react-native-reanimated/docs/3.x/category/layout-animations"},{"type":"category","label":"Shared Element Transitions","collapsible":false,"collapsed":false,"items":[{"type":"link","href":"/react-native-reanimated/docs/3.x/shared-element-transitions/overview","label":"Overview","docId":"shared-element-transitions/overview","unlisted":false}],"href":"/react-native-reanimated/docs/3.x/category/shared-element-transitions"},{"type":"category","label":"Threading","collapsible":false,"collapsed":false,"items":[{"type":"link","href":"/react-native-reanimated/docs/3.x/threading/runOnJS","label":"runOnJS","docId":"threading/runOnJS","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/threading/runOnUI","label":"runOnUI","docId":"threading/runOnUI","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/threading/runOnRuntime","label":"runOnRuntime","docId":"threading/runOnRuntime","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/threading/createWorkletRuntime","label":"createWorkletRuntime","docId":"threading/createWorkletRuntime","unlisted":false}],"href":"/react-native-reanimated/docs/3.x/category/threading"},{"type":"category","label":"Utilities","collapsible":false,"collapsed":false,"items":[{"type":"link","href":"/react-native-reanimated/docs/3.x/utilities/interpolate","label":"interpolate","docId":"utilities/interpolate","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/utilities/clamp","label":"clamp","docId":"utilities/clamp","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/utilities/interpolateColor","label":"interpolateColor","docId":"utilities/interpolateColor","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/utilities/getRelativeCoords","label":"getRelativeCoords","docId":"utilities/getRelativeCoords","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/utilities/useAnimatedGestureHandler","label":"useAnimatedGestureHandler","docId":"utilities/useAnimatedGestureHandler","unlisted":false}],"href":"/react-native-reanimated/docs/3.x/category/utilities"},{"type":"category","label":"Advanced APIs","collapsible":false,"collapsed":false,"items":[{"type":"link","href":"/react-native-reanimated/docs/3.x/advanced/measure","label":"measure","docId":"advanced/measure","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/advanced/useAnimatedReaction","label":"useAnimatedReaction","docId":"advanced/useAnimatedReaction","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/advanced/useFrameCallback","label":"useFrameCallback","docId":"advanced/useFrameCallback","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/advanced/useEvent","label":"useEvent","docId":"advanced/useEvent","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/advanced/useHandler","label":"useHandler","docId":"advanced/useHandler","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/advanced/useComposedEventHandler","label":"useComposedEventHandler","docId":"advanced/useComposedEventHandler","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/advanced/dispatchCommand","label":"dispatchCommand","docId":"advanced/dispatchCommand","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/advanced/setNativeProps","label":"setNativeProps","docId":"advanced/setNativeProps","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/advanced/makeMutable","label":"makeMutable","docId":"advanced/makeMutable","unlisted":false}],"href":"/react-native-reanimated/docs/3.x/category/advanced-apis"},{"type":"category","label":"Debugging","collapsible":false,"collapsed":false,"items":[{"type":"link","href":"/react-native-reanimated/docs/3.x/debugging/accurate-call-stacks","label":"Accurate Call Stacks","docId":"debugging/accurate-call-stacks","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/debugging/logger-configuration","label":"Logger configuration","docId":"debugging/logger-configuration","unlisted":false}],"href":"/react-native-reanimated/docs/3.x/category/debugging"},{"type":"category","label":"Guides","collapsible":false,"collapsed":false,"items":[{"type":"link","href":"/react-native-reanimated/docs/3.x/guides/worklets","label":"Worklets","docId":"guides/worklets","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/guides/accessibility","label":"Accessibility","docId":"guides/accessibility","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/guides/building-on-windows","label":"Building for Android on Windows","docId":"guides/building-on-windows","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/guides/compatibility","label":"Compatibility","docId":"guides/compatibility","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/guides/contributing","label":"Contributing","docId":"guides/contributing","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/guides/debugging","label":"Debugging worklets","docId":"guides/debugging","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/guides/migration-from-1.x","label":"Migration from 1.x","docId":"guides/migration-from-1.x","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/guides/migration-from-2.x","label":"Migration from 2.x","docId":"guides/migration-from-2.x","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/guides/testing","label":"Testing with Jest","docId":"guides/testing","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/guides/troubleshooting","label":"Troubleshooting","docId":"guides/troubleshooting","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/guides/web-support","label":"Web Support","docId":"guides/web-support","unlisted":false}],"href":"/react-native-reanimated/docs/3.x/category/guides"},{"type":"category","label":"Reanimated Babel plugin","collapsible":false,"collapsed":false,"items":[{"type":"link","href":"/react-native-reanimated/docs/3.x/reanimated-babel-plugin/about","label":"About","docId":"reanimated-babel-plugin/about","unlisted":false},{"type":"link","href":"/react-native-reanimated/docs/3.x/reanimated-babel-plugin/plugin-options","label":"Options","docId":"reanimated-babel-plugin/plugin-options","unlisted":false}],"href":"/react-native-reanimated/docs/3.x/category/reanimated-babel-plugin"}]},"docs":{"advanced/dispatchCommand":{"id":"advanced/dispatchCommand","title":"dispatchCommand","description":"dispatchCommand allows you to run commands on a native component from the UI thread directly.","sidebar":"tutorialSidebar"},"advanced/makeMutable":{"id":"advanced/makeMutable","title":"makeMutable","description":"The usage of makeMutable is discouraged in most cases. It\'s recommended to use the useSharedValue hook instead unless you know what you\'re doing and you are aware of the consequences (see the Remarks section).","sidebar":"tutorialSidebar"},"advanced/measure":{"id":"advanced/measure","title":"measure","description":"measure lets you synchronously get the dimensions and position of a view on the screen, all on the UI thread.","sidebar":"tutorialSidebar"},"advanced/setNativeProps":{"id":"advanced/setNativeProps","title":"setNativeProps","description":"setNativeProps lets you imperatively update component properties.","sidebar":"tutorialSidebar"},"advanced/useAnimatedReaction":{"id":"advanced/useAnimatedReaction","title":"useAnimatedReaction","description":"useAnimatedReaction allows you to respond to changes in a shared value. It\'s especially useful when comparing values previously stored in the shared value with the current one.","sidebar":"tutorialSidebar"},"advanced/useComposedEventHandler":{"id":"advanced/useComposedEventHandler","title":"useComposedEventHandler","description":"This is a hook that lets you compose useEvent-based event handlers (such as useAnimatedScrollHandler or your own custom ones) into a single, combined event handler.","sidebar":"tutorialSidebar"},"advanced/useEvent":{"id":"advanced/useEvent","title":"useEvent","description":"useEvent is a low-level hook. It returns event handler that will be called when native event occurs. You can use it to create custom event handler hooks, like useScrollViewOffset or useAnimatedScrollHandler.","sidebar":"tutorialSidebar"},"advanced/useFrameCallback":{"id":"advanced/useFrameCallback","title":"useFrameCallback","description":"useFrameCallback lets you run a function on every frame update.","sidebar":"tutorialSidebar"},"advanced/useHandler":{"id":"advanced/useHandler","title":"useHandler","description":"useHandler is a low-level hook. It returns a context object and a value that tells you if the worklet needs to be rebuilt. You can use it to create custom event handler hooks, like useScrollViewOffset or useAnimatedScrollHandler.","sidebar":"tutorialSidebar"},"animations/withClamp":{"id":"animations/withClamp","title":"withClamp","description":"withClamp is an animation modifier that lets you limit the scope of movement of your animation to make it stay within some predefined range.","sidebar":"tutorialSidebar"},"animations/withDecay":{"id":"animations/withDecay","title":"withDecay","description":"withDecay lets you create animations that mimic objects in motion with friction. The animation will start with the provided velocity and slow down over time according to the given deceleration rate until it stops.","sidebar":"tutorialSidebar"},"animations/withDelay":{"id":"animations/withDelay","title":"withDelay","description":"withDelay is an animation modifier that lets you start an animation with a delay.","sidebar":"tutorialSidebar"},"animations/withRepeat":{"id":"animations/withRepeat","title":"withRepeat","description":"withRepeat is an animation modifier that lets you repeat an animation given number of times or run it indefinitely.","sidebar":"tutorialSidebar"},"animations/withSequence":{"id":"animations/withSequence","title":"withSequence","description":"withSequence is an animation modifier that lets you run animations in a sequence.","sidebar":"tutorialSidebar"},"animations/withSpring":{"id":"animations/withSpring","title":"withSpring","description":"withSpring lets you create spring-based animations.","sidebar":"tutorialSidebar"},"animations/withTiming":{"id":"animations/withTiming","title":"withTiming","description":"withTiming lets you create an animation based on duration and easing.","sidebar":"tutorialSidebar"},"core/cancelAnimation":{"id":"core/cancelAnimation","title":"cancelAnimation","description":"cancelAnimation lets you cancel a running animation paired to a shared value.","sidebar":"tutorialSidebar"},"core/createAnimatedComponent":{"id":"core/createAnimatedComponent","title":"createAnimatedComponent","description":"createAnimatedComponent lets you create an Animated version of any React Native component. Wrapping a component with createAnimatedComponent allows Reanimated to animate any prop or style associated with that component.","sidebar":"tutorialSidebar"},"core/useAnimatedProps":{"id":"core/useAnimatedProps","title":"useAnimatedProps","description":"useAnimatedProps lets you create an animated props object which can be animated using shared values. This object is used to animate properties of third-party components.","sidebar":"tutorialSidebar"},"core/useAnimatedRef":{"id":"core/useAnimatedRef","title":"useAnimatedRef","description":"useAnimatedRef lets you get a reference of a view. Used alongside measure, scrollTo, and useScrollViewOffset functions.","sidebar":"tutorialSidebar"},"core/useAnimatedStyle":{"id":"core/useAnimatedStyle","title":"useAnimatedStyle","description":"useAnimatedStyle lets you create a styles object, similar to StyleSheet styles, which can be animated using shared values.","sidebar":"tutorialSidebar"},"core/useDerivedValue":{"id":"core/useDerivedValue","title":"useDerivedValue","description":"useDerivedValue lets you create new shared values based on existing ones while keeping them reactive.","sidebar":"tutorialSidebar"},"core/useSharedValue":{"id":"core/useSharedValue","title":"useSharedValue","description":"useSharedValue lets you define shared values in your components.","sidebar":"tutorialSidebar"},"debugging/accurate-call-stacks":{"id":"debugging/accurate-call-stacks","title":"Accurate Call Stacks","description":"When debugging Reanimated code, you may encounter error or warning call stacks that don\'t clearly indicate the root cause of the problem. These stacks can be misleading, as they often highlight code from Reanimated\'s internals rather than the misuse of the Reanimated API that is the source of the problem.","sidebar":"tutorialSidebar"},"debugging/logger-configuration":{"id":"debugging/logger-configuration","title":"Logger configuration","description":"Reanimated shows warnings that indicate misuses of the library API, such as modifying the shared value during component re-render. These logs can be configured to be more or less verbose.","sidebar":"tutorialSidebar"},"device/ReducedMotionConfig":{"id":"device/ReducedMotionConfig","title":"ReducedMotionConfig","description":"ReducedMotionConfig component let\'s you change behavior in response to the device\'s reduced motion accessibility setting. By default it disables all animation when the reduced motion is enabled on a device. You can adjust it for your specific use case. You can learn more about Accessibility and useReducedMotion in Reanimated.","sidebar":"tutorialSidebar"},"device/useAnimatedKeyboard":{"id":"device/useAnimatedKeyboard","title":"useAnimatedKeyboard","description":"useAnimatedKeyboard lets you create animations based on state and height of the virtual keyboard.","sidebar":"tutorialSidebar"},"device/useAnimatedSensor":{"id":"device/useAnimatedSensor","title":"useAnimatedSensor","description":"useAnimatedSensor lets you create animations based on data from the device\'s sensors. You can access:","sidebar":"tutorialSidebar"},"device/useReducedMotion":{"id":"device/useReducedMotion","title":"useReducedMotion","description":"useReducedMotion lets you query the reduced motion system setting. You can use it to disable animations.","sidebar":"tutorialSidebar"},"fundamentals/animating-styles-and-props":{"id":"fundamentals/animating-styles-and-props","title":"Animating styles and props","description":"In the last section, we learned how to make simple animations, what shared values are and how to use them. Now, we\'ll learn a different way of passing animation styles to components. We\'ll also go over the difference between animating styles and props and how to handle them using useAnimatedStyle and useAnimatedProps.","sidebar":"tutorialSidebar"},"fundamentals/applying-modifiers":{"id":"fundamentals/applying-modifiers","title":"Applying modifiers","description":"Another way of customizing animations in Reanimated is by using animation modifiers. Reanimated comes with three built-in modifiers: withRepeat, withSequence, and withDelay.","sidebar":"tutorialSidebar"},"fundamentals/customizing-animation":{"id":"fundamentals/customizing-animation","title":"Customizing animations","description":"Previous section not only taught you how to use shared values in practice but also you used withSpring and withTiming functions to create animations. We think now you\'re more than ready to dive deeper into customizing animations!","sidebar":"tutorialSidebar"},"fundamentals/getting-started":{"id":"fundamentals/getting-started","title":"Getting started","description":"The goal of the Fundamentals section is to help you gain a strong foundation on the core concepts of Reanimated and give you the confidence to explore more advanced use cases on your own. This section is packed with interactive examples, code snippets and explanations. Are you ready? Let\'s dive in!","sidebar":"tutorialSidebar"},"fundamentals/glossary":{"id":"fundamentals/glossary","title":"Glossary of terms","description":"Animated component","sidebar":"tutorialSidebar"},"fundamentals/handling-gestures":{"id":"fundamentals/handling-gestures","title":"Handling gestures","description":"In this section, we\'ll learn how to handle gestures with Reanimated. To achieve this, Reanimated integrates tightly with React Native Gesture Handler, another library created by Software Mansion.","sidebar":"tutorialSidebar"},"fundamentals/your-first-animation":{"id":"fundamentals/your-first-animation","title":"Your First Animation","description":"In this section, we\'ll guide you through the basic concepts of Reanimated. If you\'re new to Reanimated, you\'re in the right hands! We\'re going to start by building a simple animation which will help you develop a basic understanding of the library. Then, in the following sections, we\'re going to build on top of this knowledge and further expand your skills. Let\'s go!","sidebar":"tutorialSidebar"},"guides/accessibility":{"id":"guides/accessibility","title":"Accessibility","description":"In this section, we will explore how Reanimated provides support for enhanced accessibility in animations, particularly through its reduced motion functionality. This feature ensures a smoother experience for users who may have motion sensitivities or prefer less movement.","sidebar":"tutorialSidebar"},"guides/building-on-windows":{"id":"guides/building-on-windows","title":"Building for Android on Windows","description":"This article provides basic troubleshooting steps for issues that may happen when building React Native apps with Reanimated for Android devices on Windows host machine.","sidebar":"tutorialSidebar"},"guides/compatibility":{"id":"guides/compatibility","title":"Compatibility table","description":"Currently supported React Native versions (Paper)","sidebar":"tutorialSidebar"},"guides/contributing":{"id":"guides/contributing","title":"Contributing","description":"Thank you for your interest in contributing to Reanimated! From triaging and commenting on issues, through extending the documentation, to reviewing and sending Pull Requests, all contributions are more than welcome.","sidebar":"tutorialSidebar"},"guides/debugging":{"id":"guides/debugging","title":"Debugging worklets","description":"Due to Reanimated\'s unique architecture and usage of a second JS runtime, debugging","sidebar":"tutorialSidebar"},"guides/migration-from-1.x":{"id":"guides/migration-from-1.x","title":"Migrating from Reanimated 1.x to 2.x","description":"We wanted to make it possible to migrate from Reanimated 1 to Reanimated 2 incrementally.","sidebar":"tutorialSidebar"},"guides/migration-from-2.x":{"id":"guides/migration-from-2.x","title":"Migrating from Reanimated 2.x to 3.x","description":"Reanimated 3.x doesn\'t introduce any breaking changes between 2.x and 3.x in terms of the API. All the code you\'ve written in Reanimated v2 API works in 3.x without any changes. However, Reanimated 3.x drops the Reanimated v1 API entirely. For the migration guide between 1.x and 2.x versions please consult Migration from 1.x to 2.x.","sidebar":"tutorialSidebar"},"guides/testing":{"id":"guides/testing","title":"Testing with Jest","description":"Reanimated provides testing API, based on Jest. It allows user to mock web-based animations.","sidebar":"tutorialSidebar"},"guides/troubleshooting":{"id":"guides/troubleshooting","title":"Troubleshooting","description":"Initialization issues","sidebar":"tutorialSidebar"},"guides/web-support":{"id":"guides/web-support","title":"Web Support","description":"It\'s possible to launch Reanimated in a web browser. For that case all of the functionalities are implemented purely in JavaScript, hence the efficiency of the animations might be lower.","sidebar":"tutorialSidebar"},"guides/worklets":{"id":"guides/worklets","title":"Worklets","description":"Worklets are short-running JavaScript functions that can run on the UI thread. Reanimated uses worklets to calculate view styles and react to events on the UI thread.","sidebar":"tutorialSidebar"},"layout-animations/custom-animations":{"id":"layout-animations/custom-animations","title":"Custom animations","description":"Custom animations give you a full control over the Entering/Exiting animations and Layout transitions. However, they tend to be hard to understand and maintain. We recommend starting with predefined Entering/Exiting, Keyframes and Layout presets first before using custom animations.","sidebar":"tutorialSidebar"},"layout-animations/entering-exiting-animations":{"id":"layout-animations/entering-exiting-animations","title":"Entering/Exiting animations","description":"Entering/Exiting animations let you animate elements when they are added to or removed from the view hierarchy.","sidebar":"tutorialSidebar"},"layout-animations/keyframe-animations":{"id":"layout-animations/keyframe-animations","title":"Keyframe animations","description":"Keyframes are animation definition schemas that let you create complex animations. They allow you more flexibility than standard Entering and Exiting presets.","sidebar":"tutorialSidebar"},"layout-animations/layout-animation-config":{"id":"layout-animations/layout-animation-config","title":"LayoutAnimationConfig","description":"LayoutAnimationConfig is a component that lets you skip entering and exiting animations.","sidebar":"tutorialSidebar"},"layout-animations/layout-transitions":{"id":"layout-animations/layout-transitions","title":"Layout transitions","description":"Layout transitions allows you to replace layout changes with smooth transitions. Each layout change may include changes of size and position and both of them can be animated.","sidebar":"tutorialSidebar"},"layout-animations/list-layout-animations":{"id":"layout-animations/list-layout-animations","title":"List Layout Animations","description":"itemLayoutAnimation lets you define a layout transition that\'s applied when list items layout changes. You can use one of the predefined transitions like LinearTransition or create your own transition.","sidebar":"tutorialSidebar"},"reanimated-babel-plugin/about":{"id":"reanimated-babel-plugin/about","title":"About","description":"What is Reanimated Babel Plugin?","sidebar":"tutorialSidebar"},"reanimated-babel-plugin/plugin-options":{"id":"reanimated-babel-plugin/plugin-options","title":"Options","description":"Our plugin offers several optional functionalities that you may need to employ advanced APIs:","sidebar":"tutorialSidebar"},"scroll/scrollTo":{"id":"scroll/scrollTo","title":"scrollTo","description":"scrollTo lets you synchronously scroll to a given X or Y offset.","sidebar":"tutorialSidebar"},"scroll/useAnimatedScrollHandler":{"id":"scroll/useAnimatedScrollHandler","title":"useAnimatedScrollHandler","description":"useAnimatedScrollHandler is a hook that returns an event handler reference. It can be used with React Native\'s scrollable components.","sidebar":"tutorialSidebar"},"scroll/useScrollViewOffset":{"id":"scroll/useScrollViewOffset","title":"useScrollViewOffset","description":"useScrollViewOffset lets you to create animations based on the offset of a ScrollView.","sidebar":"tutorialSidebar"},"shared-element-transitions/overview":{"id":"shared-element-transitions/overview","title":"Shared Element Transitions","description":"Shared Element Transitions is an experimental feature, not recommended for production use yet. We are waiting for your feedback to improve implementation.","sidebar":"tutorialSidebar"},"threading/createWorkletRuntime":{"id":"threading/createWorkletRuntime","title":"createWorkletRuntime","description":"createWorkletRuntime lets you create a new JS runtime which can be used to run worklets possibly on different threads than JS or UI thread. This function is supposed to be used by third-party libraries that need to integrate with worklets. The return value represents the runtime and it\'s supposed to be passed to C++ side using JSI (JavaScript Interface) for further operations.","sidebar":"tutorialSidebar"},"threading/runOnJS":{"id":"threading/runOnJS","title":"runOnJS","description":"runOnJS lets you asynchronously run non-workletized functions that couldn\'t otherwise run on the UI thread. This applies to most external libraries as they don\'t have their functions marked with \\"worklet\\"; directive.","sidebar":"tutorialSidebar"},"threading/runOnRuntime":{"id":"threading/runOnRuntime","title":"runOnRuntime","description":"runOnRuntime lets you asynchronously run workletized functions on a separate worklet runtime on a separate thread.","sidebar":"tutorialSidebar"},"threading/runOnUI":{"id":"threading/runOnUI","title":"runOnUI","description":"runOnUI lets you asynchronously run workletized functions on the UI thread.","sidebar":"tutorialSidebar"},"utilities/clamp":{"id":"utilities/clamp","title":"clamp","description":"clamp lets you limit a value within a specified range.","sidebar":"tutorialSidebar"},"utilities/getRelativeCoords":{"id":"utilities/getRelativeCoords","title":"getRelativeCoords","description":"getRelativeCoords determines the location on the screen, relative to the given view.","sidebar":"tutorialSidebar"},"utilities/interpolate":{"id":"utilities/interpolate","title":"interpolate","description":"interpolate lets you map a value from one range to another using linear interpolation.","sidebar":"tutorialSidebar"},"utilities/interpolateColor":{"id":"utilities/interpolateColor","title":"interpolateColor","description":"interpolateColor maps input range to output colors using linear interpolation.","sidebar":"tutorialSidebar"},"utilities/useAnimatedGestureHandler":{"id":"utilities/useAnimatedGestureHandler","title":"useAnimatedGestureHandler","description":"This API is deprecated, doesn\'t receive any updates and will be removed in the next major version of Reanimated.","sidebar":"tutorialSidebar"}}}}')}}]);