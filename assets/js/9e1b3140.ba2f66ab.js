"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[4704],{52723:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"accordion","metadata":{"permalink":"/react-native-reanimated/examples/accordion","source":"@site/blog/accordion.md","title":"Accordion","description":"An accordion allows to show and hide a piece of content with a smooth animation. Commonly used in \\"FAQ\\" sections.","date":"2025-09-01T15:23:08.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"accordion","title":"Accordion"},"unlisted":false,"nextItem":{"title":"Bottom Sheet","permalink":"/react-native-reanimated/examples/bottomsheet"}},"content":"An accordion allows to show and hide a piece of content with a smooth animation. Commonly used in \\"FAQ\\" sections.\\n\\nimport Accordion from \'@site/static/examples/Accordion\';\\nimport AccordionSrc from \'!!raw-loader!@site/static/examples/Accordion\';\\n\\n<InteractiveExample src={AccordionSrc} component={Accordion} />\\n\\nThe following implementation of an accordion relies on [shared values](/docs/fundamentals/glossary#shared-value). Leveraging shared values helps to prevent unnecessary re-renders. We define shared values using the useSharedValue hook.\\n\\n<CollapsibleCode src={AccordionSrc} showLines={[16,16]}/>\\n\\n<ExampleVideo\\nsources={{\\n    android: \\"/react-native-reanimated/recordings/examples/accordion_android.mov\\",\\n    ios: \\"/react-native-reanimated/recordings/examples/accordion_ios.mov\\"\\n  }}\\n/>\\n\\nThe **AccordionItem** component encapsulates each item in the accordion. A `height` shared value manages the height of the item. The height dynamically adjusts based on the `isExpanded` prop, resulting in smooth expansion and collapse animations. The `duration` prop controls the duration of the animation.\\n\\nInside the **AccordionItem**, the children represent the content section. It can accommodate various types of content.\\n\\n<samp id=\\"Accordion\\">Accordion</samp>\\n\\n<CollapsibleCode src={AccordionSrc} showLines={[9,41]}/>"},{"id":"bottomsheet","metadata":{"permalink":"/react-native-reanimated/examples/bottomsheet","source":"@site/blog/bottom-sheet.md","title":"Bottom Sheet","description":"Bottom sheets are surfaces containing supplementary content, anchored to the bottom of the screen. They can provide users with quick access to contextual information, actions, or settings without interrupting their current workflow.","date":"2025-09-01T15:23:08.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"bottomsheet","title":"Bottom Sheet"},"unlisted":false,"prevItem":{"title":"Accordion","permalink":"/react-native-reanimated/examples/accordion"},"nextItem":{"title":"Flip Card","permalink":"/react-native-reanimated/examples/flipCard"}},"content":"Bottom sheets are surfaces containing supplementary content, anchored to the bottom of the screen. They can provide users with quick access to contextual information, actions, or settings without interrupting their current workflow.\\n\\nLooking for a ready-to-use solution? We recommend [@gorhom/bottom-sheet](https://www.npmjs.com/package/@gorhom/bottom-sheet).\\n\\nimport BottomSheet from \'@site/static/examples/BottomSheet\';\\nimport BottomSheetSrc from \'!!raw-loader!@site/static/examples/BottomSheet\';\\nimport CollapsibleCode from \'@site/src/components/CollapsibleCode\';\\n\\n<InteractiveExample src={BottomSheetSrc} component={BottomSheet} />\\n\\nThe **BottomSheet** component accepts props such as `isOpen` - a [shared value](/docs/fundamentals/glossary#shared-value) indicating whether the bottom sheet is open or closed, `toggleSheet` - a function to toggle the visibility of the bottom sheet, and an optional `duration` for animation.\\n\\n<samp id=\\"BottomSheet\\">Bottom Sheet</samp>\\n\\n<CollapsibleCode src={BottomSheetSrc} showLines={[17,48]}/>\\n\\nThe `height` shared value is used to track the height of the bottom sheet, while the `progress` derived value interpolates between 0 and 1 based on the state of `isOpen`, controlling the animation of the bottom sheet.\\n\\n<ExampleVideo\\nsources={{\\n    android: \\"/react-native-reanimated/recordings/examples/bottom_sheet_android.mov\\",\\n    ios: \\"/react-native-reanimated/recordings/examples/bottom_sheet_ios.mov\\"\\n  }}\\n/>\\n\\n<CollapsibleCode src={BottomSheetSrc} showLines={[18,21]}/>\\n\\nThe `useAnimatedStyle` hook helps in creating [animated styles](/docs/core/useAnimatedStyle/) based on shared values. These styles are then applied to **BottomSheet** to make it visually dynamic by adding backdrop and translating bottom sheet to the top.\\n\\n<CollapsibleCode src={BottomSheetSrc} showLines={[23,32]}/>"},{"id":"flipCard","metadata":{"permalink":"/react-native-reanimated/examples/flipCard","source":"@site/blog/flip-card.md","title":"Flip Card","description":"Flip card allows you to display different content depending on whether the card is flipped or not. It can be especially useful when you do not want to display some data immediately after entering the screen (e.g. secure data) and only after fulfilling a certain condition or performing an action.","date":"2025-09-01T15:23:08.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"flipCard","title":"Flip Card"},"unlisted":false,"prevItem":{"title":"Bottom Sheet","permalink":"/react-native-reanimated/examples/bottomsheet"},"nextItem":{"title":"Floating Action Button","permalink":"/react-native-reanimated/examples/floatingactionbutton"}},"content":"Flip card allows you to display different content depending on whether the card is flipped or not. It can be especially useful when you do not want to display some data immediately after entering the screen (e.g. secure data) and only after fulfilling a certain condition or performing an action.\\n\\nimport FlipCard from \'@site/static/examples/FlipCard\';\\nimport FlipCardSrc from \'!!raw-loader!@site/static/examples/FlipCard\';\\n\\n<InteractiveExample src={FlipCardSrc} component={FlipCard} />\\n\\nFor storing information about whether the card is flipped or not we use [shared value](/docs/fundamentals/glossary#shared-value) with the `useSharedValue` hook. Using shared values helps to prevent unnecessary re-renders.\\n\\n<CollapsibleCode src={FlipCardSrc} showLines={[116,116]} />\\n\\nThis allows us to [interpolate](/docs/utilities/interpolate) values between 0-180 and 180-360 degrees, depending on whether the card is flipped or not. In addition, we use [withTiming](/docs/animations/withTiming) util which makes our animation smooth.\\n\\n<CollapsibleCode src={FlipCardSrc} showLines={[61,63]} />\\n\\n<ExampleVideo\\nsources={{\\n        android: \\"/react-native-reanimated/recordings/examples/flip_card_android.mov\\",\\n        ios: \\"/react-native-reanimated/recordings/examples/flip_card_ios.mov\\"\\n    }}\\n/>\\n\\nThe **FlipCard** component accepts several props: `duration` allows you to change the duration of the animation, setting `direction` to the value `x` allows you to change the direction of our animation, **RegularContent** and **FlippedContent** give ability to display different content for flipped and non flipped variants.\\n\\n<samp id=\\"FlipCard\\">Flip Card</samp>\\n\\n<CollapsibleCode src={FlipCardSrc} showLines={[50,102]} />"},{"id":"floatingactionbutton","metadata":{"permalink":"/react-native-reanimated/examples/floatingactionbutton","source":"@site/blog/floating-action-button.md","title":"Floating Action Button","description":"Floating Action Button provides user with easy-accessible panel with primary or most common actions on the screen.","date":"2025-09-01T15:23:08.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"floatingactionbutton","title":"Floating Action Button"},"unlisted":false,"prevItem":{"title":"Flip Card","permalink":"/react-native-reanimated/examples/flipCard"},"nextItem":{"title":"Marquee","permalink":"/react-native-reanimated/examples/marquee"}},"content":"Floating Action Button provides user with easy-accessible panel with primary or most common actions on the screen.\\n\\nimport FloatingActionButton from \'@site/static/examples/FloatingActionButton\';\\nimport FloatingActionButtonSrc from \'!!raw-loader!@site/static/examples/FloatingActionButton\';\\nimport CollapsibleCode from \'@site/src/components/CollapsibleCode\';\\n\\n<InteractiveExample src={FloatingActionButtonSrc} component={FloatingActionButton} />\\n\\nWe use [shared values](/docs/fundamentals/glossary#shared-value) to monitor if the button is expanded. The `useSharedValue` hook helps prevent unnecessary re-renders during state changes.\\n\\n<CollapsibleCode src={FloatingActionButtonSrc} showLines={[49,52]}/>\\n\\nThe state is toggled when the main _Actions_ button is pressed, which triggers animations for other secondary buttons.\\n\\n<ExampleVideo\\nsources={{\\n    android: \\"/react-native-reanimated/recordings/examples/fab_android.mov\\",\\n    ios: \\"/react-native-reanimated/recordings/examples/fab_ios.mov\\"\\n  }}\\n/>\\n\\nIt also relies on [animatable values](/docs/fundamentals/glossary#animatable-value). Leveraging animatable values of rotation and position enables smooth transition between the two states.\\n\\n<samp id=\\"FloatingActionButton\\">Floating Action Button</samp>\\n\\n<CollapsibleCode src={FloatingActionButtonSrc} showLines={[55,67]}/>\\n\\nThe **FloatingActionButton** is a reusable component that manages button styles, content and animations. For this we use props: `buttonLetter`, `index` and `isExpanded`.\\n\\n<CollapsibleCode src={FloatingActionButtonSrc} showLines={[21,46]}/>\\n\\nWe define the animated styles for the buttons within the FloatingActionButton component, passing the necessary values as props. The delay in their appearance on the screen is calculated based on the button\'s index. Buttons with a higher index will appear later and be positioned higher in the \\"column\\" of buttons.\\n\\n<samp id=\\"FloatingActionButton\\">Floating Action Button</samp>\\n\\n<CollapsibleCode src={FloatingActionButtonSrc} showLines={[22,46]}/>"},{"id":"marquee","metadata":{"permalink":"/react-native-reanimated/examples/marquee","source":"@site/blog/marquee.md","title":"Marquee","description":"A marquee is an element used to display scrolling content horizontally within a confined space. It\'s commonly seen in applications to information such as news tickers, advertisements, or any content that needs continuous display within a limited area.","date":"2025-09-01T15:23:08.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"marquee","title":"Marquee"},"unlisted":false,"prevItem":{"title":"Floating Action Button","permalink":"/react-native-reanimated/examples/floatingactionbutton"},"nextItem":{"title":"Section List","permalink":"/react-native-reanimated/examples/sectionlist"}},"content":"A marquee is an element used to display scrolling content horizontally within a confined space. It\'s commonly seen in applications to information such as news tickers, advertisements, or any content that needs continuous display within a limited area.\\n\\nLooking for a ready-to-use solution? We recommend [@animatereactnative/marquee](https://www.npmjs.com/package/@animatereactnative/marquee).\\n\\nimport Marquee from \'@site/static/examples/Marquee\';\\nimport MarqueeSrc from \'!!raw-loader!@site/static/examples/Marquee\';\\nimport CollapsibleCode from \'@site/src/components/CollapsibleCode\';\\n\\n<InteractiveExample src={MarqueeSrc} component={Marquee} />\\n\\nNow, let\'s understand how this example works:\\n\\nThe **MeasureElement** component measures the width of its children and passes this information to its parent component, Marquee.\\n\\n<samp id=\\"Marquee\\">Marquee</samp>\\n\\n<CollapsibleCode src={MarqueeSrc} showLines={[8,18]}/>\\n\\n<ExampleVideo\\nsources={{\\n    android: \\"/react-native-reanimated/recordings/examples/marquee_android.mov\\",\\n    ios: \\"/react-native-reanimated/recordings/examples/marquee_ios.mov\\"\\n  }}\\n/>\\n\\nWe use the `useFrameCallback` hook to execute the animation logic on each frame.\\n\\n<CollapsibleCode src={MarqueeSrc} showLines={[57,62]}/>\\n\\nIt is located inside **ChildrenScroller** component that manages the scrolling animation by updating the offset value. It determines the horizontal translation of the child components, creates clones of the children and animates them horizontally based on the specified duration.\\n\\n<samp id=\\"Marquee\\">Marquee</samp>\\n<CollapsibleCode src={MarqueeSrc} showLines={[43,76]}/>\\n\\nThe **Marquee** component serves as the main orchestrator of the marquee effect. It calculates necessary dimensions, renders child components within a container, and coordinates the animation by utilizing the ChildrenScroller component.\\n\\n<samp id=\\"Marquee\\">Marquee</samp>\\n\\n<CollapsibleCode src={MarqueeSrc} showLines={[78,104]}/>"},{"id":"sectionlist","metadata":{"permalink":"/react-native-reanimated/examples/sectionlist","source":"@site/blog/section-list.md","title":"Section List","description":"Section lists allow you to organize long lists of content by dividing them with headings.","date":"2025-09-01T15:23:08.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"sectionlist","title":"Section List"},"unlisted":false,"prevItem":{"title":"Marquee","permalink":"/react-native-reanimated/examples/marquee"},"nextItem":{"title":"Slider","permalink":"/react-native-reanimated/examples/slider"}},"content":"import SectionList from \'@site/static/examples/SectionList\';\\nimport SectionListSrc from \'!!raw-loader!@site/static/examples/SectionList\';\\nimport CollapsibleCode from \'@site/src/components/CollapsibleCode\';\\n\\nSection lists allow you to organize long lists of content by dividing them with headings.\\n\\n<InteractiveExample src={SectionListSrc} component={SectionList} />\\n\\nThe primary component, **SectionList**, acts as the main orchestrator of the entire Section List interface. It coordinates the rendering of the table of contents and individual content sections.\\n\\n<samp id=\\"SectionList\\">Section List</samp>\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[150,174]}/>\\n\\nWithin **SectionList**, there are two key components: **TableOfContents** and **SectionCards**.\\n\\n**TableOfContents** is responsible for rendering the list of section names as a table of contents. It receives props such as `data`, `visibleIndex`, `sectionCardsRef`, and `tableOfContentsRef` to manage navigation and synchronization between the table of contents and section content.\\n\\n<samp id=\\"SectionList\\">Section List</samp>\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[123,148]}/>\\n\\n**SectionCards**, on the other hand, manages the rendering of individual sections and their corresponding content. It receives props: `sections`, `visibleIndex`, `sectionCardsRef`, and `tableOfContentsRef` to render the content sections and handle scrolling interactions.\\n\\n<samp id=\\"SectionList\\">Section List</samp>\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[198,256]}/>\\n\\n<ExampleVideo\\nsources={{\\n    android: \\"/react-native-reanimated/recordings/examples/section_list_android.mov\\",\\n    ios: \\"/react-native-reanimated/recordings/examples/section_list_ios.mov\\"\\n  }}\\n/>\\n\\nThe `onScroll` in **SectionCards** calculates the offset as the user scrolls through the content and determines which section is currently most visible on the screen. It is done by comparing the distance of each section from the top of the screen - it identifies the section closest to the viewport\'s top edge.\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[204,227]}/>\\n\\nWe use the `useSharedValue` hook to create mutable shared values across different components. For instance, `selectedItem` and `visibleIndex` are [shared values](/docs/fundamentals/glossary#shared-value) used to manage the currently selected section and its visibility index.\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[151,152]}/>\\n\\nAdditionally, we use `useAnimatedStyle` hook to define [animated styles](/docs/core/useAnimatedStyle/) based on the shared values. Then, we apply these animated styles to components to create dynamic visual effects, such as changing font weights and adding bottom borders.\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[96,99]}/>\\n\\nTo enable interaction with the FlashList component - such as scrolling to specific sections, the code utilizes variables created using `useRef` such as `sectionCardsRef` and `tableContentsRef`\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[154,155]}/>\\n\\nHere, the `debounce` function throttles the invocations of `onScroll` event handler which improves the performance.\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[85,93]}/>"},{"id":"slider","metadata":{"permalink":"/react-native-reanimated/examples/slider","source":"@site/blog/slider.md","title":"Slider","description":"Slider allows users to adjust a value or control a setting by sliding a handle along a track. It is commonly used to adjust settings such as volume, brightness, or in this case, the width of a box.","date":"2025-09-01T15:23:08.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"slider","title":"Slider"},"unlisted":false,"prevItem":{"title":"Section List","permalink":"/react-native-reanimated/examples/sectionlist"},"nextItem":{"title":"Switch","permalink":"/react-native-reanimated/examples/switch"}},"content":"Slider allows users to adjust a value or control a setting by sliding a handle along a track. It is commonly used to adjust settings such as volume, brightness, or in this case, the width of a box.\\n\\nimport Slider from \'@site/static/examples/Slider\';\\nimport SliderSrc from \'!!raw-loader!@site/static/examples/Slider\';\\nimport CollapsibleCode from \'@site/src/components/CollapsibleCode\';\\n\\n<InteractiveExample src={SliderSrc} component={Slider} />\\n\\nWe use the `useSharedValue` hook to store the offset of the slider handle, allowing for smooth animation during sliding.\\n\\n<CollapsibleCode src={SliderSrc} showLines={[24,24]}/>\\n\\nThis example is done using [Pan gesture](https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture) from `react-native-gesture-handler` library. It adjusts the handle\'s position and width of the box accordingly to the current offset. The offset is a [shared value](/docs/fundamentals/glossary#shared-value) and is updated during the `onChange` event of the pan gesture.\\n\\n<samp id=\\"Slider\\">Slider</samp>\\n\\n<CollapsibleCode src={SliderSrc} showLines={[28,41]}/>\\n\\n<ExampleVideo\\nsources={{\\n    android: \\"/react-native-reanimated/recordings/examples/slider_android.mov\\",\\n    ios: \\"/react-native-reanimated/recordings/examples/slider_ios.mov\\"\\n  }}\\n/>\\n\\nThe `useAnimatedStyle` hook is used to create animated styles for both the box and the slider handle. This ensures that changes to the offset value result in smooth animations for both components.\\n\\n<samp id=\\"Slider\\">Slider</samp>\\n\\n<CollapsibleCode src={SliderSrc} showLines={[42,52]}/>\\n\\nLeveraging animated props allows us to run them on the UI thread instead of the JS thread. To prevent unnecessary re-renders when the text displaying the current width of the box changes, we used the `useAnimatedProps` hook.\\n\\nAdditionally, we opted for **TextInput** instead of **Text** because **TextInput** has a `text` property that can be animated, whereas **Text** only has children.\\n\\nThis approach also enabled us to animate **TextInput** using [shared values](/docs/fundamentals/glossary#shared-value).\\n\\n<samp id=\\"Slider\\">Slider</samp>\\n\\n<CollapsibleCode src={SliderSrc} showLines={[58,63]}/>"},{"id":"switch","metadata":{"permalink":"/react-native-reanimated/examples/switch","source":"@site/blog/switch.md","title":"Switch","description":"A switch element is a user interface component that allows users to toggle between two or more states. It is commonly used to turn on/off a setting, enable/disable a feature, or select between options.","date":"2025-09-01T15:23:08.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"switch","title":"Switch"},"unlisted":false,"prevItem":{"title":"Slider","permalink":"/react-native-reanimated/examples/slider"}},"content":"A switch element is a user interface component that allows users to toggle between two or more states. It is commonly used to turn on/off a setting, enable/disable a feature, or select between options.\\n\\nimport Switch from \'@site/static/examples/Switch\';\\nimport SwitchSrc from \'!!raw-loader!@site/static/examples/Switch\';\\nimport CollapsibleCode from \'@site/src/components/CollapsibleCode\';\\n\\n<InteractiveExample src={SwitchSrc} component={Switch} />\\n\\nThe following implementation of a switch relies on [animatable values](/docs/fundamentals/glossary#animatable-value). Leveraging animatable values of color and position enables smooth transition between the two states.\\n\\n<samp id=\\"Switch\\">Switch</samp>\\n\\n<CollapsibleCode src={SwitchSrc} showLines={[26,52]}/>\\n\\n<ExampleVideo\\nsources={{\\n    android: \\"/react-native-reanimated/recordings/examples/switch_android.mp4\\",\\n    ios: \\"/react-native-reanimated/recordings/examples/switch_ios.mov\\"\\n  }}\\n/>\\n\\nWe use the `useSharedValue` hook to store the dimensions of the element, which allows for precise calculation of position changes during the animation. The hook is there to prevent unnecessary re-renders.\\n\\n<CollapsibleCode src={SwitchSrc} showLines={[23,25]}/>\\n\\nThe values are updated during the `onLayout` event of the element.\\n\\n<CollapsibleCode src={SwitchSrc} showLines={[56,61]}/>\\n\\nThe **Switch** component can represent any boolean value passed as a prop. The state dynamically adjusts based on the `value` prop resulting in smooth transition animations. It enables passing any function using the `onPress` prop. The `duration` prop controls the duration of the animation. The `style` and `trackColors` props enable personalization.\\n\\n<samp id=\\"Switch\\">Switch</samp>\\n\\n<CollapsibleCode src={SwitchSrc} showLines={[16,67]}/>"}]}}')}}]);