"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[4200],{3750:(e,n,t)=>{t.d(n,{A:()=>s});const s="import React from 'react';\nimport { Button, View, StyleSheet } from 'react-native';\nimport Animated, {\n  useSharedValue,\n  withSpring,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nexport default function App() {\n  const translateX = useSharedValue<number>(0);\n\n  const handlePress = () => {\n    translateX.value += 50;\n  };\n\n  // highlight-start\n  const animatedStyles = useAnimatedStyle(() => ({\n    transform: [{ translateX: withSpring(translateX.value * 2) }],\n  }));\n  // highlight-end\n\n  return (\n    <>\n      {/* highlight-next-line */}\n      <Animated.View style={[styles.box, animatedStyles]} />\n      <View style={styles.container}>\n        <Button onPress={handlePress} title=\"Click me\" />\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginVertical: 50,\n  },\n});\n"},23183:(e,n,t)=>{t.d(n,{A:()=>o});var s=t(14442),a=t(90424),i=t(8589),l=t(19727),r=t(47671);const d={code:"function AnimatingStylesTsx1(){const{withSpring,translateX}=this.__closure;return{transform:[{translateX:withSpring(translateX.value*2)}]};}"};function o(){const e=(0,l.useSharedValue)(0),n=(0,l.useAnimatedStyle)(function({_worklet_1036881448319_init_data:e,withSpring:n,translateX:t}){const s=()=>({transform:[{translateX:n(2*t.value)}]});return s.__closure={withSpring:n,translateX:t},s.__workletHash=0xf16af34d7f,s.__initData=e,s}({_worklet_1036881448319_init_data:d,withSpring:l.withSpring,translateX:e}));return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(l.default.View,{style:[c.box,n]}),(0,r.jsx)(i.A,{style:c.container,children:(0,r.jsx)(a.A,{onPress:()=>{e.value+=50},title:"Click me"})})]})}const c=s.A.create({container:{flex:1,alignItems:"center",justifyContent:"center"},box:{height:120,width:120,backgroundColor:"#b58df1",borderRadius:20,marginVertical:50}})},90424:(e,n,t)=>{t.d(n,{A:()=>o});var s=t(39471),a=t(14442),i=t(21844),l=t(31071),r=s.forwardRef((e,n)=>{var t=e.accessibilityLabel,a=e.color,r=e.disabled,o=e.onPress,c=e.testID,h=e.title;return s.createElement(i.A,{accessibilityLabel:t,accessibilityRole:"button",disabled:r,focusable:!r,onPress:o,ref:n,style:[d.button,a&&{backgroundColor:a},r&&d.buttonDisabled],testID:c},s.createElement(l.A,{style:[d.text,r&&d.textDisabled]},h))});r.displayName="Button";var d=a.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const o=r},93361:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"core/useAnimatedStyle","title":"useAnimatedStyle","description":"useAnimatedStyle lets you create a styles object, similar to StyleSheet styles, which can be animated using shared values.","source":"@site/versioned_docs/version-3.x/core/useAnimatedStyle.mdx","sourceDirName":"core","slug":"/core/useAnimatedStyle","permalink":"/react-native-reanimated/docs/3.x/core/useAnimatedStyle","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/versioned_docs/version-3.x/core/useAnimatedStyle.mdx","tags":[],"version":"3.x","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"useSharedValue","permalink":"/react-native-reanimated/docs/3.x/core/useSharedValue"},"next":{"title":"useAnimatedProps","permalink":"/react-native-reanimated/docs/3.x/core/useAnimatedProps"}}');var a=t(47671),i=t(30620),l=t(23183),r=t(3750);const d={sidebar_position:2},o="useAnimatedStyle",c={},h=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>updater</code>",id:"updater",level:4},{value:"<code>dependencies</code> <Optional></Optional>",id:"dependencies-",level:4},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components},{Details:t,Indent:s,InteractiveExample:d,Optional:o,PlatformCompatibility:c}=n;return t||y("Details",!0),s||y("Indent",!0),d||y("InteractiveExample",!0),o||y("Optional",!0),c||y("PlatformCompatibility",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"useanimatedstyle",children:"useAnimatedStyle"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"useAnimatedStyle"})," lets you create a styles object, similar to ",(0,a.jsx)(n.code,{children:"StyleSheet"})," styles, which can be animated using ",(0,a.jsx)(n.a,{href:"/docs/fundamentals/glossary#shared-value",children:"shared values"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Styles defined using ",(0,a.jsx)(n.code,{children:"useAnimatedStyle"})," have to be passed to ",(0,a.jsx)(n.code,{children:"style"})," property of an ",(0,a.jsx)(n.a,{href:"/docs/fundamentals/glossary#animated-component",children:"Animated component"}),". Styles are automatically updated whenever an associated shared value or React state changes."]}),"\n",(0,a.jsxs)(n.p,{children:["In contrast to the ",(0,a.jsx)(n.a,{href:"/docs/fundamentals/glossary#animations-in-inline-styling",children:"inline styling"}),", ",(0,a.jsx)(n.code,{children:"useAnimatedStyle"})," allows to ",(0,a.jsx)(n.a,{href:"/docs/fundamentals/animating-styles-and-props/#animating-styles",children:"access values stored in shared values"})," in the styles object it defines."]}),"\n",(0,a.jsxs)(n.p,{children:["For animating properties use ",(0,a.jsx)(n.a,{href:"/docs/core/useAnimatedProps",children:(0,a.jsx)(n.code,{children:"useAnimatedProps"})})," instead."]}),"\n",(0,a.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { useAnimatedStyle } from 'react-native-reanimated';\n\nfunction App() {\n  // highlight-next-line\n  const animatedStyles = useAnimatedStyle(() => {\n    return {\n      opacity: sv.value ? 1 : 0,\n    };\n    // highlight-next-line\n  });\n\n  // highlight-next-line\n  return <Animated.View style={[styles.box, animatedStyles]} />;\n}\n"})}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Type definitions"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"type DefaultStyle = ViewStyle | ImageStyle | TextStyle;\ntype DependencyList = Array<unknown> | undefined;\n\nexport function useAnimatedStyle<Style extends DefaultStyle>(\n  updater: () => Style,\n  dependencies?: DependencyList | null\n): Style;\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,a.jsx)(n.h4,{id:"updater",children:(0,a.jsx)(n.code,{children:"updater"})}),"\n",(0,a.jsx)(n.p,{children:"A function returning an object with style properties you want to animate. You can animate any style property available in React Native."}),"\n",(0,a.jsxs)(n.h4,{id:"dependencies-",children:[(0,a.jsx)(n.code,{children:"dependencies"})," ",(0,a.jsx)(o,{})]}),"\n",(0,a.jsx)(n.p,{children:"An optional array of dependencies."}),"\n",(0,a.jsxs)(n.p,{children:["Only relevant when using Reanimated ",(0,a.jsx)(n.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/guides/web-support#web-without-the-babel-plugin",children:"without the Babel plugin on the Web"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"useAnimatedStyle"})," returns an animated style object which has to be passed to the ",(0,a.jsx)(n.code,{children:"style"})," property of an ",(0,a.jsx)(n.a,{href:"/docs/fundamentals/glossary#animated-component",children:"Animated component"})," that you want to animate."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"useAnimatedStyle"})," mimics the behavior of ",(0,a.jsx)(n.code,{children:"StyleSheet"})," as much as possible. ",(0,a.jsx)(n.code,{children:"updater"})," callback returns a value that looks like a regular style object in which you can also use shared values."]}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n","\n",(0,a.jsx)(d,{src:r.A,component:l.A,showCode:!0}),"\n",(0,a.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Animated styles take precedence over React Native's static styles. All values specified in animated styles override values from static styles."}),"\n"]}),"\n",(0,a.jsx)(s,{children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"function App() {\n  const animatedStyles = useAnimatedStyle(() => ({\n    width: sv.value,\n  }));\n\n  return (\n    <Animated.View\n      style={[\n        // highlight-start\n        animatedStyles, // \u26a0\ufe0f overrides the static style width\n        { width: 100 },\n        // highlight-end\n      ]}\n    />\n  );\n}\n"})})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Animated styles don't follow the order in which they are specified in the style array. The last updated animated style is the one that takes effect."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Removing the animated style from the view doesn't unset values that were applied in the animated style. To unset these values, you need to manually set them to ",(0,a.jsx)(n.code,{children:"undefined"})," in the animated style."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Mutating shared values in ",(0,a.jsx)(n.code,{children:"useAnimatedStyle"}),"'s callback is an undefined behavior which may lead to infinite loops."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s,{children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"function App() {\n  const sv = useSharedValue(0);\n  const animatedStyles = useAnimatedStyle(() => {\n    // highlight-next-line\n    sv.value = withTiming(1); // Don't do this!\n    return { opacity: sv.value };\n  });\n}\n"})})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["You can apply the value returned from ",(0,a.jsx)(n.code,{children:"useAnimatedStyle"})," only to ",(0,a.jsx)(n.code,{children:"Animated"})," components. Passing the animated styles to non-animated component will result in an error."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Only define the dynamic part of your styles with ",(0,a.jsx)(n.code,{children:"useAnimatedStyle"})," and keep the static ones separately using ",(0,a.jsx)(n.code,{children:"StyleSheet"})," API or (if you really have to) with inline styles. That way you avoid lots of unnecessary style recalculations. Static and dynamic styles can be easily merged using the ",(0,a.jsx)(n.code,{children:"[]"})," syntax:"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s,{children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"function App() {\n  const animatedStyles = useAnimatedStyle(() => ({\n    offset: sv.value,\n  }));\n\n  // highlight-next-line\n  return <Animated.View style={[styles.box, animatedStyles]} />;\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#b58df1',\n  },\n});\n"})})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"You can share animated styles between components to avoid code duplication."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["The callback passed to the ",(0,a.jsx)(n.code,{children:"useAnimatedStyle"})," is first run on the ",(0,a.jsx)(n.a,{href:"/docs/fundamentals/glossary#javascript-thread",children:"JavaScript thread"})," and immediately after on the ",(0,a.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),". This may cause an error if you write your code as if it's running on UI thread only. To avoid this, you can use the ",(0,a.jsx)(n.code,{children:"global._WORKLET"})," variable to check if the code is running on the UI thread:"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s,{children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"function App() {\n  const animatedStyles = useAnimatedStyle(() => {\n    // highlight-next-line\n    if (global._WORKLET) {\n      // UI thread only code\n    } else {\n      // JS thread fallback code\n    }\n  });\n}\n"})})}),"\n",(0,a.jsx)(n.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,a.jsx)(c,{android:!0,ios:!0,web:!0})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}function y(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);