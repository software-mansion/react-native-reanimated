"use strict";(globalThis.webpackChunkdocs_reanimated=globalThis.webpackChunkdocs_reanimated||[]).push([[1666],{30620:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>l});var t=o(39471);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},86348:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"advanced/useComposedEventHandler","title":"useComposedEventHandler","description":"This is a hook that lets you compose useEvent-based event handlers (such as useAnimatedScrollHandler or your own custom ones) into a single, combined event handler.","source":"@site/versioned_docs/version-3.x/advanced/useComposedEventHandler.mdx","sourceDirName":"advanced","slug":"/advanced/useComposedEventHandler","permalink":"/react-native-reanimated/docs/3.x/advanced/useComposedEventHandler","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/versioned_docs/version-3.x/advanced/useComposedEventHandler.mdx","tags":[],"version":"3.x","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"useHandler","permalink":"/react-native-reanimated/docs/3.x/advanced/useHandler"},"next":{"title":"dispatchCommand","permalink":"/react-native-reanimated/docs/3.x/advanced/dispatchCommand"}}');var r=o(47671),s=o(30620);const a={sidebar_position:6},l="useComposedEventHandler",d={},i=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>handlers</code>",id:"handlers",level:4},{value:"Returns",id:"returns",level:3},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:o,PlatformCompatibility:t}=n;return o||m("Details",!0),t||m("PlatformCompatibility",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"usecomposedeventhandler",children:"useComposedEventHandler"})}),"\n",(0,r.jsxs)(n.p,{children:["This is a hook that lets you compose ",(0,r.jsx)(n.a,{href:"/docs/advanced/useEvent",children:"useEvent"}),"-based event handlers (such as ",(0,r.jsx)(n.a,{href:"/docs/scroll/useAnimatedScrollHandler",children:"useAnimatedScrollHandler"})," or your own custom ones) into a single, combined event handler."]}),"\n",(0,r.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import Animated, {\n  useAnimatedScrollHandler,\n  useComposedEventHandler,\n} from 'react-native-reanimated';\n\nfunction ComposedEventHandlerExample() {\n  const onScrollHandler1 = useAnimatedScrollHandler({\n    onScroll(e) {\n      console.log('Scroll handler 1 onScroll event');\n    },\n  });\n\n  const onScrollHandler2 = useAnimatedScrollHandler({\n    onScroll(e) {\n      console.log('Scroll handler 2 onScroll event');\n    },\n  });\n\n  // highlight-start\n  const composedHandler = useComposedEventHandler([\n    onScrollHandler1,\n    onScrollHandler2,\n  ]);\n  // highlight-end\n\n  return (\n    <View style={styles.container}>\n      {/* highlight-next-line */}\n      <Animated.ScrollView style={styles.scroll} onScroll={composedHandler}>\n        <Content />\n      </Animated.ScrollView>\n    </View>\n  );\n}\n"})}),"\n",(0,r.jsxs)(o,{children:[(0,r.jsx)("summary",{children:"Type definitions"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function useComposedEventHandler(\n  handlers: (EventHandlerProcessed<Event, Context> | null)[]\n): ComposedHandlerProcessed<Event, Context>;\n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsx)(n.h4,{id:"handlers",children:(0,r.jsx)(n.code,{children:"handlers"})}),"\n",(0,r.jsxs)(n.p,{children:["An array of event handlers created using ",(0,r.jsx)(n.a,{href:"/docs/advanced/useEvent",children:"useEvent"})," hook. ",(0,r.jsx)(n.code,{children:"useComposedEventHandler"})," hook reacts to any changes in given handlers and rebuilds whenever it is needed."]}),"\n",(0,r.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:["The hook returns a handler object that can be hooked into any ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/glossary#animated-component",children:(0,r.jsx)(n.code,{children:"Animated component"})}),".\nThe handler should be passed to a corresponding ",(0,r.jsx)(n.code,{children:"onEvent"})," prop (e.g. ",(0,r.jsx)(n.code,{children:"onScroll"}),' when working with scroll-related handlers). If your composed handler aggregates multiple events that have little in common, put it into a new property, e.g. "composedHandler". It will still work, but the best practice here would be to use several composed handlers for code clarity.']}),"\n",(0,r.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The hook returns a handler that combines functionalities of all the handlers given as an argument. This way, you can have more than one handler responding to a given event, as well as handle many different type events using just one object."}),"\n",(0,r.jsxs)(n.li,{children:["It will still work well when passed to multiple ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/glossary#animated-component",children:(0,r.jsx)(n.code,{children:"Animated components"})}),", firing event callbacks for each connected component."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,r.jsx)(t,{android:!0,ios:!0,web:!0})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);