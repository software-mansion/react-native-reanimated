"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[2008],{30620:(e,o,n)=>{n.d(o,{R:()=>a,x:()=>c});var t=n(39471);const r={},s=t.createContext(r);function a(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:o},e.children)}},67623:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"nodes/color","title":"color","description":"color","source":"@site/versioned_docs/version-1.x/nodes/color.md","sourceDirName":"nodes","slug":"/nodes/color","permalink":"/react-native-reanimated/docs/1.x/nodes/color","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/color.md","tags":[],"version":"1.x","frontMatter":{},"sidebar":"docs","previous":{"title":"call","permalink":"/react-native-reanimated/docs/1.x/nodes/call"},"next":{"title":"concat","permalink":"/react-native-reanimated/docs/1.x/nodes/concat"}}');var r=n(47671),s=n(30620);const a={},c=void 0,d={},l=[{value:"<code>color</code>",id:"color",level:2},{value:"Note: In order to interpolate color output values, use <code>interpolateColors</code> instead.",id:"note-in-order-to-interpolate-color-output-values-use-interpolatecolors-instead",level:5}];function i(e){const o={a:"a",code:"code",em:"em",h2:"h2",h5:"h5",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.h2,{id:"color",children:(0,r.jsx)(o.code,{children:"color"})}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-js",children:"color(red, green, blue, alpha);\n"})}),"\n",(0,r.jsxs)(o.p,{children:["Creates a color node in RGBA format, where the first three input nodes should have ",(0,r.jsx)(o.em,{children:"integer"})," values in the range 0-255 (consider using ",(0,r.jsx)(o.code,{children:"round"})," node if needed) and correspond to color components Red, Green and Blue respectively. Last input node should have a value between 0 and 1 and represents alpha channel (value ",(0,r.jsx)(o.code,{children:"1"})," means fully opaque and ",(0,r.jsx)(o.code,{children:"0"})," completely transparent). Alpha parameter can be omitted, then ",(0,r.jsx)(o.code,{children:"1"})," (fully opaque) is used as a default."]}),"\n",(0,r.jsxs)(o.p,{children:["The returned node can be mapped to view properties that represents color (e.g. ",(0,r.jsx)(o.a,{href:"https://facebook.github.io/react-native/docs/view-style-props.html#backgroundcolor",children:(0,r.jsx)(o.code,{children:"backgroundColor"})}),")."]}),"\n",(0,r.jsxs)(o.h5,{id:"note-in-order-to-interpolate-color-output-values-use-interpolatecolors-instead",children:["Note: In order to interpolate color output values, use ",(0,r.jsx)(o.a,{href:"/react-native-reanimated/docs/1.x/nodes/interpolateColors",children:(0,r.jsx)(o.code,{children:"interpolateColors"})})," instead."]})]})}function u(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}}}]);