"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[3929],{30620:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(39471);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}},38060:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/testing","title":"Testing with Jest","description":"Reanimated provides testing API, based on Jest. It allows user to mock web-based animations.","source":"@site/docs/guides/testing-with-jest.mdx","sourceDirName":"guides","slug":"/guides/testing","permalink":"/react-native-reanimated/docs/guides/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/guides/testing-with-jest.mdx","tags":[],"version":"current","frontMatter":{"id":"testing","sidebar_label":"Testing with Jest"},"sidebar":"tutorialSidebar","previous":{"title":"Supported style properties","permalink":"/react-native-reanimated/docs/guides/supported-properties"},"next":{"title":"Troubleshooting","permalink":"/react-native-reanimated/docs/guides/troubleshooting"}}');var i=n(47671),o=n(30620),r=n(72098);const a={id:"testing",sidebar_label:"Testing with Jest"},c="Testing with Jest",l={},d=[{value:"Reference",id:"reference",level:2},{value:"Setup",id:"setup",level:2},{value:"API",id:"api",level:2},{value:"Style checker",id:"style-checker",level:3},{value:"<code>expect(component).toHaveAnimatedStyle(expectedStyle)</code>",id:"expectcomponenttohaveanimatedstyleexpectedstyle",level:4},{value:"<code>expect(component).toHaveAnimatedStyle(expectedStyle, {shouldMatchAllProps: true})</code>",id:"expectcomponenttohaveanimatedstyleexpectedstyle-shouldmatchallprops-true",level:4},{value:"<code>expect(component).toHaveAnimatedProps(expectedProps)</code>",id:"expectcomponenttohaveanimatedpropsexpectedprops",level:4},{value:"<code>getDefaultStyle(component)</code>",id:"getdefaultstylecomponent",level:4},{value:"Timers",id:"timers",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Recommended testing library",id:"recommended-testing-library",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{CollapsibleCode:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CollapsibleCode",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"testing-with-jest",children:"Testing with Jest"})}),"\n",(0,i.jsx)(t.p,{children:"Reanimated provides testing API, based on Jest. It allows user to mock web-based animations."}),"\n",(0,i.jsx)(t.h2,{id:"reference",children:"Reference"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"test('reference', () => {\n  // some styles\n\n  const { getByTestId } = render(<AnimatedComponent />);\n  const view = getByTestId('view');\n  const button = getByTestId('button');\n\n  // highlight-next-line\n  expect(view).toHaveAnimatedStyle(style);\n\n  fireEvent.press(button);\n  jest.advanceTimersByTime(250); // if whole animation duration is a 500ms\n\n  style.width = 50; // value of component width after 250ms of animation\n  // highlight-next-line\n  expect(view).toHaveAnimatedStyle(style);\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,i.jsxs)(t.p,{children:["Add the following line to your ",(0,i.jsx)(t.code,{children:"jest-setup.js"})," file:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"require('react-native-reanimated').setUpTests();\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"setUpTests()"})," can take optional config argument. Default config is ",(0,i.jsx)(t.code,{children:"{ fps: 60 }"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["To be sure, check if your ",(0,i.jsx)(t.code,{children:"jest.config.js"})," file contains:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"...\npreset: 'react-native',\nsetupFilesAfterEnv: ['./jest-setup.js'],\n...\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"caution",children:(0,i.jsxs)(t.p,{children:["If you use Jest in a version ",(0,i.jsx)(t.strong,{children:"older than 28"}),", you should set ",(0,i.jsx)(t.code,{children:"setupFiles"})," property instead of ",(0,i.jsx)(t.code,{children:"setupFilesAfterEnv"})]})}),"\n",(0,i.jsx)(t.h2,{id:"api",children:"API"}),"\n",(0,i.jsx)(t.h3,{id:"style-checker",children:"Style checker"}),"\n",(0,i.jsx)(t.h4,{id:"expectcomponenttohaveanimatedstyleexpectedstyle",children:(0,i.jsx)(t.code,{children:"expect(component).toHaveAnimatedStyle(expectedStyle)"})}),"\n",(0,i.jsx)(t.p,{children:"Checking equality of selected styles with current component styles."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"component"})," - tested component."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"expectedStyle"})," - contains expected styles of testing component, for example ",(0,i.jsx)(t.code,{children:"{ width: 100 }"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"expectcomponenttohaveanimatedstyleexpectedstyle-shouldmatchallprops-true",children:(0,i.jsx)(t.code,{children:"expect(component).toHaveAnimatedStyle(expectedStyle, {shouldMatchAllProps: true})"})}),"\n",(0,i.jsx)(t.p,{children:"Checking equality of all current component styles with expected styles."}),"\n",(0,i.jsx)(t.h4,{id:"expectcomponenttohaveanimatedpropsexpectedprops",children:(0,i.jsx)(t.code,{children:"expect(component).toHaveAnimatedProps(expectedProps)"})}),"\n",(0,i.jsx)(t.p,{children:"Checking equality of selected props with current component props."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"component"})," - tested component."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"expectedProps"})," - contains expected props of testing component, for example ",(0,i.jsx)(t.code,{children:"{ text: 'name' }"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"getdefaultstylecomponent",children:(0,i.jsx)(t.code,{children:"getDefaultStyle(component)"})}),"\n",(0,i.jsx)(t.p,{children:"Gets all styles of tested component."}),"\n",(0,i.jsx)(t.h3,{id:"timers",children:"Timers"}),"\n",(0,i.jsxs)(t.p,{children:["You can use Jest's fake timers to control animation progress.\nCheck ",(0,i.jsx)(t.a,{href:"https://jestjs.io/docs/timer-mocks",children:"the full guide about mocking timers on Jest documentation website"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"jest.useFakeTimers();\n// call animation\njest.runAllTimers();\n"})}),"\n",(0,i.jsxs)(t.p,{children:["If you want more control over animation, you can use ",(0,i.jsx)(t.code,{children:"jest.advanceTimersByTime"})," to move to a certain point in the animation:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"jest.useFakeTimers();\n// call animation\njest.advanceTimersByTime(250);\n// make assertions on what you expect the styles of a component should be after 250ms\n"})}),"\n",(0,i.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n,{src:r.A,showLines:[54,70]}),"\n",(0,i.jsxs)(t.p,{children:["More examples from ",(0,i.jsx)(t.code,{children:"react-native-reanimated"})," repository:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/software-mansion/react-native-reanimated/tree/main/packages/react-native-reanimated/__tests__/SharedValue.test.tsx",children:"SharedValue.test.tsx"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-reanimated/__tests__/Animation.test.tsx",children:"Animation.test.tsx"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"remarks",children:"Remarks"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Tests must run with Node 16 or newer."}),"\n",(0,i.jsxs)(t.li,{children:["Testing ",(0,i.jsx)(t.code,{children:"react-native-svg"})," props is not supported."]}),"\n",(0,i.jsx)(t.li,{children:"If you have custom babel configuration for testing, make sure that Reanimated's babel plugin is enabled in that environment."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"recommended-testing-library",children:"Recommended testing library"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://testing-library.com/docs/react-native-testing-library/intro",children:"@testing-library/react-native"})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://react-hooks-testing-library.com/",children:"@testing-library/react-hooks"})," - for dealing with hooks"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},72098:(e,t,n)=>{n.d(t,{A:()=>s});const s="import React from 'react';\nimport { View, Button } from 'react-native';\nimport Animated, {\n  useAnimatedStyle,\n  withTiming,\n  useSharedValue,\n  SharedValue,\n} from 'react-native-reanimated';\n\ninterface Props {\n  sharedValue: SharedValue<number>;\n}\n\nconst AnimatedSharedValueComponent = (props: Props) => {\n  const widthSV = props.sharedValue;\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(widthSV.value, { duration: 500 }),\n    };\n  });\n\n  return (\n    <View style={{ flex: 1, flexDirection: 'column' }}>\n      <Animated.View\n        testID=\"view\"\n        style={[\n          { width: 0, height: 80, backgroundColor: 'black', margin: 30 },\n          style,\n        ]}\n      />\n      <Button\n        testID=\"button\"\n        title=\"toggle\"\n        onPress={() => {\n          widthSV.value = 100;\n        }}\n      />\n    </View>\n  );\n};\n\nconst AnimatedComponent = () => {\n  return <AnimatedSharedValueComponent sharedValue={useSharedValue(0)} />;\n};\n\nconst getDefaultStyle = () => ({\n  width: 0,\n  height: 80,\n  backgroundColor: 'black',\n  margin: 30,\n});\n\ndescribe('Tests of animations', () => {\n  test('withTiming animation', () => {\n    const style = getDefaultStyle();\n\n    const { getByTestId } = render(<AnimatedComponent />);\n    const view = getByTestId('view');\n    const button = getByTestId('button');\n\n    expect(view.props.style.width).toBe(0);\n    expect(view).toHaveAnimatedStyle(style);\n\n    fireEvent.press(button);\n    jest.advanceTimersByTime(600);\n\n    style.width = 100;\n    expect(view).toHaveAnimatedStyle(style);\n  });\n});\n\n// The 'declare const' section is used because the example workspace doesn't require Jest or Jest types installed.\n// This prevents TypeScript from throwing errors about 'expect', 'test', and other Jest globals.\n// Since we don't want to install '@types/jest', we declare these functions as 'any'.\n\ndeclare const test: any;\ndeclare const expect: any;\ndeclare const describe: any;\ndeclare const fireEvent: any;\ndeclare const render: any;\ndeclare const jest: any;\n\n//\n"}}]);