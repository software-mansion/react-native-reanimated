"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[6319],{7627:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"api/hooks/useAnimatedRef","title":"useAnimatedRef","description":"This hook provides extended functionality of a standard ref. You can assign it to some component like ` and then access the target component via animatedRef.current. Besides, on the UI thread animated reference also contains the view tag of the target. It can be accessed like this: const viewTag = animatedRef(). This comes handy when using native methods like scrollTo and measure`.","source":"@site/versioned_docs/version-2.x/api/hooks/useAnimatedRef.md","sourceDirName":"api/hooks","slug":"/api/hooks/useAnimatedRef","permalink":"/react-native-reanimated/docs/2.x/api/hooks/useAnimatedRef","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useAnimatedRef.md","tags":[],"version":"2.x","frontMatter":{"id":"useAnimatedRef","title":"useAnimatedRef","sidebar_label":"useAnimatedRef"},"sidebar":"docs","previous":{"title":"useAnimatedReaction","permalink":"/react-native-reanimated/docs/2.x/api/hooks/useAnimatedReaction"},"next":{"title":"useAnimatedScrollHandler","permalink":"/react-native-reanimated/docs/2.x/api/hooks/useAnimatedScrollHandler"}}');var s=t(47671),i=t(30620);const o={id:"useAnimatedRef",title:"useAnimatedRef",sidebar_label:"useAnimatedRef"},d=void 0,r={},c=[{value:"Example",id:"example",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["This hook provides extended functionality of a standard ref. You can assign it to some component like ",(0,s.jsx)(n.code,{children:"<View ref={ animatedRef } />"})," and then access the target component via ",(0,s.jsx)(n.code,{children:"animatedRef.current"}),". Besides, on the UI thread animated reference also contains the view tag of the target. It can be accessed like this: ",(0,s.jsx)(n.code,{children:"const viewTag = animatedRef()"}),". This comes handy when using native methods like ",(0,s.jsx)(n.code,{children:"scrollTo"})," and ",(0,s.jsx)(n.code,{children:"measure"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const Comp = () => {\n  const aref = useAnimatedRef();\n\n  useDerivedValue(() => {\n    const viewTag = aref();\n    // ...\n  });\n\n  const componentRef = aref.current;\n  // ...\n\n  return <View ref={aref} />;\n};\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},30620:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var a=t(39471);const s={},i=a.createContext(s);function o(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);