"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[8200],{53408:(e,n,t)=>{t.d(n,{A:()=>a});const a="import React from 'react';\nimport { Button, StyleSheet, View, TextInput } from 'react-native';\nimport Animated, {\n  MeasuredDimensions,\n  measure,\n  useAnimatedProps,\n  useAnimatedRef,\n  useSharedValue,\n  withTiming,\n} from 'react-native-reanimated';\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n\nexport default function App() {\n  const animatedRef = useAnimatedRef<Animated.View>();\n  const width = useSharedValue<number>(100);\n  const text = useSharedValue(100);\n\n  const handlePress = () => {\n    width.value = withTiming(width.value + 50, {}, () => {\n      // highlight-next-line\n      const measurement: MeasuredDimensions | null = measure(animatedRef);\n\n      if (measurement === null) {\n        return;\n      }\n\n      text.value = Math.floor(measurement.width);\n    });\n  };\n\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      text: `width: ${text.value}`,\n      defaultValue: `width: ${text.value}`,\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View ref={animatedRef} style={{ ...styles.box, width }} />\n      <AnimatedTextInput animatedProps={animatedProps} style={styles.label} />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  box: {\n    height: 100,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n  },\n  label: {\n    fontSize: 24,\n    marginVertical: 16,\n    color: '#b58df1',\n    textAlign: 'center',\n  },\n});\n"},70463:(e,n,t)=>{t.d(n,{A:()=>h});var a=t(28313),s=t(8589),r=t(90424),i=t(14442),d=t(19727),o=t(47671);const l=d.default.createAnimatedComponent(a.A),c={code:"function MeasureBasicTsx1(){const{measure,animatedRef,text}=this.__closure;const measurement=measure(animatedRef);if(measurement===null){return;}text.value=Math.floor(measurement.width);}"},u={code:'function MeasureBasicTsx2(){const{text}=this.__closure;return{text:"width: "+text.value,defaultValue:"width: "+text.value};}'};function h(){const e=(0,d.useAnimatedRef)(),n=(0,d.useSharedValue)(100),t=(0,d.useSharedValue)(100),a=(0,d.useAnimatedProps)(function({_worklet_202411436330_init_data:e,text:n}){const t=function(){return{text:`width: ${n.value}`,defaultValue:`width: ${n.value}`}};return t.__closure={text:n},t.__workletHash=202411436330,t.__initData=e,t}({_worklet_202411436330_init_data:u,text:t}));return(0,o.jsxs)(s.A,{style:m.container,children:[(0,o.jsx)(d.default.View,{ref:e,style:{...m.box,width:n}}),(0,o.jsx)(l,{animatedProps:a,style:m.label}),(0,o.jsx)(r.A,{onPress:()=>{n.value=(0,d.withTiming)(n.value+50,{},function({_worklet_2769144099817_init_data:e,measure:n,animatedRef:t,text:a}){const s=function(){const e=n(t);null!==e&&(a.value=Math.floor(e.width))};return s.__closure={measure:n,animatedRef:t,text:a},s.__workletHash=2769144099817,s.__initData=e,s}({_worklet_2769144099817_init_data:c,measure:d.measure,animatedRef:e,text:t}))},title:"Click me"})]})}const m=i.A.create({container:{flex:1,alignItems:"center"},box:{height:100,backgroundColor:"#b58df1",borderRadius:20},label:{fontSize:24,marginVertical:16,color:"#b58df1",textAlign:"center"}})},88724:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"advanced/measure","title":"measure","description":"measure lets you synchronously get the dimensions and position of a view on the screen, all on the UI thread.","source":"@site/docs/advanced/measure.mdx","sourceDirName":"advanced","slug":"/advanced/measure","permalink":"/react-native-reanimated/docs/advanced/measure","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/advanced/measure.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Advanced APIs","permalink":"/react-native-reanimated/docs/category/advanced-apis"},"next":{"title":"useAnimatedReaction","permalink":"/react-native-reanimated/docs/advanced/useAnimatedReaction"}}');var s=t(47671),r=t(30620),i=t(70463),d=t(53408);const o={sidebar_position:1},l="measure",c={},u=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>animatedRef</code>",id:"animatedref",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:t,Indent:a,InteractiveExample:o,PlatformCompatibility:l}=n;return t||x("Details",!0),a||x("Indent",!0),o||x("InteractiveExample",!0),l||x("PlatformCompatibility",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"measure",children:"measure"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"measure"})," lets you synchronously get the dimensions and position of a view on the screen, all on the ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import { measure } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  const handlePress = () => {\n    runOnUI(() => {\n      // highlight-next-line\n      const measurement = measure(animatedRef);\n      if (measurement === null) {\n        return;\n      }\n      // ...\n    })();\n  };\n\n  return <Animated.View ref={animatedRef} />;\n}\n"})}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Type definitions"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface MeasuredDimensions {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  pageX: number;\n  pageY: number;\n}\n\nfunction measure<T extends Component>(\n  animatedRef: AnimatedRef<T>\n): MeasuredDimensions | null;\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsx)(n.h4,{id:"animatedref",children:(0,s.jsx)(n.code,{children:"animatedRef"})}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.a,{href:"/docs/core/useAnimatedRef#returns",children:"animated ref"})," connected to the component you'd want to get the measurements from. The animated ref has to be passed either to an ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#animated-component",children:"Animated component"})," or a React Native built-in component."]}),"\n",(0,s.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"measure"})," returns an object containing these fields:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"x"})," a number representing X coordinate relative to the parent component,"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"y"})," a number representing Y coordinate relative to the parent component,"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"width"})," a number representing the width of the component,"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"height"})," a number representing the height of the component,"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pageX"})," a number representing X coordinate relative to the screen,"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pageY"})," a number representing Y coordinate relative to the screen,"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["or returns ",(0,s.jsx)(n.code,{children:"null"})," when the measurement couldn't be performed."]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n","\n",(0,s.jsx)(o,{src:d.A,component:i.A}),"\n",(0,s.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"measure"})," is implemented only on the ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),". When using ",(0,s.jsx)(n.code,{children:"measure"})," inside ",(0,s.jsx)(n.a,{href:"https://react.dev/learn/responding-to-events#adding-event-handlers",children:"event handlers"}),", it has to be wrapped with the ",(0,s.jsx)(n.a,{href:"https://docs.swmansion.com/react-native-worklets/docs/threading/runOnUI",children:(0,s.jsx)(n.code,{children:"runOnUI"})})," function."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"useAnimatedStyle"})," function is first evaluated on the ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#javascript-thread",children:"JavaScript thread"})," just before the views are attached to the native side. For this reason, to safely use the measure within ",(0,s.jsx)(n.code,{children:"useAnimatedStyle"}),", a condition similar to the one below must be added to the code:"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"function App() {\n  const animatedStyles = useAnimatedStyle(() => {\n    // highlight-next-line\n    if (_WORKLET) {\n      // safely use measure\n      const measurement = measure(animatedRef);\n    }\n  });\n}\n"})}),(0,s.jsxs)(n.p,{children:["Consecutive runs of ",(0,s.jsx)(n.code,{children:"useAnimatedStyle"})," are executed on the UI thread."]})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["When you only need the dimensions of the component and won't use the measurements during animation, consider using the ",(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/view#onlayout",children:(0,s.jsx)(n.code,{children:"onLayout"})})," property instead."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Sometimes, ",(0,s.jsx)(n.code,{children:"measure"})," returns ",(0,s.jsx)(n.code,{children:"null"})," (e.g., when the ",(0,s.jsx)(n.code,{children:"ref"})," hasn't yet attached to the view). It's best to add a ",(0,s.jsx)(n.code,{children:"null"})," check after the measurement for added safety."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(a,{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"const animatedRef = useAnimatedRef();\n\nconst handlePress = () => {\n  runOnUI(() => {\n    const measurement = measure(animatedRef);\n\n    // highlight-start\n    if (measurement === null) {\n      return;\n    }\n    // highlight-end\n    // ...\n  })();\n};\n"})})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"measure"})," can be used only on rendered components. For instance, attempting to ",(0,s.jsx)(n.code,{children:"measure"})," off-screen items in a ",(0,s.jsx)(n.code,{children:"FlatList"})," will return a ",(0,s.jsx)(n.code,{children:"null"})," value."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"measure"})," isn't available with the Remote JS Debugger. We highly recommend using Chrome DevTools (also known as ",(0,s.jsx)(n.code,{children:"chrome://inspect"}),") for debugging React Native apps."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,s.jsx)(l,{android:!0,ios:!0,web:!0})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},90424:(e,n,t)=>{t.d(n,{A:()=>l});var a=t(39471),s=t(14442),r=t(21844),i=t(31071),d=a.forwardRef(((e,n)=>{var t=e.accessibilityLabel,s=e.color,d=e.disabled,l=e.onPress,c=e.testID,u=e.title;return a.createElement(r.A,{accessibilityLabel:t,accessibilityRole:"button",disabled:d,focusable:!d,onPress:l,ref:n,style:[o.button,s&&{backgroundColor:s},d&&o.buttonDisabled],testID:c},a.createElement(i.A,{style:[o.text,d&&o.textDisabled]},u))}));d.displayName="Button";var o=s.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const l=d}}]);