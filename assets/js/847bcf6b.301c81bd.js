"use strict";(globalThis.webpackChunkdocs_reanimated=globalThis.webpackChunkdocs_reanimated||[]).push([[3251],{30620:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(39471);const a={},r=i.createContext(a);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},32446:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"shared-element-transitions/overview","title":"Shared Element Transitions","description":"Shared Element Transitions is an experimental feature, not recommended for production use yet. We are waiting for your feedback to improve implementation.","source":"@site/versioned_docs/version-3.x/shared-element-transitions/overview.mdx","sourceDirName":"shared-element-transitions","slug":"/shared-element-transitions/overview","permalink":"/react-native-reanimated/docs/3.x/shared-element-transitions/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/versioned_docs/version-3.x/shared-element-transitions/overview.mdx","tags":[],"version":"3.x","frontMatter":{"id":"overview","title":"Shared Element Transitions","sidebar_label":"Overview"},"sidebar":"tutorialSidebar","previous":{"title":"Shared Element Transitions","permalink":"/react-native-reanimated/docs/3.x/category/shared-element-transitions"},"next":{"title":"Threading","permalink":"/react-native-reanimated/docs/3.x/category/threading"}}');var a=t(47671),r=t(30620);const o="import * as React from 'react';\nimport { View, Text, StyleSheet, Pressable, Dimensions } from 'react-native';\nimport type { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport Animated, { FadeIn } from 'react-native-reanimated';\n\ntype StackParamList = {\n  Home: undefined;\n  Details: { tag: Tag };\n};\n\nconst Stack = createNativeStackNavigator<StackParamList>();\n\nconst gallery = {\n  florence: {\n    color: '#b58df1',\n    title: 'Beautiful city of Florence',\n    description:\n      'Florence was a centre of medieval European trade and finance and one of the wealthiest cities of that era.',\n  },\n  countryside: {\n    color: '#82cab2',\n    title: 'Tuscan countryside',\n    description:\n      \"Tuscany's picturesque hills attract millions of tourists each year craving postcard-perfect views.\",\n  },\n  dawn: {\n    color: '#87cce8',\n    title: 'Tuscany at dawn',\n    description:\n      'Tuscany is known for its magical mists in the morning and at sunset.',\n  },\n};\n\ntype Tag = keyof typeof gallery;\n\nfunction HomeScreen({\n  navigation,\n}: NativeStackScreenProps<StackParamList, 'Home'>) {\n  const chips = ['Italy', 'Tourism', 'Nature'];\n  const goToDetails = (tag: Tag) => {\n    navigation.navigate('Details', { tag });\n  };\n\n  const { width } = Dimensions.get('screen');\n\n  return (\n    <Animated.ScrollView style={styles.homeContainer}>\n      <Pressable onPress={() => goToDetails('countryside')}>\n        <Animated.View\n          sharedTransitionTag={'countryside'}\n          style={[\n            styles.imageOne,\n            { backgroundColor: gallery.countryside.color },\n          ]}\n        />\n      </Pressable>\n      <View style={styles.row}>\n        <Pressable onPress={() => goToDetails('florence')}>\n          <Animated.View\n            sharedTransitionTag={'florence'}\n            style={[\n              { width: width / 2 - 35 },\n              styles.imageTwo,\n              { backgroundColor: gallery.florence.color },\n            ]}\n          />\n        </Pressable>\n        <Pressable onPress={() => goToDetails('dawn')}>\n          <Animated.View\n            sharedTransitionTag={'dawn'}\n            style={[\n              { width: width / 2 - 35 },\n              styles.imageThree,\n              { backgroundColor: gallery.dawn.color },\n            ]}\n          />\n        </Pressable>\n      </View>\n      <Text style={styles.header}>Tuscany</Text>\n      <View style={styles.row}>\n        {chips.map((chip) => (\n          <Text key={chip} style={styles.chip}>\n            {chip}\n          </Text>\n        ))}\n      </View>\n      <Text style={styles.text}>\n        Tuscany is known for its landscapes, history, artistic legacy, and its\n        influence on high culture. It is regarded as the birthplace of the\n        Italian Renaissance and of the foundations of the Italian language.\n      </Text>\n    </Animated.ScrollView>\n  );\n}\n\nfunction DetailsScreen({\n  route,\n  navigation,\n}: NativeStackScreenProps<StackParamList, 'Details'>) {\n  const { tag } = route.params;\n\n  return (\n    <View style={styles.detailContainer}>\n      <Animated.View\n        sharedTransitionTag={tag}\n        style={[styles.detailsImage, { backgroundColor: gallery[tag].color }]}\n      />\n      <View style={styles.wrapper}>\n        <Animated.Text\n          entering={FadeIn.delay(150).duration(1000)}\n          style={[styles.header, styles.font28]}>\n          {gallery[tag].title}\n        </Animated.Text>\n        <Animated.Text\n          entering={FadeIn.delay(300).duration(1000)}\n          style={styles.text}>\n          {gallery[tag].description}\n        </Animated.Text>\n        <Animated.View\n          entering={FadeIn.delay(500).duration(1000)}\n          style={styles.callToActionWrapper}>\n          <Pressable\n            style={styles.callToAction}\n            onPress={() => navigation.goBack()}>\n            <Text style={styles.callToActionText}>see for yourself</Text>\n          </Pressable>\n        </Animated.View>\n      </View>\n    </View>\n  );\n}\n\nexport default function GalleryExample() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n      }}>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Details\" component={DetailsScreen} />\n    </Stack.Navigator>\n  );\n}\n\nconst styles = StyleSheet.create({\n  homeContainer: {\n    flex: 1,\n    marginHorizontal: 25,\n  },\n  detailContainer: {\n    flex: 1,\n  },\n  wrapper: {\n    flex: 1,\n    marginHorizontal: 25,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  header: {\n    fontSize: 40,\n    fontWeight: 'bold',\n    marginTop: 25,\n    marginBottom: 12,\n  },\n  text: {\n    fontSize: 16,\n    marginTop: 8,\n  },\n  font28: {\n    fontSize: 28,\n  },\n  chip: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    padding: 8,\n    width: 90,\n    borderRadius: 5,\n    textAlign: 'center',\n    marginRight: 8,\n  },\n  detailsImage: {\n    width: '100%',\n    height: 400,\n  },\n  callToActionWrapper: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 30,\n  },\n  callToAction: {\n    backgroundColor: '#add8e6',\n    padding: 16,\n    width: 250,\n    borderRadius: 5,\n  },\n  callToActionText: {\n    color: '#015571',\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  imageOne: {\n    width: '100%',\n    height: 160,\n    marginTop: 20,\n    borderRadius: 15,\n  },\n  imageTwo: {\n    height: 250,\n    marginTop: 20,\n    borderRadius: 15,\n  },\n  imageThree: {\n    height: 250,\n    marginTop: 20,\n    marginLeft: 20,\n    borderRadius: 15,\n  },\n});\n",s={id:"overview",title:"Shared Element Transitions",sidebar_label:"Overview"},l=void 0,c={},d=[{value:"Reference",id:"reference",level:2},{value:"Overview",id:"overview",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Custom animation",id:"custom-animation",level:2},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform Compatibility",id:"platform-compatibility",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{CollapsibleCode:t,ExampleVideo:i,PlatformCompatibility:s}=n;return t||g("CollapsibleCode",!0),i||g("ExampleVideo",!0),s||g("PlatformCompatibility",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsx)(n.p,{children:"Shared Element Transitions is an experimental feature, not recommended for production use yet. We are waiting for your feedback to improve implementation."})}),"\n",(0,a.jsx)(n.p,{children:"Shared Element Transition allows you to smoothly transform a component from one screen into a component on another screen."}),"\n",(0,a.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import Animated from \'react-native-reanimated\';\n\nconst Stack = createNativeStackNavigator();\n\nfunction One({ navigation }) {\n  return (\n    <>\n      <Animated.View\n        // highlight-start\n        sharedTransitionTag="sharedTag"\n        // highlight-end\n      />\n      <Button title="Two" onPress={() => navigation.navigate(\'Two\')} />\n    </>\n  );\n}\n\nfunction Two({ navigation }) {\n  return (\n    <>\n      <Animated.View\n        // highlight-start\n        sharedTransitionTag="sharedTag"\n        // highlight-end\n      />\n      <Button title="One" onPress={() => navigation.navigate(\'One\')} />\n    </>\n  );\n}\n\nexport default function SharedElementExample() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{ headerShown: true }}>\n        <Stack.Screen name="One" component={One} />\n        <Stack.Screen name="Two" component={Two} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:["When Reanimated detects that a component with a ",(0,a.jsx)(n.code,{children:"sharedTransitionTag"})," is being mounted or unmounted, it tries to find the last registered view with the same ",(0,a.jsx)(n.code,{children:"sharedTransitionTag"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"If it finds two matching components, it takes a snapshot of the styles for both components, and both shared views are detached from their parent and attached to a temporary transition container for the duration of the animation."}),"\n",(0,a.jsx)(n.p,{children:"After the animation is complete, they are attached back to their original parent."}),"\n",(0,a.jsxs)(n.p,{children:["If you don't create a custom animation, all snapshot properties, including ",(0,a.jsx)(n.code,{children:"width"}),", ",(0,a.jsx)(n.code,{children:"height"}),", ",(0,a.jsx)(n.code,{children:"originX"}),", ",(0,a.jsx)(n.code,{children:"originY"}),", and ",(0,a.jsx)(n.code,{children:"transformMatrix"}),", are animated by default with a duration of 500ms using the ",(0,a.jsx)(n.a,{href:"/docs/animations/withTiming/",children:(0,a.jsx)(n.code,{children:"withTiming"})})," animation."]}),"\n",(0,a.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,a.jsxs)(n.p,{children:["To create a shared transition animation between two components on different screens, simply assign the same ",(0,a.jsx)(n.code,{children:"sharedTransitionTag"})," to both components. When you navigate between screens, the shared transition animation will automatically play."]}),"\n",(0,a.jsxs)(n.p,{children:["If you want to use more than one shared view on the same screen, be sure to assign a ",(0,a.jsx)(n.strong,{children:"unique"})," shared tag to each component."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Screen A"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:"{2}",children:"<View\n  sharedTransitionTag=\"sharedTag\"\n  style={{ width: 150, height: 150, backgroundColor: 'green' }}\n/>\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Screen B"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:"{2}",children:"<View\n  sharedTransitionTag=\"sharedTag\"\n  style={{ width: 100, height: 100, backgroundColor: 'green' }}\n/>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"custom-animation",children:"Custom animation"}),"\n",(0,a.jsxs)(n.p,{children:["You can create a custom animation by using ",(0,a.jsx)(n.code,{children:"SharedTransition.custom"})," for regular animations or ",(0,a.jsx)(n.code,{children:"SharedTransition.progressAnimation"})," for progress-based animations."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { SharedTransition } from 'react-native-reanimated';\n\nconst transition = SharedTransition.custom((values) => {\n  'worklet';\n  return {\n    height: withSpring(values.targetHeight),\n    width: withSpring(values.targetWidth),\n  };\n})\n  .progressAnimation((values, progress) => {\n    'worklet';\n    const getValue = (\n      progress: number,\n      target: number,\n      current: number\n    ): number => {\n      return progress * (target - current) + current;\n    };\n    return {\n      width: getValue(progress, values.targetWidth, values.currentWidth),\n      height: getValue(progress, values.targetHeight, values.currentHeight),\n    };\n  })\n  .defaultTransitionType(SharedTransitionType.ANIMATION);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["By combining these methods and setting ",(0,a.jsx)(n.code,{children:"defaultTransitionType(SharedTransitionType.ANIMATION)"}),", you specify that the custom animation will be used for screen transitions, while the progress-based animation will be applied during swipe back gesture (",(0,a.jsx)(n.strong,{children:"iOS only"}),")."]}),"\n",(0,a.jsxs)(n.p,{children:["Setting ",(0,a.jsx)(n.code,{children:"defaultTransitionType(SharedTransitionType.PROGRESS_ANIMATION)"})," will apply progress-based animation in both scenarios."]}),"\n",(0,a.jsxs)(n.p,{children:["Then, to use it, simply pass your custom animation as ",(0,a.jsx)(n.code,{children:"sharedTransitionStyle"})," prop to both your screen's components."]}),"\n",(0,a.jsxs)(n.p,{children:["If you want even more customization, you can pass two different custom animations to two different component, as long as the components share the same ",(0,a.jsx)(n.code,{children:"sharedTransitionTag"}),". In that case animation passed to component A will run when switching from A -> B, and animations passed to component B will run when switching from B -> A."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"<View\n  sharedTransitionTag=\"reanimatedTransition\"\n  // highlight-next-line\n  sharedTransitionStyle={transition}\n  style={{ backgroundColor: 'blue', width: 200, height: 100 }}\n/>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n","\n",(0,a.jsx)(i,{sources:{android:"/react-native-reanimated/recordings/android_shared_element_transition.mov",ios:"/react-native-reanimated/recordings/ios_shared_element_transition.mov"}}),"\n",(0,a.jsx)(t,{src:o,showLines:[48,78]}),"\n",(0,a.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Only the native stack is supported."}),"\n",(0,a.jsxs)(n.li,{children:["You can only animate ",(0,a.jsx)(n.code,{children:"width"}),", ",(0,a.jsx)(n.code,{children:"height"}),", ",(0,a.jsx)(n.code,{children:"originX"}),", ",(0,a.jsx)(n.code,{children:"originY"}),", and ",(0,a.jsx)(n.code,{children:"transformMatrix"})," properties when using the shared transition."]}),"\n",(0,a.jsx)(n.li,{children:"The layout for shared view children is not computed during the transition."}),"\n",(0,a.jsxs)(n.li,{children:["The current implementation supports ",(0,a.jsx)(n.strong,{children:"only"})," the old React Native architecture (",(0,a.jsx)(n.strong,{children:"Paper"}),")."]}),"\n",(0,a.jsx)(n.li,{children:"In the future we will introduce support for the new React Native architecture (Fabric)."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"platform-compatibility",children:"Platform Compatibility"}),"\n",(0,a.jsx)(s,{android:!0,ios:!0})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}function g(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);