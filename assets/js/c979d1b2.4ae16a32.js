"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[3834],{12552:(e,t,n)=>{n.d(t,{A:()=>l});var a=n(8589),s=n(90424),i=n(14442),r=n(19727),o=n(47671);const d=["#FFE780","#87CCE8","#FFA3A1","#B1DFD0","#B58DF1"],c={code:"function SetNativePropsTsx1(){const{setNativeProps,animatedRef,COLORS}=this.__closure;setNativeProps(animatedRef,{backgroundColor:COLORS[Math.floor(Math.random()*COLORS.length)]});}"};function l(){const e=(0,r.useAnimatedRef)();return(0,o.jsxs)(a.A,{style:h.container,children:[(0,o.jsx)(r.default.View,{ref:e,style:h.box}),(0,o.jsx)(s.A,{title:"change color",onPress:()=>{(0,r.runOnUI)(function({_worklet_15241061380439_init_data:e,setNativeProps:t,animatedRef:n,COLORS:a}){const s=function(){t(n,{backgroundColor:a[Math.floor(Math.random()*a.length)]})};return s.__closure={setNativeProps:t,animatedRef:n,COLORS:a},s.__workletHash=0xddc960cb157,s.__initData=e,s}({_worklet_15241061380439_init_data:c,setNativeProps:r.setNativeProps,animatedRef:e,COLORS:d}))()}})]})}const h=i.A.create({container:{flex:1,alignItems:"center",justifyContent:"center"},box:{height:120,width:120,backgroundColor:"#B58DF1",borderRadius:20,marginBottom:30}})},50526:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"advanced/setNativeProps","title":"setNativeProps","description":"setNativeProps lets you imperatively update component properties.","source":"@site/versioned_docs/version-3.x/advanced/setNativeProps.mdx","sourceDirName":"advanced","slug":"/advanced/setNativeProps","permalink":"/react-native-reanimated/docs/3.x/advanced/setNativeProps","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/setNativeProps.mdx","tags":[],"version":"3.x","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"dispatchCommand","permalink":"/react-native-reanimated/docs/3.x/advanced/dispatchCommand"},"next":{"title":"makeMutable","permalink":"/react-native-reanimated/docs/3.x/advanced/makeMutable"}}');var s=n(47671),i=n(30620),r=n(12552),o=n(77159);const d={sidebar_position:8},c="setNativeProps",l={},h=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>animatedRef</code>",id:"animatedref",level:4},{value:"<code>updates</code>",id:"updates",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components},{Details:n,InteractiveExample:a,PlatformCompatibility:d}=t;return n||u("Details",!0),a||u("InteractiveExample",!0),d||u("PlatformCompatibility",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"setnativeprops",children:"setNativeProps"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"setNativeProps"})," lets you imperatively update component properties."]}),"\n",(0,s.jsxs)(t.admonition,{type:"caution",children:[(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"setNativeProps"})," is an escape hatch for specific edge-cases."]}),(0,s.jsxs)(t.p,{children:["You should always reach for ",(0,s.jsx)(t.a,{href:"/docs/core/useAnimatedStyle",children:(0,s.jsx)(t.code,{children:"useAnimatedStyle"})})," and ",(0,s.jsx)(t.a,{href:"/docs/core/useAnimatedProps",children:(0,s.jsx)(t.code,{children:"useAnimatedProps"})})," first when animating styles or properties."]})]}),"\n",(0,s.jsx)(t.h2,{id:"reference",children:"Reference"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"import { setNativeProps } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  const tap = Gesture.Tap().onEnd(() => {\n    // highlight-start\n    setNativeProps(animatedRef, { text: '' });\n    // highlight-end\n  });\n\n  return <TextInput ref={animatedRef} />;\n}\n"})}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"Type definitions"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"function setNativeProps<T extends Component>(\n  animatedRef: AnimatedRef<T>,\n  updates: StyleProps\n) => void;\n"})})]}),"\n",(0,s.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsx)(t.h4,{id:"animatedref",children:(0,s.jsx)(t.code,{children:"animatedRef"})}),"\n",(0,s.jsxs)(t.p,{children:["An ",(0,s.jsx)(t.a,{href:"/docs/core/useAnimatedRef#returns",children:"animated ref"})," connected to the component you'd want to update. The animated ref has to be passed either to an ",(0,s.jsx)(t.a,{href:"/docs/fundamentals/glossary#animated-component",children:"Animated component"})," or a React Native built-in component."]}),"\n",(0,s.jsx)(t.h4,{id:"updates",children:(0,s.jsx)(t.code,{children:"updates"})}),"\n",(0,s.jsxs)(t.p,{children:["An object with properties you want to update. These could be both style props (eg. ",(0,s.jsx)(t.code,{children:"width"}),", ",(0,s.jsx)(t.code,{children:"backgroundColor"}),") and regular props (eg. ",(0,s.jsx)(t.code,{children:"text"}),")."]}),"\n",(0,s.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"setNativeProps"})," returns ",(0,s.jsx)(t.code,{children:"undefined"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n","\n",(0,s.jsx)(a,{src:o.A,component:r.A}),"\n",(0,s.jsx)(t.h2,{id:"remarks",children:"Remarks"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["You should always reach for ",(0,s.jsx)(t.a,{href:"/docs/core/useAnimatedStyle",children:(0,s.jsx)(t.code,{children:"useAnimatedStyle"})})," and ",(0,s.jsx)(t.a,{href:"/docs/core/useAnimatedProps",children:(0,s.jsx)(t.code,{children:"useAnimatedProps"})})," first when animating styles or properties."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"setNativeProps"})," is supposed to only be used on the ",(0,s.jsx)(t.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"setNativeProps"})," function was created to allow updating props imperatively from gesture handlers. Because in other cases, you need to wrap ",(0,s.jsx)(t.code,{children:"setNativeProps"})," with an additional ",(0,s.jsx)(t.code,{children:"runOnUI"})," call, React Native's ",(0,s.jsxs)(t.a,{href:"https://reactnative.dev/docs/animations#setnativeprops",children:["built-in ",(0,s.jsx)(t.code,{children:"setNativeProps"})]})," proves to work better with fewer jumps between runtimes."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,s.jsx)(d,{android:!0,ios:!0,web:!0})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}function u(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},77159:(e,t,n)=>{n.d(t,{A:()=>a});const a="import React from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport Animated, {\n  runOnUI,\n  setNativeProps,\n  useAnimatedRef,\n} from 'react-native-reanimated';\n\nconst COLORS = ['#FFE780', '#87CCE8', '#FFA3A1', '#B1DFD0', '#B58DF1'];\n\nexport default function Example() {\n  const animatedRef = useAnimatedRef<Animated.View>();\n\n  const handlePress = () => {\n    runOnUI(() => {\n      // highlight-next-line\n      setNativeProps(animatedRef, {\n        backgroundColor: COLORS[Math.floor(Math.random() * COLORS.length)],\n        // highlight-next-line\n      });\n    })();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Animated.View ref={animatedRef} style={styles.box} />\n      <Button title=\"change color\" onPress={handlePress} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#B58DF1',\n    borderRadius: 20,\n    marginBottom: 30,\n  },\n});\n"},90424:(e,t,n)=>{n.d(t,{A:()=>c});var a=n(39471),s=n(14442),i=n(21844),r=n(31071),o=a.forwardRef(((e,t)=>{var n=e.accessibilityLabel,s=e.color,o=e.disabled,c=e.onPress,l=e.testID,h=e.title;return a.createElement(i.A,{accessibilityLabel:n,accessibilityRole:"button",disabled:o,focusable:!o,onPress:c,ref:t,style:[d.button,s&&{backgroundColor:s},o&&d.buttonDisabled],testID:l},a.createElement(r.A,{style:[d.text,o&&d.textDisabled]},h))}));o.displayName="Button";var d=s.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const c=o}}]);