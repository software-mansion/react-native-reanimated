"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[8446],{30620:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(39471);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}},31014:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"api/miscellaneous/runOnJS","title":"runOnJS","description":"When you call a function on the UI thread you can\'t be sure if you\'re calling a worklet or a callback from the JS thread. To make it more transparent we introduced runOnJS, which calls a callback asynchronously. An exception will be thrown if you call a JS callback without this function.","source":"@site/versioned_docs/version-2.x/api/miscellaneous/runonJS.md","sourceDirName":"api/miscellaneous","slug":"/api/miscellaneous/runOnJS","permalink":"/react-native-reanimated/docs/2.x/api/miscellaneous/runOnJS","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-2.x/api/miscellaneous/runonJS.md","tags":[],"version":"2.x","frontMatter":{"id":"runOnJS","title":"runOnJS","sidebar_label":"runOnJS"},"sidebar":"docs","previous":{"title":"Interpolate","permalink":"/react-native-reanimated/docs/2.x/api/miscellaneous/interpolate"},"next":{"title":"runOnUI","permalink":"/react-native-reanimated/docs/2.x/api/miscellaneous/runOnUI"}}');var r=t(47671),s=t(30620);const i={id:"runOnJS",title:"runOnJS",sidebar_label:"runOnJS"},o=void 0,l={},c=[{value:"Arguments",id:"arguments",level:3},{value:"<code>fn</code> [function]",id:"fn-function",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2}];function u(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["When you call a function on the UI thread you can't be sure if you're calling a worklet or a callback from the JS thread. To make it more transparent we introduced ",(0,r.jsx)(n.code,{children:"runOnJS"}),", which calls a callback asynchronously. An exception will be thrown if you call a JS callback without this function."]}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["If you want to invoke some function from an external library in ",(0,r.jsx)(n.code,{children:"runOnJS"})," please wrap it in a separate function."]}),(0,r.jsx)(n.p,{children:"Code like this may not work:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"useDerivedValue(() => {\n  runOnJS(externalLibraryFunction)(args);\n});\n"})}),(0,r.jsx)(n.p,{children:"But something like this will work:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const wrapper = (args) => {\n  externalLibraryFunction(args);\n};\nuseDerivedValue(() => {\n  runOnJS(wrapper)(args);\n});\n"})}),(0,r.jsxs)(n.p,{children:["This is because internally ",(0,r.jsx)(n.code,{children:"runOnJS"})," uses ",(0,r.jsx)(n.code,{children:"Object.defineProperty"}),". Therefore if we want to call a method of some object we may not have access to ",(0,r.jsx)(n.code,{children:"this"})," inside the called function."]}),(0,r.jsx)(n.p,{children:"This code shows how it works:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"class A {\n  foo() {\n    //... playing with [this]\n  }\n}\n\nconst a = new A();\nconst ob = {};\n// We do something like this in runOnJS\nObject.defineProperty(ob, 'foo', { enumerable: false, value: a.foo });\n\na.foo(5); // Normal [this] access\nob.foo(5); // [this] is not correct\n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(n.h4,{id:"fn-function",children:[(0,r.jsx)(n.code,{children:"fn"})," [function]"]}),"\n",(0,r.jsx)(n.p,{children:"The first and only argument is the function that is supposed to be run."}),"\n",(0,r.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"runOnJS"})," returns a function which can be safely run from the UI thread."]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:"Here is an example of calling a javascript callback from the UI thread:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:"{22}",children:"import {\n  useSharedValue,\n  runOnJS,\n  useDerivedValue,\n  useAnimatedReaction,\n} from 'react-native-reanimated';\nimport { View, Button } from 'react-native';\nimport React from 'react';\n\nexport default function App() {\n  const randomWidth = useSharedValue(10);\n  const lastResults = [];\n\n  const recordResult = (result) => {\n    lastResults.push(result);\n    if (lastResults.length > 3) {\n      lastResults.shift();\n    }\n  };\n\n  useDerivedValue(() => {\n    runOnJS(recordResult)(randomWidth.value);\n  });\n\n  return (\n    <View>\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.round(Math.random() * 350);\n        }}\n      />\n    </View>\n  );\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);