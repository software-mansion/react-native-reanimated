"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[3978],{5461:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"guide/testing","title":"Testing with Jest","description":"Reanimated test mocks use web implementation of Reanimated2. Before you begin using Reanimated mocks you need some setup actions.","source":"@site/versioned_docs/version-2.x/guide/testing.md","sourceDirName":"guide","slug":"/guide/testing","permalink":"/react-native-reanimated/docs/2.x/guide/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-2.x/guide/testing.md","tags":[],"version":"2.x","frontMatter":{"id":"testing","title":"Testing with Jest","sidebar_label":"Testing with Jest"},"sidebar":"docs","previous":{"title":"interpolateColor","permalink":"/react-native-reanimated/docs/2.x/api/miscellaneous/interpolateColors"},"next":{"title":"Debugging worklets","permalink":"/react-native-reanimated/docs/2.x/guide/debugging"}}');var s=t(47671),a=t(30620);const o={id:"testing",title:"Testing with Jest",sidebar_label:"Testing with Jest"},c=void 0,r={},d=[{value:"Setup",id:"setup",level:2},{value:"API",id:"api",level:2},{value:"Style checker",id:"style-checker",level:4},{value:"<code>expect(component).toHaveAnimatedStyle(expectedStyle)</code>",id:"expectcomponenttohaveanimatedstyleexpectedstyle",level:4},{value:"<code>expect(component).toHaveAnimatedStyle(expectedStyle, {exact: true})</code>",id:"expectcomponenttohaveanimatedstyleexpectedstyle-exact-true",level:4},{value:"<code>getDefaultStyle(component)</code>",id:"getdefaultstylecomponent",level:4},{value:"Timers",id:"timers",level:4},{value:"<code>advanceAnimationByTime(timeInMs)</code>",id:"advanceanimationbytimetimeinms",level:4},{value:"<code>advanceAnimationByFrame(numberOfFrames)</code>",id:"advanceanimationbyframenumberofframes",level:4},{value:"Example",id:"example",level:2},{value:"Recommended testing library",id:"recommended-testing-library",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Reanimated test mocks use web implementation of Reanimated2. Before you begin using Reanimated mocks you need some setup actions."}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsxs)(n.p,{children:["Add the following line to your ",(0,s.jsx)(n.code,{children:"jest-setup.js"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"require('react-native-reanimated').setUpTests();\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"setUpTests()"})," can take optional config argument. Default config is ",(0,s.jsx)(n.code,{children:"{ fps: 60 }"}),", setting framerate to 60fps."]}),"\n",(0,s.jsxs)(n.p,{children:["To be sure, check if your ",(0,s.jsx)(n.code,{children:"jest.config.js"})," file contains:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"...\npreset: 'react-native',\nsetupFilesAfterEnv: ['./jest-setup.js'],\n...\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["If you use Jest in a version ",(0,s.jsx)(n.strong,{children:"older than 28"}),", you should set ",(0,s.jsx)(n.code,{children:"setupFiles"})," property instead of ",(0,s.jsx)(n.code,{children:"setupFilesAfterEnv"})]})}),"\n",(0,s.jsx)(n.p,{children:"If you have custom babel configuration for testing, make sure that Reanimated's babel plugin is enabled for that environment."}),"\n",(0,s.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,s.jsx)(n.h4,{id:"style-checker",children:"Style checker"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Checking equality of selected styles with current component styles"}),"\n",(0,s.jsx)(n.h4,{id:"expectcomponenttohaveanimatedstyleexpectedstyle",children:(0,s.jsx)(n.code,{children:"expect(component).toHaveAnimatedStyle(expectedStyle)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"component"})," - tested component\n",(0,s.jsx)(n.code,{children:"expectedStyle"})," - contains expected styles of testing component, for example ",(0,s.jsx)(n.code,{children:"{ width: 100 }"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Checking equality of all current component styles with expected styles"}),"\n",(0,s.jsx)(n.h4,{id:"expectcomponenttohaveanimatedstyleexpectedstyle-exact-true",children:(0,s.jsx)(n.code,{children:"expect(component).toHaveAnimatedStyle(expectedStyle, {exact: true})"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["You can get all styles of tested component by using ",(0,s.jsx)(n.code,{children:"getDefaultStyle"})]}),"\n",(0,s.jsx)(n.h4,{id:"getdefaultstylecomponent",children:(0,s.jsx)(n.code,{children:"getDefaultStyle(component)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"component"})," - tested component"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"timers",children:"Timers"}),"\n",(0,s.jsx)(n.p,{children:"You can use jest timers to control animation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"jest.useFakeTimers(); // jest.useFakeTimers('legacy') for jest >= 27\n// call animation\njest.runAllTimers();\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you want more control over animation, you can use Reanimated wrapper for timers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"withReanimatedTimer(() => {\n  // call animation\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Inside of ",(0,s.jsx)(n.code,{children:"withReanimatedTimer"})," you can use ",(0,s.jsx)(n.code,{children:"advanceAnimationByTime(timeInMs)"})," or ",(0,s.jsx)(n.code,{children:"advanceAnimationByFrame(amountOfFrames)"})," functions"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Advance animation by a specified number of frames. You can specify the running duration of the animation and check the value of styles afterward.","\n",(0,s.jsx)(n.h4,{id:"advanceanimationbytimetimeinms",children:(0,s.jsx)(n.code,{children:"advanceAnimationByTime(timeInMs)"})}),"\n",(0,s.jsx)(n.code,{children:"timeInMs"})," - the duration specifying for how long animation should be advanced forward. Should have an integer value."]}),"\n",(0,s.jsxs)(n.li,{children:["Advance animation by specific amount of animation frame.","\n",(0,s.jsx)(n.h4,{id:"advanceanimationbyframenumberofframes",children:(0,s.jsx)(n.code,{children:"advanceAnimationByFrame(numberOfFrames)"})}),"\n",(0,s.jsx)(n.code,{children:"numberOfFrames"})," - number of animation frames to run. Should have an integer value."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"Timer:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('stop in a middle of animation', () => {\n  withReanimatedTimer(() => {\n    const style = { width: 0 };\n\n    const { getByTestId } = render(<AnimatedComponent />);\n    const view = getByTestId('view');\n    const button = getByTestId('button');\n\n    expect(view.props.style.width).toBe(0);\n    expect(view).toHaveAnimatedStyle(style);\n\n    fireEvent.press(button);\n    advanceAnimationByTime(250); // if whole animation duration is a 500ms\n    style.width = 46.08; // value of component width after 250ms of animation\n    expect(view).toHaveAnimatedStyle(style);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"More example tests you can see in our repository"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-reanimated/blob/Reanimated2/__tests__/SharedValue.test.js",children:"SharedValue.test.js"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-reanimated/blob/Reanimated2/__tests__/Animation.test.js",children:"Animation.test.js"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"recommended-testing-library",children:"Recommended testing library"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://callstack.github.io/react-native-testing-library/",children:"@testing-library/react-native"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://react-hooks-testing-library.com/",children:"@testing-library/react-hooks"})," - for dealing with hooks"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},30620:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(39471);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);