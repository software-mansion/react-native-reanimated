"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[7773],{30620:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>i});var t=o(39471);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}},58862:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"nodes/interpolateColors","title":"interpolateColors","description":"interpolateColors","source":"@site/versioned_docs/version-1.x/nodes/interpolateColors.md","sourceDirName":"nodes","slug":"/nodes/interpolateColors","permalink":"/react-native-reanimated/docs/1.x/nodes/interpolateColors","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-1.x/nodes/interpolateColors.md","tags":[],"version":"1.x","frontMatter":{},"sidebar":"docs","previous":{"title":"interpolate","permalink":"/react-native-reanimated/docs/1.x/nodes/interpolate"},"next":{"title":"onChange","permalink":"/react-native-reanimated/docs/1.x/nodes/onChange"}}');var r=o(47671),a=o(30620);const s={},i=void 0,l={},c=[{value:"<code>interpolateColors</code>",id:"interpolatecolors",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"interpolatecolors",children:(0,r.jsx)(n.code,{children:"interpolateColors"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'interpolateColors(node, {\n  // Input range for the interpolation. Should be monotonically increasing.\n  inputRange: [nodeOrValue, ...],\n\n  // Output colors range for the interpolation.\n  // Should be the same length as the input range.\n  //\n  // Each color should be a string like "red" "#ff0" "#ff0000" "rgba(255, 0, 0, 1)"\n  // or a number like `0xrrggbbaa`.\n  outputColorRange: [color, ...],\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:"Maps an input value within a range to an output value within a color range."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const color = Animated.interpolateColors(node, {\n  inputRange: [0, 1],\n  outputColorRange: ['red', 'blue'],\n});\n\nreturn <Animated.View style={{ backgroundColor: color }} />;\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);