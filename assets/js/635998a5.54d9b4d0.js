"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[7277],{30620:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var a=n(39471);const o={},i=a.createContext(o);function l(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),a.createElement(i.Provider,{value:t},e.children)}},97442:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"api/miscellaneous/interpolate","title":"Interpolate","description":"Sometimes you need to map a value from one range to another. This is where you should use the interpolate function which approximates values between points in the output range and lets you map a value inside the input range to a corresponding approximation in the output range. It also supports a few types of Extrapolation to enable mapping outside the range.","source":"@site/versioned_docs/version-2.x/api/miscellaneous/interpolate.md","sourceDirName":"api/miscellaneous","slug":"/api/miscellaneous/interpolate","permalink":"/react-native-reanimated/docs/2.x/api/miscellaneous/interpolate","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/versioned_docs/version-2.x/api/miscellaneous/interpolate.md","tags":[],"version":"2.x","frontMatter":{"id":"interpolate","title":"Interpolate","sidebar_label":"Interpolate"},"sidebar":"docs","previous":{"title":"getRelativeCoords","permalink":"/react-native-reanimated/docs/2.x/api/miscellaneous/getRelativeCoords"},"next":{"title":"runOnJS","permalink":"/react-native-reanimated/docs/2.x/api/miscellaneous/runOnJS"}}');var o=n(47671),i=n(30620);const l={id:"interpolate",title:"Interpolate",sidebar_label:"Interpolate"},r=void 0,s={},d=[{value:"Arguments",id:"arguments",level:3},{value:"<code>value</code> [Float]",id:"value-float",level:4},{value:"<code>input range</code> [Float[]]",id:"input-range-float",level:4},{value:"<code>output range</code> [Float[]]",id:"output-range-float",level:4},{value:"<code>extrapolation type</code> [Object | String]",id:"extrapolation-type-object--string",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2}];function c(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Sometimes you need to map a value from one range to another. This is where you should use the ",(0,o.jsx)(t.code,{children:"interpolate"})," function which approximates values between points in the output range and lets you map a value inside the input range to a corresponding approximation in the output range. It also supports a few types of Extrapolation to enable mapping outside the range."]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:["Be aware that ",(0,o.jsx)(t.code,{children:"interpolate"})," was renamed to ",(0,o.jsx)(t.code,{children:"interpolateNode"})," in Reanimated v2 and should not be confused with ",(0,o.jsx)(t.code,{children:"interpolate"})," from the new API. When using ",(0,o.jsx)(t.code,{children:"interpolate"})," imported directly from react-native-reanimated v1, in v2 you should use ",(0,o.jsx)(t.code,{children:"interpolateNode"})," instead. If you were using a class member method AnimatedValue.interpolate, no change is necessary."]})}),"\n",(0,o.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,o.jsxs)(t.h4,{id:"value-float",children:[(0,o.jsx)(t.code,{children:"value"})," [Float]"]}),"\n",(0,o.jsx)(t.p,{children:"Value from within the input range that should be mapped to a value from the output range."}),"\n",(0,o.jsxs)(t.h4,{id:"input-range-float",children:[(0,o.jsx)(t.code,{children:"input range"})," [Float[]]"]}),"\n",(0,o.jsx)(t.p,{children:"An array of Floats that contains points that indicate the range of the input value. Values in the input range should be increasing."}),"\n",(0,o.jsxs)(t.h4,{id:"output-range-float",children:[(0,o.jsx)(t.code,{children:"output range"})," [Float[]]"]}),"\n",(0,o.jsx)(t.p,{children:"An array of Floats that contains points that indicate the range of the output value. It should have at least the same number of points as the input range."}),"\n",(0,o.jsxs)(t.h4,{id:"extrapolation-type-object--string",children:[(0,o.jsx)(t.code,{children:"extrapolation type"})," [Object | String]"]}),"\n",(0,o.jsxs)(t.p,{children:["Can be either an object or a string. If an object is passed it should specify extrapolation explicitly for the right and left sides. If extrapolation for a side is not provided, it defaults to ",(0,o.jsx)(t.code,{children:"Extrapolation.EXTEND"}),". Example extrapolation type object:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"const extrapolation = {\n  extrapolateLeft: Extrapolation.CLAMP,\n  extrapolateRight: Extrapolation.IDENTITY,\n};\n"})}),"\n",(0,o.jsx)(t.p,{children:"If a string is provided, the provided extrapolation type is applied to both sides."}),"\n",(0,o.jsxs)(t.admonition,{type:"info",children:[(0,o.jsx)(t.p,{children:"Available extrapolation types:"}),(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"Extrapolation.CLAMP"})," - clamps the value to the edge of the output range"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"Extrapolation.IDENTITY"})," - returns the value that is being interpolated"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"Extrapolation.EXTEND"})," - approximates the value even outside of the range"]}),"\n"]}),(0,o.jsx)(t.p,{children:"Available extrapolation string values:"}),(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"clamp"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"identity"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"extend"})}),"\n"]})]}),"\n",(0,o.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"interpolate"})," returns the value after interpolation from within the output range."]}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React from 'react';\nimport { View, StyleSheet, Dimensions } from 'react-native';\nimport Animated, {\n  useSharedValue,\n  useAnimatedScrollHandler,\n  useAnimatedStyle,\n  interpolate,\n} from 'react-native-reanimated';\n\nexport const HEADER_IMAGE_HEIGHT = Dimensions.get('window').width / 3;\n\nexport default function Test() {\n  const scrollY = useSharedValue(0);\n  const scrollHandler = useAnimatedScrollHandler({\n    onScroll: (e) => {\n      scrollY.value = e.contentOffset.y;\n    },\n  });\n  const animatedStyles = useAnimatedStyle(() => {\n    const scale = interpolate(scrollY.value, [-100, 0], [2, 1], {\n      extrapolateRight: Extrapolation.CLAMP,\n    });\n\n    return {\n      transform: [{ scale: scale }],\n    };\n  });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Animated.View\n        style={[\n          {\n            position: 'absolute',\n            top: 20,\n            left: 0,\n            width: 20,\n            height: 20,\n            backgroundColor: 'blue',\n          },\n          animatedStyles,\n        ]}\n      />\n\n      <Animated.ScrollView\n        scrollEventThrottle={1}\n        style={StyleSheet.absoluteFill}\n        onScroll={scrollHandler}></Animated.ScrollView>\n    </View>\n  );\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);