"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[4689],{59806:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"core/useAnimatedProps","title":"useAnimatedProps","description":"useAnimatedProps lets you create an animated props object which can be animated using shared values. This object is used to animate properties of third-party components.","source":"@site/docs/core/useAnimatedProps.mdx","sourceDirName":"core","slug":"/core/useAnimatedProps","permalink":"/react-native-reanimated/docs/core/useAnimatedProps","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/core/useAnimatedProps.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"useAnimatedStyle","permalink":"/react-native-reanimated/docs/core/useAnimatedStyle"},"next":{"title":"useAnimatedRef","permalink":"/react-native-reanimated/docs/core/useAnimatedRef"}}');var i=t(47671),a=t(30620),s=t(88157),o=t(96579),l=t(75860);const d={sidebar_position:3},c="useAnimatedProps",p={},h=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>updater</code>",id:"updater",level:4},{value:"<code>dependencies</code> <Optional></Optional>",id:"dependencies-",level:4},{value:"<code>adapters</code> <Optional></Optional>",id:"adapters-",level:4},{value:"Color-related properties",id:"color-related-properties",level:3},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{CollapsibleCode:t,Details:r,InteractiveExample:d,Optional:c,PlatformCompatibility:p}=n;return t||x("CollapsibleCode",!0),r||x("Details",!0),d||x("InteractiveExample",!0),c||x("Optional",!0),p||x("PlatformCompatibility",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"useanimatedprops",children:"useAnimatedProps"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"useAnimatedProps"})," lets you create an animated props object which can be animated using ",(0,i.jsx)(n.a,{href:"/docs/fundamentals/glossary#shared-value",children:"shared values"}),". This object is used to animate properties of third-party components."]}),"\n",(0,i.jsxs)(n.p,{children:["For animating style use ",(0,i.jsx)(n.a,{href:"/docs/core/useAnimatedStyle",children:(0,i.jsx)(n.code,{children:"useAnimatedStyle"})})," instead."]}),"\n",(0,i.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { useAnimatedProps } from 'react-native-reanimated';\n\nfunction App() {\n  // highlight-next-line\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      opacity: sv.value ? 1 : 0,\n    };\n    // highlight-next-line\n  });\n\n  // highlight-next-line\n  return <Animated.View animatedProps={animatedProps} />;\n}\n"})}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Type definitions"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"function useAnimatedProps<T extends {}>(\n  updater: () => Partial<T>,\n  dependencies?: DependencyList | null,\n  adapters?: PropsAdapterFunction | PropsAdapterFunction[] | null\n): Partial<T>;\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsx)(n.h4,{id:"updater",children:(0,i.jsx)(n.code,{children:"updater"})}),"\n",(0,i.jsx)(n.p,{children:"A function returning an object with properties you want to animate."}),"\n",(0,i.jsxs)(n.h4,{id:"dependencies-",children:[(0,i.jsx)(n.code,{children:"dependencies"})," ",(0,i.jsx)(c,{})]}),"\n",(0,i.jsx)(n.p,{children:"An optional array of dependencies."}),"\n",(0,i.jsxs)(n.p,{children:["Only relevant when using Reanimated ",(0,i.jsx)(n.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/guides/web-support#web-without-the-babel-plugin",children:"without the Babel plugin on the Web"}),"."]}),"\n",(0,i.jsxs)(n.h4,{id:"adapters-",children:[(0,i.jsx)(n.code,{children:"adapters"})," ",(0,i.jsx)(c,{})]}),"\n",(0,i.jsx)(n.p,{children:"An optional function or an array of functions."}),"\n",(0,i.jsx)(n.p,{children:"Sometimes when working with third-party libraries properties might be named differently on the API surface from what they really represent on the native side. Adapters make it possible to handle these cases by defining a way to convert these props."}),"\n",(0,i.jsx)(n.p,{children:"Reanimated comes with two built-in adapters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-reanimated/blob/Reanimated2/src/reanimated2/PropAdapters.ts#L19",children:(0,i.jsx)(n.code,{children:"SVGAdapter"})})," for handling ",(0,i.jsx)(n.code,{children:"transform"})," property in ",(0,i.jsx)(n.code,{children:"react-native-svg"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-reanimated/blob/Reanimated2/src/reanimated2/PropAdapters.ts#L57",children:(0,i.jsx)(n.code,{children:"TextInputAdapter"})}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You can create your own adapters using ",(0,i.jsx)(n.code,{children:"createAnimatedPropAdapter"})," function."]}),"\n",(0,i.jsxs)(n.p,{children:["Here's an example of adapting ",(0,i.jsx)(n.code,{children:"fill"})," and ",(0,i.jsx)(n.code,{children:"stroke"})," properties from ",(0,i.jsx)(n.code,{children:"react-native-svg"})," to be able to animate them with Reanimated."]}),"\n","\n",(0,i.jsx)(t,{showLines:[13,25],src:s.A}),"\n",(0,i.jsx)(n.h3,{id:"color-related-properties",children:"Color-related properties"}),"\n",(0,i.jsxs)(n.p,{children:["Color-related properties that come from custom components won't work in most cases as these props are in a format incomprehensible for native side.\nFor most commonly used color-related properties we integrated the color processing to our code, managed by our predefined list in ",(0,i.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-reanimated/src/Colors.ts#L332",children:"Colors.ts"})," file."]}),"\n",(0,i.jsxs)(n.p,{children:["However, when your desired color property is not on the list and you want to use it with ",(0,i.jsx)(n.code,{children:"useAnimatedProps"})," - manual processing is necessary. You need to explicitly wrap such color properties with ",(0,i.jsx)(n.code,{children:"processColor"})," function to ensure they are correctly interpreted by the native side."]}),"\n",(0,i.jsxs)(n.p,{children:["You can check full list of automatically processed props here - ",(0,i.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-reanimated/src/Colors.ts#L332",children:"Colors.ts"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"// highlight-next-line\nimport { processColor } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedProps = useAnimatedProps(() => {\n    const mainColor = interpolateColor(\n      colorProgress.value,\n      [0, 1],\n      ['red', 'blue']\n    );\n\n    const bgColor = interpolateColor(\n      colorProgress.value,\n      [0, 1],\n      ['green', 'yellow']\n    );\n\n    return {\n      // `colors` prop is not on our list - we need to process it manually\n      // highlight-next-line\n      colors: processColor([mainColor, bgColor]),\n    };\n  });\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"useAnimatedProps"})," returns an animated props object which has to be passed to ",(0,i.jsx)(n.code,{children:"animatedProps"})," property of an ",(0,i.jsx)(n.a,{href:"/docs/fundamentals/glossary#animated-component",children:"Animated component"})," that you want to animate."]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n","\n",(0,i.jsx)(d,{src:l.A,component:o.A}),"\n",(0,i.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You can share animated props between components to avoid code duplication."}),"\n",(0,i.jsx)(n.li,{children:"We recommend to create adapters outside of the component's body to avoid unnecessary recalculations."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,i.jsx)(p,{android:!0,ios:!0,web:!0})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},75860:(e,n,t)=>{t.d(n,{A:()=>r});const r="import React from 'react';\nimport { Button, View, StyleSheet } from 'react-native';\nimport Animated, {\n  useSharedValue,\n  useAnimatedProps,\n  withTiming,\n} from 'react-native-reanimated';\nimport { Svg, Circle } from 'react-native-svg';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nexport default function App() {\n  const r = useSharedValue<number>(20);\n\n  const handlePress = () => {\n    r.value += 10;\n  };\n\n  // highlight-start\n  const animatedProps = useAnimatedProps(() => ({\n    r: withTiming(r.value),\n  }));\n  // highlight-end\n\n  return (\n    <View style={styles.container}>\n      <Svg style={styles.svg}>\n        <AnimatedCircle\n          cx=\"50%\"\n          cy=\"50%\"\n          fill=\"#b58df1\"\n          // highlight-next-line\n          animatedProps={animatedProps}\n        />\n      </Svg>\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  svg: {\n    height: 250,\n    width: '100%',\n  },\n});\n"},88157:(e,n,t)=>{t.d(n,{A:()=>r});const r="import React from 'react';\nimport { Svg, Ellipse } from 'react-native-svg';\nimport Animated, {\n  createAnimatedPropAdapter,\n  processColor,\n  useAnimatedProps,\n  useSharedValue,\n  withRepeat,\n  withTiming,\n} from 'react-native-reanimated';\n\nconst AnimatedEllipse = Animated.createAnimatedComponent(Ellipse);\n\n// highlight-next-line\nconst adapter = createAnimatedPropAdapter(\n  (props) => {\n    if (Object.keys(props).includes('fill')) {\n      props.fill = { type: 0, payload: processColor(props.fill) };\n    }\n    if (Object.keys(props).includes('stroke')) {\n      props.stroke = { type: 0, payload: processColor(props.stroke) };\n    }\n  },\n  ['fill', 'stroke']\n  // highlight-next-line\n);\n\nexport default function App() {\n  const opacity = useSharedValue<number>(0);\n\n  React.useEffect(() => {\n    opacity.value = withRepeat(withTiming(1), -1, true);\n  }, []);\n\n  const ellipseAnimatedProps = useAnimatedProps(\n    () => {\n      const coordinates = { cx: 50, cy: 50, rx: 40, ry: 40 };\n\n      return {\n        cx: coordinates.cx,\n        cy: coordinates.cy,\n        rx: coordinates.rx,\n        ry: coordinates.ry,\n        stroke: 'rgb(255,0,0)',\n        fill: 'yellow',\n        opacity: opacity.value,\n        strokeWidth: 2,\n      };\n    },\n    [],\n    // highlight-next-line\n    adapter\n  );\n\n  return (\n    <Svg width=\"100%\" height=\"100%\">\n      <AnimatedEllipse animatedProps={ellipseAnimatedProps} />\n    </Svg>\n  );\n}\n"},96579:(e,n,t)=>{t.d(n,{A:()=>p});var r=t(14442),i=t(90424),a=t(8589),s=t(19727),o=t(95910),l=t(47671);const d=s.default.createAnimatedComponent(o.jl),c={code:"function AnimatingPropsTsx1(){const{withTiming,r}=this.__closure;return{r:withTiming(r.value)};}"};function p(){const e=(0,s.useSharedValue)(20),n=(0,s.useAnimatedProps)(function(e){let{_worklet_5140780619767_init_data:n,withTiming:t,r:r}=e;const i=()=>({r:t(r.value)});return i.__closure={withTiming:t,r:r},i.__workletHash=5140780619767,i.__initData=n,i}({_worklet_5140780619767_init_data:c,withTiming:s.withTiming,r:e}));return(0,l.jsxs)(a.A,{style:h.container,children:[(0,l.jsx)(o.BS,{style:h.svg,children:(0,l.jsx)(d,{cx:"50%",cy:"50%",fill:"#b58df1",animatedProps:n})}),(0,l.jsx)(i.A,{onPress:()=>{e.value+=10},title:"Click me"})]})}const h=r.A.create({container:{flex:1,alignItems:"center"},svg:{height:250,width:"100%"}})}}]);