"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[6153],{24517:(e,n,t)=>{t.d(n,{A:()=>h});var r=t(14442),l=t(90424),o=t(31071),s=t(8589),i=t(66515),a=t(47671);const c=10,d=100,m=10,u={code:"function ScrollToTsx1(){const{scrollTo,animatedRef,scroll,ITEM_SIZE,ITEM_MARGIN}=this.__closure;scrollTo(animatedRef,0,scroll.value*(ITEM_SIZE+2*ITEM_MARGIN),true);}"};function h(){const e=(0,i.useAnimatedRef)(),n=(0,i.useSharedValue)(0);(0,i.useDerivedValue)(function({_worklet_10090058688139_init_data:e,scrollTo:n,animatedRef:t,scroll:r,ITEM_SIZE:l,ITEM_MARGIN:o}){const s=function(){n(t,0,r.value*(l+2*o),!0)};return s.__closure={scrollTo:n,animatedRef:t,scroll:r,ITEM_SIZE:l,ITEM_MARGIN:o},s.__workletHash=0x92d465d268b,s.__initData=e,s}({_worklet_10090058688139_init_data:u,scrollTo:i.scrollTo,animatedRef:e,scroll:n,ITEM_SIZE:d,ITEM_MARGIN:m}));const t=Array.from(Array(c).keys());return(0,a.jsxs)(s.A,{style:x.container,children:[(0,a.jsx)(f,{increment:-1,scroll:n}),(0,a.jsx)(s.A,{style:x.boxWrapper,children:(0,a.jsx)(i.default.ScrollView,{ref:e,children:t.map((e,n)=>(0,a.jsx)(s.A,{style:x.box,children:(0,a.jsx)(o.A,{style:{textAlign:"center"},children:n})},n))})}),(0,a.jsx)(f,{increment:1,scroll:n})]})}const f=({increment:e,scroll:n})=>(0,a.jsx)(s.A,{style:x.buttonWrapper,children:(0,a.jsx)(l.A,{onPress:()=>{n.value=n.value+e>0?n.value+e:c-1+e,n.value>=c-2&&(n.value=0)},title:`Scroll ${Math.abs(e)} ${e>0?"down":"up"}`})}),x=r.A.create({container:{flex:1,alignItems:"center"},buttonWrapper:{flex:1,alignItems:"center",justifyContent:"center"},box:{width:d,height:d,margin:m,borderRadius:15,backgroundColor:"#b58df1",alignItems:"center",justifyContent:"center"},boxWrapper:{width:"100%",height:250,alignItems:"center"}})},61858:(e,n,t)=>{t.d(n,{A:()=>r});const r="import React from 'react';\nimport { Button, View, Text, StyleSheet } from 'react-native';\nimport Animated, {\n  useAnimatedRef,\n  useDerivedValue,\n  useSharedValue,\n  scrollTo,\n} from 'react-native-reanimated';\nimport type { SharedValue } from 'react-native-reanimated';\n\nconst ITEM_COUNT = 10;\nconst ITEM_SIZE = 100;\nconst ITEM_MARGIN = 10;\n\nexport default function App() {\n  const animatedRef = useAnimatedRef<Animated.ScrollView>();\n  const scroll = useSharedValue<number>(0);\n\n  useDerivedValue(() => {\n    // highlight-start\n    scrollTo(\n      animatedRef,\n      0,\n      scroll.value * (ITEM_SIZE + 2 * ITEM_MARGIN),\n      true\n    );\n    // highlight-end\n  });\n\n  const items = Array.from(Array(ITEM_COUNT).keys());\n\n  return (\n    <View style={styles.container}>\n      <Incrementor increment={-1} scroll={scroll} />\n      <View style={styles.boxWrapper}>\n        <Animated.ScrollView ref={animatedRef}>\n          {items.map((_, i) => (\n            <View key={i} style={styles.box}>\n              <Text style={{ textAlign: 'center' }}>{i}</Text>\n            </View>\n          ))}\n        </Animated.ScrollView>\n      </View>\n      <Incrementor increment={1} scroll={scroll} />\n    </View>\n  );\n}\n\nconst Incrementor = ({\n  increment,\n  scroll,\n}: {\n  increment: number;\n  scroll: SharedValue<number>;\n}) => (\n  <View style={styles.buttonWrapper}>\n    <Button\n      onPress={() => {\n        scroll.value =\n          scroll.value + increment > 0\n            ? scroll.value + increment\n            : ITEM_COUNT - 1 + increment;\n\n        if (scroll.value >= ITEM_COUNT - 2) scroll.value = 0;\n      }}\n      title={`Scroll ${Math.abs(increment)} ${increment > 0 ? 'down' : 'up'}`}\n    />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  buttonWrapper: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: ITEM_SIZE,\n    height: ITEM_SIZE,\n    margin: ITEM_MARGIN,\n    borderRadius: 15,\n    backgroundColor: '#b58df1',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  boxWrapper: {\n    width: '100%',\n    height: 250,\n    alignItems: 'center',\n  },\n});\n"},82293:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"scroll/scrollTo","title":"scrollTo","description":"scrollTo lets you synchronously scroll to a given X or Y offset.","source":"@site/docs/scroll/scrollTo.mdx","sourceDirName":"scroll","slug":"/scroll/scrollTo","permalink":"/react-native-reanimated/docs/scroll/scrollTo","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/docs/scroll/scrollTo.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Scroll","permalink":"/react-native-reanimated/docs/category/scroll"},"next":{"title":"useScrollOffset","permalink":"/react-native-reanimated/docs/scroll/useScrollOffset"}}');var l=t(47671),o=t(30620),s=t(24517),i=t(61858);const a={sidebar_position:1},c="scrollTo",d={},m=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>animatedRef</code>",id:"animatedref",level:4},{value:"<code>x</code>",id:"x",level:4},{value:"<code>y</code>",id:"y",level:4},{value:"<code>animated</code>",id:"animated",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{Details:t,InteractiveExample:r,PlatformCompatibility:a}=n;return t||f("Details",!0),r||f("InteractiveExample",!0),a||f("PlatformCompatibility",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"scrollto",children:"scrollTo"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"scrollTo"})," lets you synchronously scroll to a given X or Y offset."]}),"\n",(0,l.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:"import { scrollTo } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n  const scrollY = useSharedValue(0);\n\n  useDerivedValue(() => {\n    // highlight-next-line\n    scrollTo(animatedRef, 0, scrollY.value, true);\n  });\n\n  return (\n    <Animated.ScrollView ref={animatedRef}>{/* ... */}</Animated.ScrollView>\n  );\n}\n"})}),"\n",(0,l.jsxs)(t,{children:[(0,l.jsx)("summary",{children:"Type definitions"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"function scrollTo<T extends Component>(\n  animatedRef: AnimatedRef<T>,\n  x: number,\n  y: number,\n  animated: boolean\n): void;\n"})})]}),"\n",(0,l.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,l.jsx)(n.h4,{id:"animatedref",children:(0,l.jsx)(n.code,{children:"animatedRef"})}),"\n",(0,l.jsxs)(n.p,{children:["An ",(0,l.jsx)(n.a,{href:"/docs/core/useAnimatedRef#returns",children:"animated ref"})," connected to the ScrollView (or other scrollable) component you'd want to scroll on. The animated ref has to be passed either to an ",(0,l.jsx)(n.a,{href:"/docs/fundamentals/glossary#animated-component",children:"Animated component"})," or a React Native built-in component."]}),"\n",(0,l.jsx)(n.h4,{id:"x",children:(0,l.jsx)(n.code,{children:"x"})}),"\n",(0,l.jsx)(n.p,{children:"Value in pixels to scroll to on the horizontal X axis."}),"\n",(0,l.jsx)(n.h4,{id:"y",children:(0,l.jsx)(n.code,{children:"y"})}),"\n",(0,l.jsx)(n.p,{children:"Value in pixels to scroll to on the vertical Y axis."}),"\n",(0,l.jsx)(n.h4,{id:"animated",children:(0,l.jsx)(n.code,{children:"animated"})}),"\n",(0,l.jsxs)(n.p,{children:["Whether the scroll should be smooth (",(0,l.jsx)(n.code,{children:"true"}),") or instant (",(0,l.jsx)(n.code,{children:"false"}),")."]}),"\n",(0,l.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"scrollTo"})," returns ",(0,l.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"example",children:"Example"}),"\n","\n",(0,l.jsx)(r,{src:i.A,component:s.A}),"\n",(0,l.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.code,{children:"scrollTo"})," function can only be called from ",(0,l.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"the UI thread"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Supports ",(0,l.jsx)(n.code,{children:"Animated.FlatList"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Usually works with other ScrollView-like and FlatList-like components if they use a ",(0,l.jsx)(n.code,{children:"ScrollView"})," under the hood and are ",(0,l.jsx)(n.a,{href:"/docs/core/createAnimatedComponent#reference",children:"made animated"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Scrollable components must implement ",(0,l.jsx)(n.code,{children:"getNativeScrollRef"})," method to be compatible with ",(0,l.jsx)(n.code,{children:"scrollTo"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,l.jsx)(a,{android:!0,ios:!0,web:!0})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}function f(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},90424:(e,n,t)=>{t.d(n,{A:()=>c});var r=t(39471),l=t(14442),o=t(21844),s=t(31071),i=r.forwardRef((e,n)=>{var t=e.accessibilityLabel,l=e.color,i=e.disabled,c=e.onPress,d=e.testID,m=e.title;return r.createElement(o.A,{accessibilityLabel:t,accessibilityRole:"button",disabled:i,focusable:!i,onPress:c,ref:n,style:[a.button,l&&{backgroundColor:l},i&&a.buttonDisabled],testID:d},r.createElement(s.A,{style:[a.text,i&&a.textDisabled]},m))});i.displayName="Button";var a=l.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const c=i}}]);