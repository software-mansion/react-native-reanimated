"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[340],{30620:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var i=a(39471);const t={},s=i.createContext(t);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},92802:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"fundamentals/glossary","title":"Glossary of terms","description":"Animated component","source":"@site/docs/fundamentals/glossary.mdx","sourceDirName":"fundamentals","slug":"/fundamentals/glossary","permalink":"/react-native-reanimated/docs/fundamentals/glossary","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/fundamentals/glossary.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Handling gestures","permalink":"/react-native-reanimated/docs/fundamentals/handling-gestures"},"next":{"title":"CSS Transitions","permalink":"/react-native-reanimated/docs/category/css-transitions"}}');var t=a(47671),s=a(30620);const r={},o="Glossary of terms",d={},l=[{value:"Animated component",id:"animated-component",level:2},{value:"Shared value",id:"shared-value",level:2},{value:"Animatable value",id:"animatable-value",level:2},{value:"Animation function",id:"animation-function",level:2},{value:"Animation modifier",id:"animation-modifier",level:2},{value:"Animation object",id:"animation-object",level:2},{value:"Animations in inline styling",id:"animations-in-inline-styling",level:2},{value:"Layout animation modifier",id:"layout-animation-modifier",level:2},{value:"Worklet",id:"worklet",level:2},{value:"to workletize",id:"to-workletize",level:2},{value:"JavaScript thread",id:"javascript-thread",level:2},{value:"UI thread",id:"ui-thread",level:2},{value:"Reanimated Babel plugin",id:"reanimated-babel-plugin",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"glossary-of-terms",children:"Glossary of terms"})}),"\n",(0,t.jsx)(n.h2,{id:"animated-component",children:"Animated component"}),"\n",(0,t.jsxs)(n.p,{children:["Animated components are components which Reanimated can animate. Reanimated comes with just a handful of built-in components like ",(0,t.jsx)(n.code,{children:"Animated.View"}),", ",(0,t.jsx)(n.code,{children:"Animated.Text"}),", or ",(0,t.jsx)(n.code,{children:"Animated.ScrollView"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import Animated from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    <Animated.View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: 'violet',\n      }}\n    />\n  );\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For components which aren't a part of Reanimated, to make their props and styles animatable, you have to wrap them with ",(0,t.jsx)(n.a,{href:"/docs/core/createAnimatedComponent",children:(0,t.jsx)(n.code,{children:"createAnimatedComponent"})}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import Animated from 'react-native-reanimated';\nimport { Circle } from 'react-native-svg';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"shared-value",children:"Shared value"}),"\n",(0,t.jsx)(n.p,{children:"Shared values are a driving factor of all your animations in Reanimated."}),"\n",(0,t.jsxs)(n.p,{children:["They are defined using ",(0,t.jsx)(n.a,{href:"/docs/core/useSharedValue",children:(0,t.jsx)(n.code,{children:"useSharedValue"})})," hook:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { useSharedValue } from 'react-native-reanimated';\n"})}),"\n",(0,t.jsxs)(n.p,{children:["and accessed and modified by their ",(0,t.jsx)(n.code,{children:".value"})," property:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:"{2,5}",children:"function App() {\n  const sv = useSharedValue(0);\n\n  const handlePress = () => {\n    sv.value += 10;\n  };\n\n  // rest of your glamorous code \u2728\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["It can be a value of any type. When used, the data stored in a shared value is automatically synchronized between the ",(0,t.jsx)(n.a,{href:"/docs/fundamentals/glossary#javascript-thread",children:"JavaScript thread"})," and the ",(0,t.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"animatable-value",children:"Animatable value"}),"\n",(0,t.jsx)(n.p,{children:"An animatable value refers to a type of value that can be used for animations. These values include numbers, strings, and arrays of numbers."}),"\n",(0,t.jsxs)(n.p,{children:["String values can be animated if they are in a specific format, such as ",(0,t.jsx)(n.code,{children:'"10deg"'}),", ",(0,t.jsx)(n.code,{children:'"21%"'}),", or even colors like ",(0,t.jsx)(n.code,{children:'"#ffaabb"'})," or ",(0,t.jsx)(n.code,{children:'"rgba(100, 200, 100, 0.7)"'}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"animation-function",children:"Animation function"}),"\n",(0,t.jsx)(n.p,{children:"Animation functions are functions which let you create animations. They are building blocks that describe how your animations should behave."}),"\n",(0,t.jsx)(n.p,{children:"Reanimated comes with 3 built-in animation functions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/animations/withSpring",children:(0,t.jsx)(n.code,{children:"withSpring"})})," lets you create spring-based animation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/animations/withTiming",children:(0,t.jsx)(n.code,{children:"withTiming"})})," lets you create an animation based on duration and ",(0,t.jsx)(n.a,{href:"https://easings.net/",children:"easing"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/animations/withDecay",children:(0,t.jsx)(n.code,{children:"withDecay"})})," lets you create animations that mimic objects in motion that move with a given deceleration rate"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["These functions can be combined with ",(0,t.jsx)(n.a,{href:"/docs/fundamentals/glossary#animation-modifier",children:"animation modifiers"})," to create rich and complex animations."]}),"\n",(0,t.jsx)(n.h2,{id:"animation-modifier",children:"Animation modifier"}),"\n",(0,t.jsx)(n.p,{children:"Animation modifiers are functions used to customize animations. Also known as higher-order animations."}),"\n",(0,t.jsx)(n.p,{children:"Reanimated comes with 3 built-in modifiers:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/animations/withDelay",children:(0,t.jsx)(n.code,{children:"withDelay"})})," lets you add a delay before the animation starts"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/animations/withRepeat",children:(0,t.jsx)(n.code,{children:"withRepeat"})})," lets you repeat an animation certain number of times"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/animations/withSequence",children:(0,t.jsx)(n.code,{children:"withSequence"})})," lets you chain animation one after the other"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/animations/withClamp",children:(0,t.jsx)(n.code,{children:"withClamp"})})," lets you limit the animation boundaries to a specified range"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"animation-object",children:"Animation object"}),"\n",(0,t.jsxs)(n.p,{children:["An animation object is a value returned from ",(0,t.jsx)(n.a,{href:"/docs/fundamentals/glossary#animation-function",children:"animation functions"})," and ",(0,t.jsx)(n.a,{href:"/docs/fundamentals/glossary#animation-modifier",children:"modifiers"})," which holds the current state of the animation including its start and end conditions, as well as a ",(0,t.jsx)(n.code,{children:"onFrame"})," function. These values allow to calculate the animation state for each frame."]}),"\n",(0,t.jsxs)(n.p,{children:["When you pass an animation object to a ",(0,t.jsx)(n.a,{href:"/docs/fundamentals/glossary#shared-value",children:"shared value"})," it is automatically treated as an ",(0,t.jsx)(n.a,{href:"/docs/fundamentals/glossary#animatable-value",children:"animatable value"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"For example, consider this code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"sv.value = withSpring(100);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Even though, the ",(0,t.jsx)(n.code,{children:"withSpring"})," returns an animation object the final result that is stored in a shared value is just a number."]}),"\n",(0,t.jsx)(n.h2,{id:"animations-in-inline-styling",children:"Animations in inline styling"}),"\n",(0,t.jsxs)(n.p,{children:["Passing shared values directly to ",(0,t.jsx)(n.code,{children:"style"})," property without the use of ",(0,t.jsx)(n.code,{children:"useAnimatedStyle"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"function App() {\n  const width = useSharedValue(100);\n\n  return <Animated.View style={{ width }} />;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"layout-animation-modifier",children:"Layout animation modifier"}),"\n",(0,t.jsx)(n.p,{children:"Layout animation modifiers are methods used to customize layout animations."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"<Animated.View entering={FadeOutLeft.duration(500).easing(Easing.ease)} />\n"})}),"\n",(0,t.jsx)(n.p,{children:"Reanimated comes with plenty of built-in layout animation modifiers. Some of them are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".duration(durationMs: number)"})," - the length of the animation (in milliseconds)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".easing(easingFunction: EasingFunction)"})," - an easing function which defines the animation curve."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".springify()"})," - enables the spring-based animation configuration."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".damping(value: number)"})," - decides how quickly a spring stops moving."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".withCallback(callback: (finished: boolean) => void)"})," - the callback that will fire after the animation ends."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For a list of all available modifiers for each animation refer to the documentation of individual layout animation."}),"\n",(0,t.jsx)(n.h2,{id:"worklet",children:"Worklet"}),"\n",(0,t.jsxs)(n.p,{children:["Worklets are short-running JavaScript functions that can be run on the ",(0,t.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),". They can also be run on a JavaScript thread just as you would run a function in your code."]}),"\n",(0,t.jsxs)(n.p,{children:["Most of the time when working with Reanimated the code is automatically ",(0,t.jsx)(n.a,{href:"/docs/fundamentals/glossary#to-workletize",children:"workletized"})," and run on the UI thread by default."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const style = useAnimatedStyle(() => {\n  console.log('Running on the UI thread');\n  return { opacity: 0.5 };\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can create your own worklets using the ",(0,t.jsx)(n.code,{children:'"worklet";'})," directive at the top of a function."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function myWorklet() {\n  'worklet';\n  console.log('Running on the UI thread');\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://docs.swmansion.com/react-native-worklets/docs/threading/runOnUI",children:(0,t.jsx)(n.code,{children:"runOnUI"})})," lets you manually run worklets on the UI thread:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function myWorklet(greeting) {\n  'worklet';\n  console.log(`${greeting} from the UI thread`);\n}\n\nfunction onPress() {\n  // highlight-next-line\n  runOnUI(myWorklet)('Howdy');\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"to-workletize",children:"to workletize"}),"\n",(0,t.jsxs)(n.p,{children:["To convert a JavaScript function into a serializable object which can be copied and run over on ",(0,t.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Functions marked with ",(0,t.jsx)(n.code,{children:'"worklet";'})," directive are automatically picked up and workletized by the Reanimated Babel plugin."]}),"\n",(0,t.jsx)(n.h2,{id:"javascript-thread",children:"JavaScript thread"}),"\n",(0,t.jsx)(n.p,{children:"JavaScript thread (or JS thread for short) is responsible for handling JavaScript code execution in the app."}),"\n",(0,t.jsx)(n.p,{children:"This is the primary place where the React Native app code is executed."}),"\n",(0,t.jsx)(n.h2,{id:"ui-thread",children:"UI thread"}),"\n",(0,t.jsx)(n.p,{children:"UI thread is responsible for handling user interface updates. Also known as Main thread."}),"\n",(0,t.jsxs)(n.p,{children:["You can learn more about it by reading the ",(0,t.jsx)(n.a,{href:"https://reactnative.dev/architecture/threading-model",children:"Threading model"})," article in the official React Native docs."]}),"\n",(0,t.jsx)(n.h2,{id:"reanimated-babel-plugin",children:"Reanimated Babel plugin"}),"\n",(0,t.jsxs)(n.p,{children:["The plugin performs automatic ",(0,t.jsx)(n.a,{href:"/docs/fundamentals/glossary#to-workletize",children:"workletization"})," of certain functions used with Reanimated to reduce the amount of boilerplate code."]}),"\n",(0,t.jsxs)(n.p,{children:["You can learn the details by reading the ",(0,t.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/plugin/README-dev.md",children:"Reanimated Babel plugin README"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);