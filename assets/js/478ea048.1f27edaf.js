"use strict";(globalThis.webpackChunkdocs_reanimated=globalThis.webpackChunkdocs_reanimated||[]).push([[82],{30620:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var o=n(39471);const a={},r=o.createContext(a);function i(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:t},e.children)}},48404:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"nodes/interpolate","title":"interpolate","description":"interpolate","source":"@site/versioned_docs/version-1.x/nodes/interpolate.md","sourceDirName":"nodes","slug":"/nodes/interpolate","permalink":"/react-native-reanimated/docs/1.x/nodes/interpolate","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/versioned_docs/version-1.x/nodes/interpolate.md","tags":[],"version":"1.x","frontMatter":{},"sidebar":"docs","previous":{"title":"event","permalink":"/react-native-reanimated/docs/1.x/nodes/event"},"next":{"title":"interpolateColors","permalink":"/react-native-reanimated/docs/1.x/nodes/interpolateColors"}}');var a=n(47671),r=n(30620);const i={},l=void 0,s={},p=[{value:"<code>interpolate</code>",id:"interpolate",level:2},{value:"Note: In order to interpolate color output values, use <code>interpolateColors</code> instead.",id:"note-in-order-to-interpolate-color-output-values-use-interpolatecolors-instead",level:5}];function d(e){const t={a:"a",code:"code",h2:"h2",h5:"h5",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"interpolate",children:(0,a.jsx)(t.code,{children:"interpolate"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"interpolate(node, {\n  // Input range for the interpolation. Should be monotonically increasing.\n  inputRange: [nodeOrValue...],\n  // Output range for the interpolation, should be the same length as the input range.\n  outputRange: [nodeOrValue...],\n  // Sets the left and right extrapolate modes.\n  extrapolate?: Extrapolate.EXTEND | Extrapolate.CLAMP | Extrapolate.IDENTITY,\n  // Set the left extrapolate mode, the behavior if the input is less than the first value in inputRange.\n  extrapolateLeft?: Extrapolate.EXTEND | Extrapolate.CLAMP | Extrapolate.IDENTITY,\n  // Set the right extrapolate mode, the behavior if the input is greater than the last value in inputRange.\n  extrapolateRight?: Extrapolate.EXTEND | Extrapolate.CLAMP | Extrapolate.IDENTITY,\n})\n\nExtrapolate.EXTEND; // Will extend the range linearly.\nExtrapolate.CLAMP; // Will clamp the input value to the range.\nExtrapolate.IDENTITY; // Will return the input value if the input value is out of range.\n"})}),"\n",(0,a.jsx)(t.p,{children:"Maps an input value within a range to an output value within a range. Also supports different types of extrapolation for when the value falls outside the range and mapping to strings. For example, if you wanted to animate a rotation you could do:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"concat(\n  interpolate(node, { inputRange: [0, 360], outputRange: [0, 360] }),\n  'deg'\n);\n"})}),"\n",(0,a.jsxs)(t.h5,{id:"note-in-order-to-interpolate-color-output-values-use-interpolatecolors-instead",children:["Note: In order to interpolate color output values, use ",(0,a.jsx)(t.a,{href:"/react-native-reanimated/docs/1.x/nodes/interpolateColors",children:(0,a.jsx)(t.code,{children:"interpolateColors"})})," instead."]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);