"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[6773],{7637:(n,e,i)=>{i.d(e,{A:()=>t});const t="import React, { useState } from 'react';\nimport { View, Button, StyleSheet, SafeAreaView } from 'react-native';\nimport Animated, { withTiming, withDelay } from 'react-native-reanimated';\n\nconst WIDTH = 200;\n\nconst customEntering = (targetValues) => {\n  'worklet';\n  const animations = {\n    originX: withTiming(targetValues.targetOriginX, { duration: 3000 }),\n    opacity: withTiming(1, { duration: 2000 }),\n    borderRadius: withDelay(1500, withTiming(40, { duration: 3000 })),\n    transform: [\n      { rotate: withTiming('0deg', { duration: 4000 }) },\n      { scale: withTiming(1, { duration: 3500 }) },\n    ],\n  };\n  const initialValues = {\n    originX: -WIDTH,\n    opacity: 0,\n    borderRadius: 10,\n    transform: [{ rotate: '90deg' }, { scale: 0.2 }],\n  };\n  return {\n    initialValues,\n    animations,\n  };\n};\n\nconst customExiting = (values) => {\n  'worklet';\n  const animations = {\n    originX: withTiming(2 * WIDTH, { duration: 3000 }),\n    opacity: withTiming(0, { duration: 2000 }),\n    transform: [{ scale: withTiming(0.2, { duration: 3500 }) }],\n  };\n  const initialValues = {\n    originX: values.currentOriginX,\n    opacity: 1,\n    transform: [{ scale: 1 }],\n  };\n  return {\n    initialValues,\n    animations,\n  };\n};\n\nexport default function EnteringExample() {\n  const [show, setShow] = useState(false);\n\n  return (\n    <SafeAreaView>\n      <View style={styles.container}>\n        <Button title=\"Click me\" onPress={() => setShow(!show)} />\n        {show && (\n          <Animated.View\n            style={styles.card}\n            entering={customEntering}\n            exiting={customExiting}\n          />\n        )}\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    padding: 128,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    height: '100%',\n  },\n  card: {\n    width: WIDTH,\n    height: 300,\n    backgroundColor: '#b58df1',\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 20,\n  },\n});\n"},30620:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>s});var t=i(39471);const a={},r=t.createContext(a);function o(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),t.createElement(r.Provider,{value:e},n.children)}},96287:(n,e,i)=>{i.d(e,{A:()=>t});const t="import React, { useState } from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport Animated, {\n  withTiming,\n  withDelay,\n  withSpring,\n} from 'react-native-reanimated';\n\nconst customLayoutTransition = (values) => {\n  'worklet';\n  return {\n    animations: {\n      originX: withTiming(values.targetOriginX, { duration: 1000 }),\n      originY: withDelay(\n        1000,\n        withTiming(values.targetOriginY, { duration: 1000 })\n      ),\n      width: withSpring(values.targetWidth),\n      height: withSpring(values.targetHeight),\n    },\n\n    initialValues: {\n      originX: values.currentOriginX,\n      originY: values.currentOriginY,\n      width: values.currentWidth,\n      height: values.currentHeight,\n    },\n  };\n};\n\nconst Box = ({ label, state }) => {\n  return (\n    <Animated.View\n      layout={customLayoutTransition}\n      style={[\n        styles.box,\n        {\n          flexDirection: state ? 'row' : 'row-reverse',\n          height: state ? 100 : 180,\n        },\n      ]}>\n      <Text>{label}</Text>\n    </Animated.View>\n  );\n};\n\nconst Layout = () => {\n  const [state, setState] = useState(true);\n\n  const handleToggle = () => {\n    setState((prevState) => !prevState);\n  };\n\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.innerContainer,\n          {\n            alignItems: state ? 'center' : 'flex-start',\n          },\n        ]}>\n        <View style={{ flexDirection: state ? 'row' : 'column' }}>\n          {state && <Box key=\"A\" label=\"A\" state={state} />}\n          <Box key=\"B\" label=\"B\" state={state} />\n          {!state && <Box key=\"A\" label=\"A\" state={state} />}\n          <Box key=\"C\" label=\"C\" state={state} />\n        </View>\n      </View>\n      <Button onPress={handleToggle} title=\"Toggle\" />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 12,\n    padding: 16,\n  },\n  innerContainer: {\n    height: 600,\n    display: 'flex',\n    alignItems: 'center',\n  },\n  box: {\n    backgroundColor: 'lightblue',\n    borderRadius: 8,\n    margin: 5,\n    width: 100,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default Layout;\n"},97828:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"layout-animations/custom-animations","title":"Custom animations","description":"Custom animations give you a full control over the Entering/Exiting animations and Layout transitions. However, they tend to be hard to understand and maintain. We recommend starting with predefined Entering/Exiting, Keyframes and Layout presets first before using custom animations.","source":"@site/docs/layout-animations/custom-animations.mdx","sourceDirName":"layout-animations","slug":"/layout-animations/custom-animations","permalink":"/react-native-reanimated/docs/layout-animations/custom-animations","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/layout-animations/custom-animations.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Layout transitions","permalink":"/react-native-reanimated/docs/layout-animations/layout-transitions"},"next":{"title":"Skipping Layout Animations","permalink":"/react-native-reanimated/docs/layout-animations/layout-animation-config"}}');var a=i(47671),r=i(30620),o=i(7637),s=i(96287);const l={sidebar_position:4},c="Custom animations",d={},u=[{value:"Reference",id:"reference",level:2},{value:"Custom Exiting Animation",id:"custom-exiting-animation",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Example",id:"example",level:3},{value:"Custom Entering Animation",id:"custom-entering-animation",level:2},{value:"Arguments",id:"arguments-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Custom Layout Transition",id:"custom-layout-transition",level:2},{value:"Arguments",id:"arguments-2",level:3},{value:"Example",id:"example-2",level:3},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function m(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components},{CollapsibleCode:i,Details:t,ExampleVideo:l,PlatformCompatibility:c}=e;return i||g("CollapsibleCode",!0),t||g("Details",!0),l||g("ExampleVideo",!0),c||g("PlatformCompatibility",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"custom-animations",children:"Custom animations"})}),"\n","\n",(0,a.jsxs)(e.p,{children:["Custom animations give you a full control over the Entering/Exiting animations and Layout transitions. However, they tend to be hard to understand and maintain. We recommend starting with predefined ",(0,a.jsx)(e.a,{href:"/docs/layout-animations/entering-exiting-animations",children:"Entering/Exiting"}),", ",(0,a.jsx)(e.a,{href:"/docs/layout-animations/keyframe-animations",children:"Keyframes"})," and ",(0,a.jsx)(e.a,{href:"/docs/layout-animations/layout-transitions",children:"Layout"})," presets first before using custom animations."]}),"\n",(0,a.jsx)(e.h2,{id:"reference",children:"Reference"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:"function CustomAnimation(values) {\n  'worklet';\n  const animations = {\n    // your animations\n  };\n  const initialValues = {\n    // initial values for animations\n  };\n  const callback = (finished: boolean) => {\n    // optional callback that will fire when layout animation ends\n  };\n  return {\n    initialValues,\n    animations,\n    callback,\n  };\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"custom-exiting-animation",children:"Custom Exiting Animation"}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Type definitions"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"function CustomExitTransition (values: ExitAnimationsValues) => LayoutAnimation\n\ntype LayoutAnimation = {\n    initialValues: StyleProps;\n    animations: StyleProps;\n    callback?: (finished: boolean) => void;\n};\n\ntype ExitAnimationsValues = CurrentLayoutAnimationsValues &\n  WindowDimensions;\n\ntype CurrentLayoutAnimationsValues = {\n  ['currentOriginX', 'currentOriginY', 'currentWidth', 'currentHeight', 'currentBorderRadius', 'currentGlobalOriginX','currentGlobalOriginY']: number;\n};\n\ninterface WindowDimensions {\n    windowWidth: number;\n    windowHeight: number;\n}\n"})})]}),"\n",(0,a.jsx)(e.h3,{id:"arguments",children:"Arguments"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values"})," - contains information about where view was displayed and what were its dimensions","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentOriginX"})," - X coordinate of top left corner in parent's coordinate system"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentOriginY"})," - Y coordinate of top left corner in parent's coordinate system"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentWidth"})," - view's width"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentHeight"})," - view's height"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentBorderRadius"})," - view's border radius"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentGlobalOriginX"})," - X coordinate of top left corner in global coordinate system"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentGlobalOriginY"})," - Y coordinate of top left corner in global coordinate system"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(l,{sources:{android:"/react-native-reanimated/recordings/custom_animations/android_exiting_custom.mov",ios:"/react-native-reanimated/recordings/custom_animations/ios_exiting_custom.mov"}}),"\n",(0,a.jsx)(i,{src:o.A,showLines:[29,45]}),"\n",(0,a.jsx)(e.h2,{id:"custom-entering-animation",children:"Custom Entering Animation"}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Type definitions"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"function CustomEntryTransition (values: EntryAnimationsValues) => LayoutAnimation\n\ntype LayoutAnimation = {\n    initialValues: StyleProps;\n    animations: StyleProps;\n    callback?: (finished: boolean) => void;\n};\n\ntype EntryAnimationsValues = TargetLayoutAnimationsValues &\n  WindowDimensions;\n\ntype TargetLayoutAnimationsValues = {\n  ['targetOriginX', 'targetOriginY', 'targetWidth', 'targetHeight', 'targetBorderRadius', 'targetGlobalOriginX','targetGlobalOriginY']: number;\n};\n\ninterface WindowDimensions {\n    windowWidth: number;\n    windowHeight: number;\n}\n"})})]}),"\n",(0,a.jsx)(e.h3,{id:"arguments-1",children:"Arguments"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values"})," - contains information about where view wants to be displayed and what are its dimensions","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetOriginX"})," - X coordinate of top left corner in parent's coordinate system"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetOriginY"})," - Y coordinate of top left corner in parent's coordinate system"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetWidth"})," - view's width"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetHeight"})," - view's height"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetBorderRadius"})," - view's border radius"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetGlobalOriginX"})," - X coordinate of top left corder in global coordinate system"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetGlobalOriginY"})," - Y coordinate of top left corder in global coordinate system"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(l,{sources:{android:"/react-native-reanimated/recordings/custom_animations/android_entering_custom.mov",ios:"/react-native-reanimated/recordings/custom_animations/ios_entering_custom.mov"}}),"\n",(0,a.jsx)(i,{src:o.A,showLines:[6,28]}),"\n",(0,a.jsx)(e.h2,{id:"custom-layout-transition",children:"Custom Layout Transition"}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Type definitions"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"function CustomLayoutTransition (values: LayoutAnimationValues) => LayoutAnimation\n\ntype LayoutAnimation = {\n    initialValues: StyleProps;\n    animations: StyleProps;\n    callback?: (finished: boolean) => void;\n};\n\ntype LayoutAnimationsValues = CurrentLayoutAnimationsValues & TargetLayoutAnimationsValues & WindowDimensions;\n\ntype CurrentLayoutAnimationsValues = {\n    ['currentOriginX', 'currentOriginY', 'currentWidth', 'currentHeight', 'currentBorderRadius', 'currentGlobalOriginX','currentGlobalOriginY']: number;\n};\n\ntype TargetLayoutAnimationsValues = {\n    ['targetOriginX', 'targetOriginY', 'targetWidth', 'targetHeight', 'targetBorderRadius', 'targetGlobalOriginX','targetGlobalOriginY']: number;\n};\n\ninterface WindowDimensions {\n    windowWidth: number;\n    windowHeight: number;\n}\n"})})]}),"\n",(0,a.jsx)(e.h3,{id:"arguments-2",children:"Arguments"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values"})," - contains before and after information about the view's origin and dimensions","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetOriginX"})," - X coordinate of top left corner in parent's coordinate system"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetOriginY"})," - Y coordinate of top left corner in parent's coordinate system"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetWidth"})," - view's width"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetHeight"})," - view's height"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetBorderRadius"})," - view's border radius"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetGlobalOriginX"})," - X coordinate of top left corder in global coordinate system"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.targetGlobalOriginY"})," - Y coordinate of top left corder in global coordinate system"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentOriginX"})," - X coordinate of top left corner in parent's coordinate system (before)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentOriginY"})," - Y coordinate of top left corner in parent's coordinate system (before)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentWidth"})," - view's width (before)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentHeight"})," - view's height (before)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentBorderRadius"})," - view's border radius (before)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentGlobalOriginX"})," - X coordinate of top left corner in global coordinate system (before)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"values.currentGlobalOriginY"})," - Y coordinate of top left corner in global coordinate system (before)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"example-2",children:"Example"}),"\n",(0,a.jsx)(l,{sources:{android:"/react-native-reanimated/recordings/custom_animations/android_layout_custom.mov",ios:"/react-native-reanimated/recordings/custom_animations/ios_layout_custom.mov"}}),"\n",(0,a.jsx)(i,{src:s.A,showLines:[8,28]}),"\n",(0,a.jsx)(e.h2,{id:"remarks",children:"Remarks"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Each Reanimated component has a shared value that keeps the current animations assigned to that particular component. If you start a new animation for a specific property without providing an initial value for that property, the initial value will be taken from the last animation assigned to the component. The only exception is the ",(0,a.jsx)(e.code,{children:"Entering"})," animation, as we have no way to get the previous animation values."]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,a.jsx)(c,{android:!0,ios:!0})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(m,{...n})}):m(n)}function g(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);