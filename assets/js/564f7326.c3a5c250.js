"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[2250],{30620:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(39471);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}},80258:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"guides/worklets","title":"Worklets","description":"Worklets are short-running JavaScript functions that can run on the UI thread. Reanimated uses worklets to calculate view styles and react to events on the UI thread.","source":"@site/docs/guides/worklets.mdx","sourceDirName":"guides","slug":"/guides/worklets","permalink":"/react-native-reanimated/docs/guides/worklets","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/guides/worklets.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"worklets","sidebar_label":"Worklets","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Guides","permalink":"/react-native-reanimated/docs/category/guides"},"next":{"title":"Accessibility","permalink":"/react-native-reanimated/docs/guides/accessibility"}}');var s=t(47671),o=t(30620);const a={id:"worklets",sidebar_label:"Worklets",sidebar_position:1},i="Worklets",l={},c=[{value:"Defining worklets",id:"defining-worklets",level:2},{value:"Workletization",id:"workletization",level:2},{value:"Running worklets on the UI thread",id:"running-worklets-on-the-ui-thread",level:2},{value:"Running functions from worklets",id:"running-functions-from-worklets",level:2},{value:"Hoisting",id:"hoisting",level:2},{value:"Capturing closure",id:"capturing-closure",level:2},{value:"Passing data to worklets",id:"passing-data-to-worklets",level:2},{value:"Using worklets on the Web",id:"using-worklets-on-the-web",level:2},{value:"Other worklet runtimes",id:"other-worklet-runtimes",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"worklets",children:"Worklets"})}),"\n",(0,s.jsxs)(n.p,{children:["Worklets are short-running JavaScript functions that can run on the ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),". Reanimated uses worklets to calculate view styles and react to events on the UI thread."]}),"\n",(0,s.jsx)(n.h2,{id:"defining-worklets",children:"Defining worklets"}),"\n",(0,s.jsxs)(n.p,{children:["You can create your own worklets using the ",(0,s.jsx)(n.code,{children:"'worklet';"})," directive at the top of a function."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function myWorklet() {\n  'worklet';\n  console.log('Hello from a worklet');\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"workletization",children:"Workletization"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/plugin/README-dev.md#basics",children:"Reanimated Babel Plugin"})," looks for functions marked with the ",(0,s.jsx)(n.code,{children:"'worklet'"})," directive and converts them into serializable objects. We call this process ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#to-workletize",children:"workletization"}),". These objects can then be copied and run over on the UI thread."]}),"\n",(0,s.jsxs)(n.p,{children:["Most of the time when working with Reanimated and ",(0,s.jsx)(n.a,{href:"https://docs.swmansion.com/react-native-gesture-handler/",children:"Gesture Handler"})," the code is automatically workletized and run on the UI thread by default."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { useAnimatedStyle } from 'react-native-reanimated';\n\nfunction App() {\n  const style = useAnimatedStyle(() => {\n    // Running on the UI thread\n    return { opacity: 0.5 };\n  });\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"running-worklets-on-the-ui-thread",children:"Running worklets on the UI thread"}),"\n",(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.a,{href:"https://docs.swmansion.com/react-native-worklets/docs/threading/runOnUI",children:(0,s.jsx)(n.code,{children:"runOnUI"})})," to manually schedule worklet execution on the UI thread:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function myWorklet() {\n  'worklet';\n  console.log('Hello from the UI thread');\n}\n\nfunction onPress() {\n  runOnUI(myWorklet)();\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can pass arguments to worklets."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function myWorklet(greeting) {\n  'worklet';\n  console.log(`${greeting} from the UI thread`);\n}\n\nfunction onPress() {\n  runOnUI(myWorklet)('Howdy');\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"running-functions-from-worklets",children:"Running functions from worklets"}),"\n",(0,s.jsxs)(n.p,{children:["You can run functions on the JS thread from the UI thread with ",(0,s.jsx)(n.a,{href:"https://docs.swmansion.com/react-native-worklets/docs/threading/runOnJS",children:(0,s.jsx)(n.code,{children:"runOnJS"})}),". Most frequently used to call functions that aren't marked with a ",(0,s.jsx)(n.code,{children:"'worklet';"})," directive (i.e. most third-party libraries) or to update the React state."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { router } from 'expo-router';\nimport { Gesture } from 'react-native-gesture-handler';\n\nfunction App() {\n  const tap = Gesture.Tap().onEnd(() => {\n    // i'm a worklet too!\n    // highlight-next-line\n    runOnJS(router.back)();\n  });\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Functions passed to ",(0,s.jsx)(n.code,{children:"runOnJS"})," must be defined in the ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#javascript-thread",children:"JavaScript thread"})," scope, i.e. in the component body or the global scope. This code won't work because ",(0,s.jsx)(n.code,{children:"myFunction"})," is defined in the ",(0,s.jsx)(n.code,{children:"withTiming"})," callback, which is only executed in the ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function App() {\n  const tap = Gesture.Tap().onEnd(() => {\n    // myFunction is defined on the UI thread \ud83d\udea8\n    const myFunction = () => {};\n    runOnJS(myFunction)(); // \ud83d\udca5\n  });\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"hoisting",children:"Hoisting"}),"\n",(0,s.jsxs)(n.p,{children:["Functions marked with ",(0,s.jsx)(n.code,{children:"'worklet';"})," aren't ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting",children:"hoisted"}),". Besides affecting hoisting, the ",(0,s.jsx)(n.code,{children:"'worklet';"})," directive has no effect on the ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#javascript-thread",children:"JavaScript thread"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"capturing-closure",children:"Capturing closure"}),"\n",(0,s.jsxs)(n.p,{children:["Worklets are ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures",children:"closures"}),". They can access variables declared outside of their own scope. Only variables referenced in the worklet body will be captured inside the worklet scope."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const width = 135.5;\n\nfunction otherWorklet() {\n  'worklet';\n  console.log('Captured width is', width);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Capturing large JavaScript objects inside of a worklet can lead to performance issues."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const theme = {...}; // theme is a large object\n\nfunction myWorklet() {\n  'worklet';\n  console.log(theme.color); // \ud83d\udea8 referenced `color` but captured the whole `theme` object\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can get around this problem by first assigning the prop you want to use to a separate variable."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const theme = {...};\nconst color = theme.color;\n\nfunction myWorklet() {\n  'worklet';\n  console.log(color); // \u2705 captured only `color`\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"passing-data-to-worklets",children:"Passing data to worklets"}),"\n",(0,s.jsx)(n.p,{children:"Worklets can return data within the same thread."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function returningWorklet() {\n  'worklet';\n  return \"I'm back\"; // on the UI thread\n}\n\nfunction someWorklet() {\n  'worklet';\n  const what = returningWorklet(); // still on the UI thread\n  console.log('On the UI thread, other worklet says', what);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To pass data between UI and JS thread we use ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#shared-value",children:"shared values"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { useSharedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const width = useSharedValue(100);\n\n  function myWorklet() {\n    'worklet';\n    width.value += 50;\n  }\n\n  useEffect(() => {\n    console.log(width.value); // available on both JS and UI thread\n  }, []);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"using-worklets-on-the-web",children:"Using worklets on the Web"}),"\n",(0,s.jsx)(n.p,{children:"There's no separate UI thread available on the Web. Because of that, when Reanimated runs in the browser, worklets are resolved to plain JavaScript functions."}),"\n",(0,s.jsxs)(n.p,{children:["However, the ",(0,s.jsx)(n.code,{children:"'worklet';"})," directive is still necessary on the Web, because Reanimated relies on the Babel plugin to capture dependencies inside worklet functions."]}),"\n",(0,s.jsx)(n.h2,{id:"other-worklet-runtimes",children:"Other worklet runtimes"}),"\n",(0,s.jsxs)(n.p,{children:["Worklets can run in other runtimes than the one provided by Reanimated. For example ",(0,s.jsx)(n.a,{href:"https://github.com/mrousavy/react-native-vision-camera",children:"VisionCamera"})," and ",(0,s.jsx)(n.a,{href:"https://github.com/Expensify/react-native-live-markdown",children:"LiveMarkdown"})," create their own worklet runtimes."]}),"\n",(0,s.jsxs)(n.p,{children:["You can create your own worklet runtimes with ",(0,s.jsx)(n.a,{href:"https://docs.swmansion.com/react-native-worklets/docs/threading/createWorkletRuntime",children:(0,s.jsx)(n.code,{children:"createWorkletRuntime"})})," function."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);