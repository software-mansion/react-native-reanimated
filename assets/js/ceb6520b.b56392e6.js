"use strict";(globalThis.webpackChunkdocs_reanimated=globalThis.webpackChunkdocs_reanimated||[]).push([[5092],{30620:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>d});var t=i(39471);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}},95847:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"animations/timing","title":"Timing","description":"Updates position node by running timing based animation from a given position to a destination determined by toValue. The animation is expected to last duration milliseconds and use easing function that could be set to one of the nodes exported by the Easing object.","source":"@site/versioned_docs/version-1.x/animations/timing.md","sourceDirName":"animations","slug":"/animations/timing","permalink":"/react-native-reanimated/docs/1.x/animations/timing","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/versioned_docs/version-1.x/animations/timing.md","tags":[],"version":"1.x","frontMatter":{"id":"timing","title":"Timing","sidebar_label":"Timing"},"sidebar":"docs","previous":{"title":"Clock","permalink":"/react-native-reanimated/docs/1.x/clock"},"next":{"title":"Decay","permalink":"/react-native-reanimated/docs/1.x/animations/decay"}}');var o=i(47671),a=i(30620);const s={id:"timing",title:"Timing",sidebar_label:"Timing"},d=void 0,r={},c=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"timing(\n  clock,\n  { finished, position, frameTime, time },\n  { toValue, duration, easing }\n);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Updates ",(0,o.jsx)(n.code,{children:"position"})," node by running timing based animation from a given position to a destination determined by ",(0,o.jsx)(n.code,{children:"toValue"}),". The animation is expected to last ",(0,o.jsx)(n.code,{children:"duration"})," milliseconds and use ",(0,o.jsx)(n.code,{children:"easing"})," function that could be set to one of the nodes exported by the ",(0,o.jsx)(n.code,{children:"Easing"})," object.\nThe ",(0,o.jsx)(n.code,{children:"frameTime"})," node will also get updated and represents the progress of animation in milliseconds (how long the animation has lasted so far), similar to the ",(0,o.jsx)(n.code,{children:"time"})," node that just indicates the last clock time the animation node has been evaluated. Both of these variables are expected to be reset before restarting the animation. Finally ",(0,o.jsx)(n.code,{children:"finished"})," node will be set to ",(0,o.jsx)(n.code,{children:"1"})," when the position reaches the final value or when ",(0,o.jsx)(n.code,{children:"frameTime"})," exceeds ",(0,o.jsx)(n.code,{children:"duration"}),"."]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);