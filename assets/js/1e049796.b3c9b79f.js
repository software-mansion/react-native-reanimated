"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[6020],{14276:(e,n,t)=>{t.d(n,{A:()=>s});const s="import { StyleSheet, View, TouchableOpacity, Text } from 'react-native';\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport Animated, {\n  makeMutable,\n  runOnJS,\n  runOnUI,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\nimport type { SharedValue } from 'react-native-reanimated';\nimport useThemedTextStyle from '@site/src/hooks/useThemedTextStyle';\n\ntype CheckListSelectorProps = {\n  items: string[];\n  onSubmit: (selectedItems: string[]) => void;\n};\n\nfunction CheckListSelector({ items, onSubmit }: CheckListSelectorProps) {\n  const textColor = useThemedTextStyle();\n\n  const checkListItemProps = useMemo(\n    () =>\n      items.map((item) => ({\n        item,\n        // highlight-next-line\n        selected: makeMutable(false),\n      })),\n    [items]\n  );\n\n  const handleSubmit = useCallback(() => {\n    runOnUI(() => {\n      const selectedItems = checkListItemProps\n        .filter((props) => props.selected.value)\n        .map((props) => props.item);\n\n      runOnJS(onSubmit)(selectedItems);\n    })();\n  }, [checkListItemProps, onSubmit]);\n\n  return (\n    <View style={styles.checkList}>\n      {checkListItemProps.map((props) => (\n        <CheckListItem key={props.item} {...props} />\n      ))}\n      <TouchableOpacity style={styles.submitButton} onPress={handleSubmit}>\n        <Text style={[styles.submitButtonText, textColor]}>Submit</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\ntype CheckListItemProps = {\n  item: string;\n  selected: SharedValue<boolean>;\n};\n\nfunction CheckListItem({ item, selected }: CheckListItemProps) {\n  const textColor = useThemedTextStyle();\n\n  const onPress = useCallback(() => {\n    // highlight-start\n    // No need to update the array of selected items, just toggle\n    // the selected value thanks to separate shared values\n    runOnUI(() => {\n      selected.value = !selected.value;\n    })();\n    // highlight-end\n  }, [selected]);\n\n  return (\n    <TouchableOpacity style={styles.listItem} onPress={onPress}>\n      {/* highlight-start */}\n      {/* No need to use `useDerivedValue` hook to get the `selected` value */}\n      <CheckBox value={selected} />\n      {/* highlight-end */}\n      <Text style={[styles.listItemText, textColor]}>{item}</Text>\n    </TouchableOpacity>\n  );\n}\n\ntype CheckBoxProps = {\n  value: SharedValue<boolean>;\n};\n\nfunction CheckBox({ value }: CheckBoxProps) {\n  const checkboxTickStyle = useAnimatedStyle(() => ({\n    opacity: value.value ? 1 : 0,\n  }));\n\n  return (\n    <View style={styles.checkBox}>\n      <Animated.View style={[styles.checkBoxTick, checkboxTickStyle]} />\n    </View>\n  );\n}\n\nconst ITEMS = [\n  '\ud83d\udc08 Cat',\n  '\ud83d\udc15 Dog',\n  '\ud83e\udd86 Duck',\n  '\ud83d\udc07 Rabbit',\n  '\ud83d\udc01 Mouse',\n  '\ud83d\udc13 Rooster',\n];\n\nexport default function App() {\n  const textColor = useThemedTextStyle();\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n\n  return (\n    <View style={styles.container}>\n      <CheckListSelector items={ITEMS} onSubmit={setSelectedItems} />\n      <Text style={textColor}>\n        Selected items:{' '}\n        {selectedItems.length ? selectedItems.join(', ') : 'None'}\n      </Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  checkList: {\n    gap: 8,\n    padding: 16,\n  },\n  listItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n  },\n  listItemText: {\n    fontSize: 20,\n  },\n  checkBox: {\n    width: 16,\n    height: 16,\n    borderRadius: 4,\n    borderWidth: 1,\n    padding: 2,\n    borderColor: 'var(--swm-purple-dark-100)',\n  },\n  checkBoxTick: {\n    flex: 1,\n    borderRadius: 2,\n    backgroundColor: 'var(--swm-purple-dark-100)',\n  },\n  submitButton: {\n    backgroundColor: 'var(--swm-purple-dark-100)',\n    alignItems: 'center',\n    borderRadius: 4,\n    padding: 8,\n    marginTop: 16,\n  },\n  submitButtonText: {\n    color: 'var(--swm-off-white)',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n});\n"},18202:(e,n,t)=>{t.d(n,{A:()=>i});var s=t(10287),a=t(14442);const i=()=>{const{colorMode:e}=(0,s.G)();return"light"===e?l.darkText:l.lightText},l=a.A.create({lightText:{color:"var(--swm-off-white)"},darkText:{color:"var(--swm-navy-light-100)"}})},56457:(e,n,t)=>{t.d(n,{A:()=>j});var s=t(14442),a=t(31071),i=t(21844),l=t(8589),r=t(39471),o=t(19727),c=t(18202),d=t(47671);const u={code:"function MakeMutableTsx1(){const{checkListItemProps,runOnJS,onSubmit}=this.__closure;const selectedItems=checkListItemProps.filter(function(props){return props.selected.value;}).map(function(props){return props.item;});runOnJS(onSubmit)(selectedItems);}"};function h(e){let{items:n,onSubmit:t}=e;const s=(0,c.A)(),h=(0,r.useMemo)(()=>n.map(e=>({item:e,selected:(0,o.makeMutable)(!1)})),[n]),m=(0,r.useCallback)(()=>{(0,o.runOnUI)(function(e){let{_worklet_10916085020201_init_data:n,checkListItemProps:t,runOnJS:s,onSubmit:a}=e;const i=function(){const e=t.filter(e=>e.selected.value).map(e=>e.item);s(a)(e)};return i.__closure={checkListItemProps:t,runOnJS:s,onSubmit:a},i.__workletHash=0x9ed995eb629,i.__initData=n,i}({_worklet_10916085020201_init_data:u,checkListItemProps:h,runOnJS:o.runOnJS,onSubmit:t}))()},[h,t]);return(0,d.jsxs)(l.A,{style:f.checkList,children:[h.map(e=>(0,d.jsx)(p,{...e},e.item)),(0,d.jsx)(i.A,{style:f.submitButton,onPress:m,children:(0,d.jsx)(a.A,{style:[f.submitButtonText,s],children:"Submit"})})]})}const m={code:"function MakeMutableTsx2(){const{selected}=this.__closure;selected.value=!selected.value;}"};function p(e){let{item:n,selected:t}=e;const s=(0,c.A)(),l=(0,r.useCallback)(()=>{(0,o.runOnUI)(function(e){let{_worklet_17176899944473_init_data:n,selected:t}=e;const s=function(){t.value=!t.value};return s.__closure={selected:t},s.__workletHash=0xf9f4f050019,s.__initData=n,s}({_worklet_17176899944473_init_data:m,selected:t}))()},[t]);return(0,d.jsxs)(i.A,{style:f.listItem,onPress:l,children:[(0,d.jsx)(b,{value:t}),(0,d.jsx)(a.A,{style:[f.listItemText,s],children:n})]})}const x={code:"function MakeMutableTsx3(){const{value}=this.__closure;return{opacity:value.value?1:0};}"};function b(e){let{value:n}=e;const t=(0,o.useAnimatedStyle)(function(e){let{_worklet_1927210694659_init_data:n,value:t}=e;const s=()=>({opacity:t.value?1:0});return s.__closure={value:t},s.__workletHash=1927210694659,s.__initData=n,s}({_worklet_1927210694659_init_data:x,value:n}));return(0,d.jsx)(l.A,{style:f.checkBox,children:(0,d.jsx)(o.default.View,{style:[f.checkBoxTick,t]})})}const v=["\ud83d\udc08 Cat","\ud83d\udc15 Dog","\ud83e\udd86 Duck","\ud83d\udc07 Rabbit","\ud83d\udc01 Mouse","\ud83d\udc13 Rooster"];function j(){const e=(0,c.A)(),[n,t]=(0,r.useState)([]);return(0,d.jsxs)(l.A,{style:f.container,children:[(0,d.jsx)(h,{items:v,onSubmit:t}),(0,d.jsxs)(a.A,{style:e,children:["Selected items:"," ",n.length?n.join(", "):"None"]})]})}const f=s.A.create({container:{flex:1,alignItems:"center",justifyContent:"center"},checkList:{gap:8,padding:16},listItem:{flexDirection:"row",alignItems:"center",gap:12},listItemText:{fontSize:20},checkBox:{width:16,height:16,borderRadius:4,borderWidth:1,padding:2,borderColor:"var(--swm-purple-dark-100)"},checkBoxTick:{flex:1,borderRadius:2,backgroundColor:"var(--swm-purple-dark-100)"},submitButton:{backgroundColor:"var(--swm-purple-dark-100)",alignItems:"center",borderRadius:4,padding:8,marginTop:16},submitButtonText:{color:"var(--swm-off-white)",fontSize:16,fontWeight:"bold"}})},84566:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"advanced/makeMutable","title":"makeMutable","description":"The usage of makeMutable is discouraged in most cases. It\'s recommended to use the useSharedValue hook instead unless you know what you\'re doing and you are aware of the consequences (see the Remarks section).","source":"@site/versioned_docs/version-3.x/advanced/makeMutable.mdx","sourceDirName":"advanced","slug":"/advanced/makeMutable","permalink":"/react-native-reanimated/docs/3.x/advanced/makeMutable","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-3.x/advanced/makeMutable.mdx","tags":[],"version":"3.x","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"setNativeProps","permalink":"/react-native-reanimated/docs/3.x/advanced/setNativeProps"},"next":{"title":"Debugging","permalink":"/react-native-reanimated/docs/3.x/category/debugging"}}');var a=t(47671),i=t(30620),l=t(56457),r=t(14276);const o={sidebar_position:9},c="makeMutable",d={},u=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>initial</code>",id:"initial",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Comparison with <code>useSharedValue</code>",id:"comparison-with-usesharedvalue",level:3},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:t,Indent:s,InteractiveExample:o,PlatformCompatibility:c}=n;return t||p("Details",!0),s||p("Indent",!0),o||p("InteractiveExample",!0),c||p("PlatformCompatibility",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"makemutable",children:"makeMutable"})}),"\n",(0,a.jsxs)(n.admonition,{type:"caution",children:[(0,a.jsxs)(n.p,{children:["The usage of ",(0,a.jsx)(n.code,{children:"makeMutable"})," is discouraged in most cases. It's recommended to use the ",(0,a.jsx)(n.a,{href:"/docs/core/useSharedValue",children:(0,a.jsx)(n.code,{children:"useSharedValue"})})," hook instead unless you know what you're doing and you are aware of the consequences (see the ",(0,a.jsx)(n.a,{href:"#remarks",children:"Remarks"})," section)."]}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"makeMutable"})," is used internally and its behavior may change over time."]})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"makeMutable"})," is a function internally used by the ",(0,a.jsx)(n.a,{href:"/docs/core/useSharedValue",children:(0,a.jsx)(n.code,{children:"useSharedValue"})})," hook to create a ",(0,a.jsx)(n.a,{href:"/docs/fundamentals/glossary#shared-value",children:"shared value"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"It makes it possible to create mutable values without the use of the hook, which can be useful in some cases (e.g. in the global scope, as an array of mutable values, etc.)."}),"\n",(0,a.jsxs)(n.p,{children:["The created object is, in fact, the same as the one returned by ",(0,a.jsx)(n.code,{children:"useSharedValue"})," hook, so the further usage is the same."]}),"\n",(0,a.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { makeMutable } from 'react-native-reanimated';\n\nconst mv = makeMutable(100);\n"})}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Type definitions"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"interface SharedValue<Value = unknown> {\n  value: Value;\n  get(): Value;\n  set(value: Value | ((value: Value) => Value)): void;\n  addListener: (listenerID: number, listener: (value: Value) => void) => void;\n  removeListener: (listenerID: number) => void;\n  modify: (\n    modifier?: <T extends Value>(value: T) => T,\n    forceUpdate?: boolean\n  ) => void;\n}\n\nfunction makeMutable<Value>(initial: Value): SharedValue<Value>;\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,a.jsx)(n.h4,{id:"initial",children:(0,a.jsx)(n.code,{children:"initial"})}),"\n",(0,a.jsxs)(n.p,{children:["The value you want to be initially stored in the mutable. It can be any JavaScript value like ",(0,a.jsx)(n.code,{children:"number"}),", ",(0,a.jsx)(n.code,{children:"string"})," or ",(0,a.jsx)(n.code,{children:"boolean"})," but also data structures such as ",(0,a.jsx)(n.code,{children:"array"})," and ",(0,a.jsx)(n.code,{children:"object"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"makeMutable"})," returns a mutable value initially set to the ",(0,a.jsx)(n.code,{children:"initial"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["You can access data stored in the mutable with either its ",(0,a.jsx)(n.code,{children:"value"})," property or ",(0,a.jsx)(n.code,{children:"get"})," and ",(0,a.jsx)(n.code,{children:"set"})," methods."]}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n","\n",(0,a.jsx)(o,{src:r.A,component:l.A,showCode:!0}),"\n",(0,a.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["We use ",(0,a.jsx)(n.em,{children:"mutable value"})," name for an object created by ",(0,a.jsx)(n.code,{children:"makeMutable"})," to distinguish it from the ",(0,a.jsx)(n.em,{children:"shared value"})," created by ",(0,a.jsx)(n.code,{children:"useSharedValue"}),". Technically, ",(0,a.jsx)(n.em,{children:"shared value"})," is a ",(0,a.jsx)(n.em,{children:"mutable value"})," with an automatic cleanup."]})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["All remarks from the ",(0,a.jsx)(n.a,{href:"/docs/core/useSharedValue",children:"useSharedValue"})," hook apply to ",(0,a.jsx)(n.code,{children:"makeMutable"})," as well."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Don't call ",(0,a.jsx)(n.code,{children:"makeMutable"})," directly in the component scope. When component re-renders, it will create the completely new object (with the new ",(0,a.jsx)(n.code,{children:"initial"})," value if it was changed) and the state of the previous mutable value will be lost."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s,{children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"function App() {\n  const [counter, setCounter] = useState(0);\n  const mv = makeMutable(counter); // \ud83d\udea8 creates a new mutable value on each render\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCounter((prev) => prev + 1); // updates the counter stored in the component state\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [mv]);\n\n  useAnimatedReaction(\n    () => mv.value,\n    (value) => {\n      console.log(value); // prints 0, 1, 2, ...\n    }\n  );\n}\n"})})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"cancelAnimation"})," to stop all animations running on the mutable value if it's no longer needed and there are still some animations running. Be super careful with infinite animations, as they will never stop unless you cancel them manually."]}),"\n"]}),"\n",(0,a.jsx)(s,{children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"function App() {\n  const mv = useMemo(() => makeMutable(0), []);\n\n  useEffect(() => {\n    mv.value = withRepeat(withSpring(100), -1, true); // creates an infinite animation\n\n    return () => {\n      cancelAnimation(mv); // \u2705 stops the infinite animation on component unmount\n    };\n  }, []);\n}\n"})})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["You don't have to use ",(0,a.jsx)(n.code,{children:"cancelAnimation"})," when the value is not animated. It will be garbage collected automatically when no more references to it exist."]}),"\n"]}),"\n",(0,a.jsx)(s,{children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const someFlag = makeMutable(false);\n\nfunction App() {\n  someFlag.value = true; // \u2705 no need to cancel the animation later on\n}\n"})})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["When you decide to use ",(0,a.jsx)(n.code,{children:"makeMutable"}),", ensure that you follow ",(0,a.jsx)(n.a,{href:"https://react.dev/reference/rules",children:"Rules of React"})," and avoid common ",(0,a.jsx)(n.code,{children:"useRef"})," pitfalls, such as modifying the reference during rendering (see the ",(0,a.jsx)(n.strong,{children:"Pitfall"})," section in the ",(0,a.jsx)(n.a,{href:"https://react.dev/reference/react/useRef",children:"useRef"})," documentation for more details)."]}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"comparison-with-usesharedvalue",children:["Comparison with ",(0,a.jsx)(n.code,{children:"useSharedValue"})]}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:(0,a.jsx)(n.code,{children:"makeMutable"})}),(0,a.jsx)(n.th,{children:(0,a.jsx)(n.code,{children:"useSharedValue"})})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Creates a new object on each call"}),(0,a.jsx)(n.td,{children:"Reuses the same object on each call"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsxs)(n.td,{children:["If ",(0,a.jsx)(n.code,{children:"initial"})," value changes, a new object with the new value is created"]}),(0,a.jsxs)(n.td,{children:["If ",(0,a.jsx)(n.code,{children:"initialValue"})," value changes, the initially created object is returned without any changes"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Can be used outside of the component scope"}),(0,a.jsx)(n.td,{children:"Can be used only inside the component scope"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Can be used in loops (also when the number of iterations is not constant)"}),(0,a.jsxs)(n.td,{children:["Can be used in loops only if the number of rendered hooks (",(0,a.jsx)(n.code,{children:"useSharedValue"})," calls) is constant"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Doesn't automatically cancel animations when the component is unmounted"}),(0,a.jsx)(n.td,{children:"Automatically cancels animations when the component is unmounted"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,a.jsx)(c,{android:!0,ios:!0,web:!0})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);