"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[9269],{25014:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"value","title":"Value","description":"Animated.Value is a container for storing values. It\'s is initialized with new Value(0) constructor. For backward compatibility there are provided API for setting value after it has been initialized:","source":"@site/versioned_docs/version-1.x/value.md","sourceDirName":".","slug":"/value","permalink":"/react-native-reanimated/docs/1.x/value","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/versioned_docs/version-1.x/value.md","tags":[],"version":"1.x","frontMatter":{"id":"value","title":"Value","sidebar_label":"Value"},"sidebar":"docs","previous":{"title":"Additional configuration","permalink":"/react-native-reanimated/docs/1.x/config"},"next":{"title":"Clock","permalink":"/react-native-reanimated/docs/1.x/clock"}}');var a=t(47671),s=t(30620);const o={id:"value",title:"Value",sidebar_label:"Value"},r=void 0,c={},d=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Animated.Value"})," is a container for storing values. It's is initialized with ",(0,a.jsx)(n.code,{children:"new Value(0)"})," constructor. For backward compatibility there are provided API for setting value after it has been initialized:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const v = new Value(0);\n/// ...\nv.setValue(100);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["While using ",(0,a.jsx)(n.code,{children:"Animated.Value"})," in functional components it's recommended that one should wrap instantiation with ",(0,a.jsx)(n.code,{children:"useRef(...)"})," or ",(0,a.jsx)(n.code,{children:"useMemo(...)"})," to use the same instance on re-render, or just simply use ",(0,a.jsx)(n.code,{children:"useValue"})," hook:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const v = useValue(0);\n/// ...\nv.setValue(100);\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},30620:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(39471);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);