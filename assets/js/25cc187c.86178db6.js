"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[9347],{28766:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"utilities/DynamicColorIOS","title":"DynamicColorIOS","description":"DynamicColorIOS is a workletized version of a React Native\'s DynamicColorIOS, designed to be used within Reanimated. It\'s a way to define colors that automatically adapt to light and dark mode on iOS.","source":"@site/docs/utilities/DynamicColorIOS.mdx","sourceDirName":"utilities","slug":"/utilities/DynamicColorIOS","permalink":"/react-native-reanimated/docs/utilities/DynamicColorIOS","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/utilities/DynamicColorIOS.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"getRelativeCoords","permalink":"/react-native-reanimated/docs/utilities/getRelativeCoords"},"next":{"title":"Advanced APIs","permalink":"/react-native-reanimated/docs/category/advanced-apis"}}');var o=t(47671),a=t(30620),r=(t(39471),t(14442));t(19727);r.A.create({container:{flex:1,padding:16,justifyContent:"space-evenly",alignItems:"center"},box:{height:100,width:100}});const l="import React, { useEffect } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport Animated, {\n  interpolateColor,\n  useAnimatedStyle,\n  useSharedValue,\n  withTiming,\n} from 'react-native-reanimated';\nimport { DynamicColorIOS } from 'react-native-reanimated';\n\nconst LIGHT_COLORS = ['#38acdd', '#57b495'];\nconst DARK_COLORS = ['#b58df1', '#ff6259'];\n\nexport default function DynamicColorIOSExample() {\n  const progress = useSharedValue(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      progress.value = withTiming(progress.value === 0 ? 1 : 0);\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [progress]);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    const lightColor = interpolateColor(progress.value, [0, 1], LIGHT_COLORS);\n    const darkColor = interpolateColor(progress.value, [0, 1], DARK_COLORS);\n\n    return {\n      // highlight-start\n      backgroundColor: DynamicColorIOS({\n        light: lightColor,\n        dark: darkColor,\n      }),\n      // highlight-end\n    };\n  });\n\n  return (\n    <View>\n      <Animated.View style={[styles.box, animatedStyle]} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n  },\n  box: {\n    height: 100,\n    width: 100,\n  },\n});\n",s={sidebar_position:5},c="DynamicColorIOS",d={},h=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>tuple</code>",id:"tuple",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:3},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components},{CollapsibleCode:t,Details:i,PlatformCompatibility:r}=n;return t||p("CollapsibleCode",!0),i||p("Details",!0),r||p("PlatformCompatibility",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"dynamiccolorios",children:"DynamicColorIOS"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"DynamicColorIOS"})," is a workletized version of a React Native's ",(0,o.jsx)(n.a,{href:"https://reactnative.dev/docs/dynamiccolorios",children:(0,o.jsx)(n.code,{children:"DynamicColorIOS"})}),", designed to be used within Reanimated. It's a way to define colors that automatically adapt to light and dark mode on iOS."]}),"\n",(0,o.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { DynamicColorIOS } from 'react-native-reanimated';\n\nfunction Example() {\n  const progress = useSharedValue(0);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    // ...\n\n    return {\n      // highlight-start\n      backgroundColor: DynamicColorIOS({\n        light: lightColor,\n        dark: darkColor,\n      }),\n      // hightlight-end\n    };\n  });\n}\n"})}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"Type definitions"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"function DynamicColorIOS(\n  {\n    light: ColorValue,\n    dark: ColorValue,\n    highContrastLight?: ColorValue,\n    highContrastDark?: ColorValue\n  }\n): DynamicColorValue;\n\ntype DynamicColorValue = {\n  dynamic: {\n    light: ColorValue,\n    dark: ColorValue,\n    highContrastLight?: ColorValue,\n    highContrastDark?: ColorValue\n  },\n}\n"})})]}),"\n",(0,o.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,o.jsx)(n.h4,{id:"tuple",children:(0,o.jsx)(n.code,{children:"tuple"})}),"\n",(0,o.jsxs)(n.p,{children:["An object with two mandatory keys: ",(0,o.jsx)(n.code,{children:"light"})," and ",(0,o.jsx)(n.code,{children:"dark"}),", and two optional keys: ",(0,o.jsx)(n.code,{children:"highContrastLight"})," and ",(0,o.jsx)(n.code,{children:"highContrastDark"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:["An object containing a ",(0,o.jsx)(n.code,{children:"dynamic"})," field, which holds the injected color values."]}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n","\n",(0,o.jsx)(t,{src:l,showLines:[22,45]}),"\n",(0,o.jsx)(n.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,o.jsx)(r,{ios:!0})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},30620:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(39471);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);