"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[6573],{9402:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>d,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"core/useSharedValue","title":"useSharedValue","description":"useSharedValue lets you define shared values in your components.","source":"@site/docs/core/useSharedValue.mdx","sourceDirName":"core","slug":"/core/useSharedValue","permalink":"/react-native-reanimated/docs/core/useSharedValue","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/docs/core/useSharedValue.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Core","permalink":"/react-native-reanimated/docs/category/core"},"next":{"title":"useAnimatedStyle","permalink":"/react-native-reanimated/docs/core/useAnimatedStyle"}}');var r=a(47671),s=a(30620),i=a(53487),l=a(30510);const d={sidebar_position:1},o="useSharedValue",c={},u=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>initialValue</code>",id:"initialvalue",level:4},{value:"Returns",id:"returns",level:3},{value:"React Compiler support",id:"react-compiler-support",level:4},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:a,Indent:t,InteractiveExample:d,PlatformCompatibility:o}=n;return a||v("Details",!0),t||v("Indent",!0),d||v("InteractiveExample",!0),o||v("PlatformCompatibility",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"usesharedvalue",children:"useSharedValue"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"useSharedValue"})," lets you define ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/glossary#shared-value",children:"shared values"})," in your components."]}),"\n",(0,r.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { useSharedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const sv = useSharedValue(100);\n\n  // read a shared value\n  console.log(sv.value);\n\n  // and modify it\n  sv.value += 50;\n}\n"})}),"\n",(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"Type definitions"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface SharedValue<Value = unknown> {\n  value: Value;\n  get(): Value;\n  set(value: Value | ((value: Value) => Value)): void;\n  addListener: (listenerID: number, listener: (value: Value) => void) => void;\n  removeListener: (listenerID: number) => void;\n  modify: (\n    modifier?: <T extends Value>(value: T) => T,\n    forceUpdate?: boolean\n  ) => void;\n}\n\nfunction useSharedValue<Value>(initialValue: Value): SharedValue<Value>;\n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsx)(n.h4,{id:"initialvalue",children:(0,r.jsx)(n.code,{children:"initialValue"})}),"\n",(0,r.jsxs)(n.p,{children:["The value you want to store initially in the shared value. It can be any JavaScript value like ",(0,r.jsx)(n.code,{children:"number"}),", ",(0,r.jsx)(n.code,{children:"string"})," or ",(0,r.jsx)(n.code,{children:"boolean"})," but also data structures such as ",(0,r.jsx)(n.code,{children:"array"})," and ",(0,r.jsx)(n.code,{children:"object"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"useSharedValue"})," returns a shared value initially set to the ",(0,r.jsx)(n.code,{children:"initialValue"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can access data stored in the shared value with either its ",(0,r.jsx)(n.code,{children:"value"})," property or ",(0,r.jsx)(n.code,{children:"get"})," and ",(0,r.jsx)(n.code,{children:"set"})," methods."]}),"\n",(0,r.jsx)(n.h4,{id:"react-compiler-support",children:"React Compiler support"}),"\n",(0,r.jsxs)(n.p,{children:["When working with the ",(0,r.jsx)(n.a,{href:"https://react.dev/learn/react-compiler",children:"React Compiler"}),", you should refrain from accessing and modifying the ",(0,r.jsx)(n.code,{children:"value"})," property directly. Instead, use the ",(0,r.jsx)(n.code,{children:"get"})," and ",(0,r.jsx)(n.code,{children:"set"})," methods. They're the alternative API for ",(0,r.jsx)(n.code,{children:"useSharedValue"}),", compliant with the React Compiler standards."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function App() {\n  const sv = useSharedValue(100);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    'worklet';\n    return { width: sv.get() * 100 };\n  });\n\n  const handlePress = () => {\n    sv.set((value) => value + 1);\n  };\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n","\n",(0,r.jsx)(d,{src:l.A,component:i.A,showCode:!0}),"\n",(0,r.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Don't read or modify the value of a shared value during a component's render. Access to ",(0,r.jsx)(n.code,{children:"value"})," property or calling ",(0,r.jsx)(n.code,{children:"get"}),"/",(0,r.jsx)(n.code,{children:"set"})," methods is a side-effect. Triggering side-effects during render ",(0,r.jsx)(n.a,{href:"https://react.dev/reference/rules/components-and-hooks-must-be-pure#side-effects-must-run-outside-of-render",children:"violates the Rules of React"}),". All reads from and writes to a shared value should happen in relevant callbacks which aren't executed during render, i.e. in ",(0,r.jsx)(n.code,{children:"useAnimatedStyle"})," or ",(0,r.jsx)(n.code,{children:"useEffect"})," hooks."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When you change the ",(0,r.jsx)(n.code,{children:"sv.value"})," Reanimated will update the styles and keep the shared value in sync between the threads. However, this won't trigger a typical React re-render because a shared value is a plain JavaScript object."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When you read the ",(0,r.jsx)(n.code,{children:"sv.value"})," on the ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/glossary#javascript-thread",children:"JavaScript thread"}),", the thread will get blocked until the value is fetched from the ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),". In most cases it will be negligible, but if the UI thread is busy or you are reading a value multiple times, the wait time needed to synchronize both threads may significantly increase."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When you change the ",(0,r.jsx)(n.code,{children:"sv.value"})," the update will happen synchronously on the ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),". On the other hand, on the ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/glossary#javascript-thread",children:"JavaScript thread"})," the update is asynchronous. This means when you try to immediately log the ",(0,r.jsx)(n.code,{children:"value"})," after the change it will log the previously stored value."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t,{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function App() {\n  const sv = useSharedValue(100); // initially set 100\n\n  sv.value += 50; // changing value stored in a shared value\n\n  console.log(sv.value); // will still log 100\n}\n"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Stay away from ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",children:"destructuring assignment"})," when working with shared values. While this is a completely valid JavaScript code it will make Reanimated unable to keep the reactivity of a shared value."]}),"\n"]}),"\n",(0,r.jsx)(t,{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function App() {\n  let { value } = sv; // don't do this\n\n  console.log(value); // you can read the value just fine\n\n  value += 50; // but this won't update the styles\n}\n"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When storing objects in a shared value, make sure to reassign an object instead of changing the properties individually."}),"\n"]}),"\n",(0,r.jsx)(t,{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function App() {\n  const sv = useSharedValue({ x: 0, y: 0 });\n\n  sv.value.x = 50; // Reanimated loses reactivity \ud83d\udea8\n\n  sv.value = { x: 50, y: 0 }; // \u2705\n}\n"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When storing large arrays or complex objects in a shared value, you can use ",(0,r.jsx)(n.code,{children:".modify"})," method to alter the existing value instead of creating a new one."]}),"\n"]}),"\n",(0,r.jsx)(t,{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function App() {\n  const sv = useSharedValue([1, 2, 3]);\n\n  sv.value.push(1000); // Reanimated loses reactivity \ud83d\udea8\n\n  sv.value = [...sv.value, 1000]; // works, but creates a new copy \u26a0\ufe0f\n\n  sv.modify((value) => {\n    'worklet';\n    value.push(1000); // \u2705\n    return value;\n  });\n}\n"})})}),"\n",(0,r.jsx)(n.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,r.jsx)(o,{android:!0,ios:!0,web:!0})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}function v(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},30510:(e,n,a)=>{a.d(n,{A:()=>t});const t="import React from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  // highlight-next-line\n  const width = useSharedValue<number>(100);\n\n  const handlePress = () => {\n    // highlight-next-line\n    width.value += 50;\n  };\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={{ ...styles.box, width }} />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  box: {\n    height: 100,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginVertical: 64,\n  },\n});\n"},53487:(e,n,a)=>{a.d(n,{A:()=>d});var t=a(14442),r=a(90424),s=a(8589),i=a(19727),l=a(47671);function d(){const e=(0,i.useSharedValue)(100);return(0,l.jsxs)(s.A,{style:o.container,children:[(0,l.jsx)(i.default.View,{style:{...o.box,width:e}}),(0,l.jsx)(r.A,{onPress:()=>{e.value+=50},title:"Click me"})]})}const o=t.A.create({container:{flex:1,alignItems:"center"},box:{height:100,backgroundColor:"#b58df1",borderRadius:20,marginVertical:64}})},90424:(e,n,a)=>{a.d(n,{A:()=>o});var t=a(39471),r=a(14442),s=a(21844),i=a(31071),l=t.forwardRef((e,n)=>{var a=e.accessibilityLabel,r=e.color,l=e.disabled,o=e.onPress,c=e.testID,u=e.title;return t.createElement(s.A,{accessibilityLabel:a,accessibilityRole:"button",disabled:l,focusable:!l,onPress:o,ref:n,style:[d.button,r&&{backgroundColor:r},l&&d.buttonDisabled],testID:c},t.createElement(i.A,{style:[d.text,l&&d.textDisabled]},u))});l.displayName="Button";var d=r.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const o=l}}]);