"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[3019],{26014:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>e,toc:()=>d});const e=JSON.parse('{"id":"layout-animations/list-layout-animations","title":"List Layout Animations","description":"itemLayoutAnimation lets you define a layout transition that\'s applied when list items layout changes. You can use one of the predefined transitions like LinearTransition or create your own transition.","source":"@site/versioned_docs/version-3.x/layout-animations/list-layout-animations.mdx","sourceDirName":"layout-animations","slug":"/layout-animations/list-layout-animations","permalink":"/react-native-reanimated/docs/3.x/layout-animations/list-layout-animations","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-3.x/layout-animations/list-layout-animations.mdx","tags":[],"version":"3.x","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"List Layout Animations","sidebar_label":"List Layout Animations"},"sidebar":"tutorialSidebar","previous":{"title":"Skipping Layout Animations","permalink":"/react-native-reanimated/docs/3.x/layout-animations/layout-animation-config"},"next":{"title":"Shared Element Transitions","permalink":"/react-native-reanimated/docs/3.x/category/shared-element-transitions"}}');var a=i(47671),o=i(30620);const s={sidebar_position:6,title:"List Layout Animations",sidebar_label:"List Layout Animations"},r=void 0,l={},d=[{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}];function c(n){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components},{Indent:i,PlatformCompatibility:e,Row:s,ThemedVideo:r}=t;return i||u("Indent",!0),e||u("PlatformCompatibility",!0),s||u("Row",!0),r||u("ThemedVideo",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"itemLayoutAnimation"})," lets you define a ",(0,a.jsx)(t.a,{href:"/docs/layout-animations/layout-transitions",children:"layout transition"})," that's applied when list items layout changes. You can use one of the ",(0,a.jsx)(t.a,{href:"/docs/layout-animations/layout-transitions#predefined-transitions",children:"predefined transitions"})," like ",(0,a.jsx)(t.code,{children:"LinearTransition"})," or create ",(0,a.jsx)(t.a,{href:"/docs/layout-animations/custom-animations#custom-layout-transition",children:"your own transition"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)(r,{sources:{light:"/recordings/layout-animations/listitem_light.mov",dark:"/recordings/layout-animations/listitem_dark.mov"}}),(0,a.jsx)("div",{style:{flexGrow:1},children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"import Animated, { LinearTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      // highlight-next-line\n      itemLayoutAnimation={LinearTransition}\n    />\n  );\n}\n"})})})]}),"\n",(0,a.jsx)(t.h2,{id:"remarks",children:"Remarks"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"itemLayoutAnimation"})," works only with a single-column ",(0,a.jsx)(t.code,{children:"Animated.FlatList"}),", ",(0,a.jsx)(t.code,{children:"numColumns"})," property cannot be greater than 1."]}),"\n",(0,a.jsxs)(t.li,{children:["You can change the ",(0,a.jsx)(t.code,{children:"itemLayoutAnimation"})," on the fly or disable it by setting it to ",(0,a.jsx)(t.code,{children:"undefined"}),"."]}),"\n"]}),"\n",(0,a.jsx)(i,{children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"function App() {\n  const [transition, setTransition] = useState(LinearTransition);\n\n  const changeTransition = () => {\n    // highlight-start\n    setTransition(\n      transition === LinearTransition ? JumpingTransition : LinearTransition\n    );\n    // highlight-end\n  };\n\n  const toggleTransition = () => {\n    // highlight-next-line\n    setTransition(transition ? undefined : LinearTransition);\n  };\n\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      // highlight-next-line\n      itemLayoutAnimation={transition}\n    />\n  );\n}\n"})})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["If the list items contain neither a ",(0,a.jsx)(t.code,{children:"key"})," nor ",(0,a.jsx)(t.code,{children:"id"})," property (which are used by default by the FlatList ",(0,a.jsx)(t.a,{href:"https://reactnative.dev/docs/flatlist#keyextractor",children:"keyExtractor"})," to create list item keys), you must provide your own implementation of the ",(0,a.jsx)(t.code,{children:"keyExtractor"})," function that returns a unique key for each list item."]}),"\n"]}),"\n",(0,a.jsx)(i,{children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"function App() {\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      itemLayoutAnimation={LinearTransition}\n      // highlight-next-line\n      keyExtractor={customKeyExtractor}\n    />\n  );\n}\n"})})}),"\n",(0,a.jsx)(t.h2,{id:"platform-compatibility",children:"Platform compatibility"}),"\n",(0,a.jsx)(e,{android:!0,ios:!0,web:!0})]})}function m(n={}){const{wrapper:t}={...(0,o.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}function u(n,t){throw new Error("Expected "+(t?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},30620:(n,t,i)=>{i.d(t,{R:()=>s,x:()=>r});var e=i(39471);const a={},o=e.createContext(a);function s(n){const t=e.useContext(o);return e.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),e.createElement(o.Provider,{value:t},n.children)}}}]);