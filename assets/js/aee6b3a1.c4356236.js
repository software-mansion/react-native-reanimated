"use strict";(globalThis.webpackChunkdocs_reanimated=globalThis.webpackChunkdocs_reanimated||[]).push([[5679],{30620:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(39471);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}},69069:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"guides/accessibility","title":"Accessibility","description":"In this section, we will explore how Reanimated provides support for enhanced accessibility in animations, particularly through its reduced motion functionality. This feature ensures a smoother experience for users who may have motion sensitivities or prefer less movement.","source":"@site/docs/guides/accessibility.mdx","sourceDirName":"guides","slug":"/guides/accessibility","permalink":"/react-native-reanimated/docs/guides/accessibility","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-reanimated/docs/guides/accessibility.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Worklets","permalink":"/react-native-reanimated/docs/guides/worklets"},"next":{"title":"Building for Android on Windows","permalink":"/react-native-reanimated/docs/guides/building-on-windows"}}');var s=i(47671),a=i(30620);const o={},r="Accessibility",d={},c=[{value:"Reduced motion in animations",id:"reduced-motion-in-animations",level:2},{value:"Reduced motion in Layout Animations",id:"reduced-motion-in-layout-animations",level:2},{value:"<code>useReducedMotion</code>",id:"usereducedmotion",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"accessibility",children:"Accessibility"})}),"\n",(0,s.jsx)(n.p,{children:"In this section, we will explore how Reanimated provides support for enhanced accessibility in animations, particularly through its reduced motion functionality. This feature ensures a smoother experience for users who may have motion sensitivities or prefer less movement."}),"\n",(0,s.jsx)(n.p,{children:"The reduced motion configuration can be used to define how animations should respond to the system's reduced motion setting.\nFor a given animation, the value can be set to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ReduceMotion.System"})," - This value adjusts the animation behavior based on whether the reduced motion accessibility setting is activated on the device. When enabled, the animation is disabled; otherwise, it remains active."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ReduceMotion.Always"})," - With this setting, the animation is consistently disabled, regardless of the device's accessibility configuration."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ReduceMotion.Never"})," - This option ensures that the animation remains enabled at all times."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["By default all animations are configured with ",(0,s.jsx)(n.code,{children:"ReduceMotion.System"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"reduced-motion-in-animations",children:"Reduced motion in animations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv1.value = withTiming(0, { reduceMotion: ReduceMotion.System });\n  sv2.value = withDelay(\n    1000,\n    withTiming(toValue, { duration }),\n    ReduceMotion.System\n  );\n  // ...\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"When reduced motion is enabled:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"withSpring"})," and ",(0,s.jsx)(n.code,{children:"withTiming"})," return the ",(0,s.jsx)(n.code,{children:"toValue"})," immediately"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"withDecay"})," returns the current value immediately, taking into account the clamp parameter"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"withDelay"})," initiates the next animation immediately"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"withRepeat"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["when the ",(0,s.jsx)(n.code,{children:"numberOfReps"})," is infinite or even and the animation is reversed, then the repeated animation does not start"]}),"\n",(0,s.jsx)(n.li,{children:"otherwise, the repeated animation runs once"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"withSequence"})," exclusively starts animations that have reduced motion disabled"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Higher-order animations pass the configuration to their children, only if the children have not been configured by the user."}),"\n",(0,s.jsxs)(n.p,{children:["For example, this animation will instantaneously reach the ",(0,s.jsx)(n.code,{children:"toValue"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(\n    1000,\n    withTiming(toValue, { duration }),\n    ReduceMotion.Always\n  );\n  // ...\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This animation will execute as usual even if reduced motion is enabled on the device:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(\n    1000,\n    withTiming(toValue, { duration }),\n    ReduceMotion.Never\n  );\n  // ...\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And here ",(0,s.jsx)(n.code,{children:"withTiming"})," will be executed as usual and with no delay:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(\n    1000,\n    withTiming(toValue, { duration, reduceMotion: ReduceMotion.Never }),\n    ReduceMotion.Always\n  );\n  // ...\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"reduced-motion-in-layout-animations",children:"Reduced motion in Layout Animations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { BounceIn } from 'react-native-reanimated';\n\nfunction App() {\n  const entering = BounceIn.reduceMotion(ReduceMotion.System);\n  // ...\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"When reduced motion is enabled:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"entering, keyframe, and layout animations instantaneously reach their endpoints."}),"\n",(0,s.jsx)(n.li,{children:"exiting animations and shared transitions are omitted."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"usereducedmotion",children:(0,s.jsx)(n.code,{children:"useReducedMotion"})}),"\n",(0,s.jsx)(n.p,{children:"This hook returns a boolean indicating whether the reduced motion setting was enabled when the app started.\nIt can be used in conjunction with other libraries or to conditionally display animations that are less intrusive."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { BounceIn } from 'react-native-reanimated';\n\nfunction App() {\n  const reduceMotion = useReducedMotion();\n  const entering = reduceMotion\n    ? FadeIn.reduceMotion(ReduceMotion.Never)\n    : BounceIn;\n  // ...\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);