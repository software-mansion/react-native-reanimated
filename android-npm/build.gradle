import groovy.json.JsonSlurper
import java.util.regex.Matcher
import java.util.regex.Pattern
configurations.maybeCreate("default")

def inputFile = new File(projectDir, '../../react-native/package.json')
def json = new JsonSlurper().parseText(inputFile.text)
def reactNativeVersion = json.version as String
def (major, minor, patch) = reactNativeVersion.tokenize('.')

def engine = "jsc"

abstract class replaceSoTask extends DefaultTask {
    public static String appName = ":app"
    public static String buildDir = "../../../android/app/build"
    public static String engine = "jsc"
    public static String reactVersion = "64"

    @TaskAction
    def run() {
        ant.unzip(
            src: "./react-native-reanimated-${reactVersion}-${engine}.aar",
            dest: "./tmp"
        )
        for(def abiVersion in ["x86", "x86_64", "armeabi-v7a", "arm64-v8a"]) {
            ant.sequential {
                copy(
                    tofile: "${buildDir}/intermediates/merged_native_libs/debug/out/lib/${abiVersion}/libfbjni.so",
                    file: "./tmp/jni/${abiVersion}/libfbjni.so",
                    overwrite: true
                )
            }
        }
    }
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String taskRequestName = gradle.getStartParameter().getTaskRequests().toString()
    Pattern pattern

    if(taskRequestName.contains("assemble")) {
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    }
    else {
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
    }
    Matcher matcher = pattern.matcher(taskRequestName)

    if(matcher.find()) {
        return matcher.group(1).toLowerCase()
    }
    return ""
}

def replaceSoTaskDebug
def replaceSoTaskRelease
if(Integer.parseInt(minor) < 65) {
    tasks.register("replaceSoTaskDebug", replaceSoTask)
    tasks.register("replaceSoTaskRelease", replaceSoTask)
    replaceSoTaskDebug = project.getTasks().getByPath(":react-native-reanimated:replaceSoTaskDebug")
    replaceSoTaskRelease = project.getTasks().getByPath(":react-native-reanimated:replaceSoTaskRelease")
}

rootProject.getSubprojects().forEach({project ->
    if (project.plugins.hasPlugin("com.android.application")) {
        if(project.ext.react.enableHermes) {
            engine = "hermes"
        }

        if(project.getProperties().get("android") && Integer.parseInt(minor) < 65) {
            def projectProperties = project.getProperties()
            if(!projectProperties.get("reanimated")
                || (projectProperties.get("reanimated") && projectProperties.get("reanimated").get("enablePackagingOptions"))
            ) {
                def flavorString = getCurrentFlavor()
                replaceSoTask.appName = project.getProperties().path
                replaceSoTask.buildDir = project.getProperties().buildDir
                replaceSoTask.engine = engine
                replaceSoTask.reactVersion = minor
                def appName = project.getProperties().path
                project.getProperties().android.packagingOptions.pickFirst("lib/**/libfbjni.so")

                replaceSoTaskDebug.dependsOn(
                    project.getTasks().getByPath("${appName}:merge${flavorString}DebugNativeLibs"),
                    project.getTasks().getByPath("${appName}:strip${flavorString}DebugDebugSymbols")
                )
                project.getTasks().getByPath("${appName}:package${flavorString}Debug").dependsOn(replaceSoTaskDebug)

                replaceSoTaskRelease.dependsOn(
                    project.getTasks().getByPath("${appName}:merge${flavorString}ReleaseNativeLibs"),
                    project.getTasks().getByPath("${appName}:strip${flavorString}ReleaseDebugSymbols")
                )
                project.getTasks().getByPath("${appName}:package${flavorString}Release").dependsOn(replaceSoTaskRelease)
            }
        }
    }
})

artifacts.add("default", file("react-native-reanimated-${minor}-${engine}.aar"))
