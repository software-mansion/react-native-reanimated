import groovy.json.JsonSlurper
import java.util.regex.Matcher
import java.util.regex.Pattern
configurations.maybeCreate("default")

def inputFile = new File(projectDir, '../../react-native/package.json')
def json = new JsonSlurper().parseText(inputFile.text)
def reactNativeVersion = json.version as String
def (major, minor, patch) = reactNativeVersion.tokenize('.')

def engine = "jsc"

abstract class replaceSoTask extends DefaultTask {
    public static String appName = ":app"
    public static String buildDir = "../../../android/app/build"

    @TaskAction
    def run() {
        for(def abiVersion in ["x86", "x86_64", "armeabi-v7a", "arm64-v8a"]) {
            ant.sequential {
                copy(
                        tofile: "${buildDir}/intermediates/merged_native_libs/debug/out/lib/${abiVersion}/libfbjni.so",
                        file: "../libSo/fbjni/jni/${abiVersion}/libfbjni.so",
                        overwrite: true
                )
            }
        }
    }
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String taskRequestName = gradle.getStartParameter().getTaskRequests().toString()
    Pattern pattern = Pattern.compile("(assemble|bundle|install|generate)(\\w*)(Release|Debug)")
    Matcher matcher = pattern.matcher(taskRequestName)

    if(matcher.find()) {
        return matcher.group(2)
    }

    return "NOT-FOUND"
}

def safelyFindTask(Project project, String path) {
    try {
        def appName = project.getProperties().path
        return project.getTasks().getByPath(path)
    }
    catch(Exception e) {
        return 'NOT-FOUND'
    }
}

def getTaskSafely(Project project, String path) {
    String taskName = safelyFindTask(project, path)

    if('NOT-FOUND'.equals(taskName)){
        String flavor = getCurrentFlavor()
        return safelyFindTask(project, path.replace(flavor, flavor.capitalize()))
    }
    return taskName
}

def replaceSoTaskDebug
def replaceSoTaskRelease
if(Integer.parseInt(minor) < 65) {
    tasks.register("replaceSoTaskDebug", replaceSoTask)
    tasks.register("replaceSoTaskRelease", replaceSoTask)
    replaceSoTaskDebug = project.getTasks().getByPath(":react-native-reanimated:replaceSoTaskDebug")
    replaceSoTaskRelease = project.getTasks().getByPath(":react-native-reanimated:replaceSoTaskRelease")
}

rootProject.getSubprojects().forEach({project ->
    if (project.plugins.hasPlugin("com.android.application")) {
        if(project.ext.react.enableHermes) {
            engine = "hermes"
        }

        if(project.getProperties().get("android") && Integer.parseInt(minor) < 65) {
            def projectProperties = project.getProperties()
            final NOTFOUND = "NOT-FOUND"
            if(!NOTFOUND.equals(getCurrentFlavor()) && (!projectProperties.get("reanimated")
                    || (projectProperties.get("reanimated") && projectProperties.get("reanimated").get("enablePackagingOptions")))
            ) {
                def flavorString = getCurrentFlavor()
                replaceSoTask.appName = project.getProperties().path
                replaceSoTask.buildDir = project.getProperties().buildDir
                def appName = project.getProperties().path

                replaceSoTaskDebug.dependsOn(
                        getTaskSafely(project, "${appName}:merge${flavorString}DebugNativeLibs"),
                        getTaskSafely(project, "${appName}:strip${flavorString}DebugDebugSymbols")
                )
                getTaskSafely(project, "${appName}:package${flavorString}Debug").dependsOn(replaceSoTaskDebug)

                replaceSoTaskRelease.dependsOn(
                        getTaskSafely(project, "${appName}:merge${flavorString}ReleaseNativeLibs"),
                        getTaskSafely(project, "${appName}:strip${flavorString}ReleaseDebugSymbols")
                )
                getTaskSafely(project, "${appName}:package${flavorString}Release").dependsOn(replaceSoTaskRelease)
            }
        }
    }
})

def minorCopy = Integer.parseInt(minor)
def aar = file("react-native-reanimated-${minorCopy}-${engine}.aar")

while (!aar.exists()) {
    minorCopy -= 1
    aar = file("react-native-reanimated-${minorCopy}-${engine}.aar")
    if (minorCopy < 63) {
      throw new GradleException('No aar for react-native-reanimated found.')
    }
    if (aar.exists()) {
      println "\n\n\n"
      println "****************************************************************************************"
      println "\n\n\n"
      println "WARNING reanimated - no version-specific reanimated AAR for react-native version " + minor + " found."
      println "Falling back to AAR for react-native version " + minorCopy
      println "The react-native JSI interface is not ABI-safe yet, this may result in crashes."
      println "Please post a pull request to implement support for react-native version " + minor + " to the reanimated repo."
      println "Thanks!"
      println "\n\n\n"
      println "****************************************************************************************"
    }    
}

artifacts.add("default", aar)

apply from: './expo/linking.gradle'
