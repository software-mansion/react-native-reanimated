"use strict";(self.webpackChunkdocs_worklets=self.webpackChunkdocs_worklets||[]).push([[7804],{620:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(9471);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},9015:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"threading/getRuntimeKind","title":"getRuntimeKind","description":"getRuntimeKind allows you to get the kind of the current runtime. It\'s useful in advanced scenarios, where you need to check the runtime kind before executing certain code paths or where you need to have separate implementations per runtime.","source":"@site/docs/threading/getRuntimeKind.mdx","sourceDirName":"threading","slug":"/threading/getRuntimeKind","permalink":"/react-native-worklets/docs/threading/getRuntimeKind","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-worklets/docs/threading/getRuntimeKind.mdx","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"createWorkletRuntime","permalink":"/react-native-worklets/docs/threading/createWorkletRuntime"},"next":{"title":"isWorkletFunction","permalink":"/react-native-worklets/docs/threading/isWorkletFunction"}}');var r=t(7671),o=t(620);const s={sidebar_position:8},l="getRuntimeKind",a={},c=[{value:"Reference",id:"reference",level:2},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Optimizations",id:"optimizations",level:2},{value:"Remarks",id:"remarks",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"getruntimekind",children:"getRuntimeKind"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"getRuntimeKind"})," allows you to get the ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/runtimeKinds",children:"kind of the current runtime"}),". It's useful in advanced scenarios, where you need to check the runtime kind before executing certain code paths or where you need to have separate implementations per runtime."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"getRuntimeKind"})," is a direct replacement for the deprecated ",(0,r.jsx)(n.code,{children:"_WORKLET"})," global variable."]}),"\n",(0,r.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {\n  getRuntimeKind,\n  runOnUI,\n  createWorkletRuntime,\n  runOnRuntime,\n} from 'react-native-worklets';\n\nconsole.log(getRuntimeKind()); // 1 (RN Runtime)\n\nrunOnUI(() => {\n  console.log(getRuntimeKind()); // 2 (UI Runtime)\n})();\n\nrunOnRuntime(createWorkletRuntime(), () => {\n  console.log(getRuntimeKind()); // 3 (Worker Runtime)\n})();\n"})}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Type definitions"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"enum RuntimeKind {\n  ReactNative = 1,\n  UI = 2,\n  Worker = 3,\n}\n\nfunction getRuntimeKind(): RuntimeKind;\n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:"An enum value representing the current runtime kind:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"})," for RN Runtime"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2"})," for UI Runtime"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"3"})," for Worker Runtime"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {\n  getRuntimeKind,\n  RuntimeKind,\n  runOnJS,\n  runOnUI,\n} from 'react-native-worklets';\n\nfunction logToConsole(message: string) {\n  console.log(message);\n}\n\nfunction log(message: string) {\n  'worklet';\n  if (getRuntimeKind() === RuntimeKind.ReactNative) {\n    console.log(`RN: ${message}`);\n  } else {\n    // Fun fact - this is how `console.log` is implemented on Worklet Runtimes.\n    runOnJS(logToConsole)(`UI: ${message}`);\n  }\n}\n\nfunction randomDispatch() {\n  if (Math.random() > 0.5) {\n    runOnUI(log)('Hello!');\n  } else {\n    log('Hello!');\n  }\n}\n\nrandomDispatch(); // Could log either \"RN: Hello!\" or \"UI: Hello!\"\n"})}),"\n",(0,r.jsx)(n.h2,{id:"optimizations",children:"Optimizations"}),"\n",(0,r.jsxs)(n.p,{children:["For micro-optimizations of your code you can skip the invocation of ",(0,r.jsx)(n.code,{children:"getRuntimeKind"})," and use the global variable ",(0,r.jsx)(n.code,{children:"__RUNTIME_KIND"})," directly:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {\n  getRuntimeKind,\n  runOnUI,\n  createWorkletRuntime,\n  runOnRuntime,\n} from 'react-native-worklets';\n\nconsole.log(globalThis.__RUNTIME_KIND); // 1 (RN Runtime)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Be aware that accessing the global variable ",(0,r.jsx)(n.code,{children:"__RUNTIME_KIND"})," before importing anything from ",(0,r.jsx)(n.code,{children:"react-native-worklets"})," might be undefined. This is because the global variable is set only after the ",(0,r.jsx)(n.code,{children:"react-native-worklets"})," module is loaded. This is especially important in Web contexts, where additional bundler optimizations may be in place."]}),"\n",(0,r.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If you're using the global variable ",(0,r.jsx)(n.code,{children:"__RUNTIME_KIND"})," make sure to reference it by accessing the global object, i.e. ",(0,r.jsx)(n.code,{children:"globalThis.__RUNTIME_KIND"})," to avoid the pitfall where you accidentally reference a local variable with the same name."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);