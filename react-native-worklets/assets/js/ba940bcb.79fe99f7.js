"use strict";(self.webpackChunkdocs_worklets=self.webpackChunkdocs_worklets||[]).push([[2754],{620:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(9471);const s={},o=i.createContext(s);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(o.Provider,{value:n},e.children)}},2266:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"worklets-babel-plugin/plugin-options","title":"Options","description":"Our plugin offers several optional functionalities that you may need to employ advanced APIs:","source":"@site/docs/worklets-babel-plugin/options.md","sourceDirName":"worklets-babel-plugin","slug":"/worklets-babel-plugin/plugin-options","permalink":"/react-native-worklets/docs/worklets-babel-plugin/plugin-options","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-worklets/docs/worklets-babel-plugin/options.md","tags":[],"version":"current","frontMatter":{"id":"plugin-options","title":"Options","sidebar_label":"Options"},"sidebar":"tutorialSidebar","previous":{"title":"About","permalink":"/react-native-worklets/docs/worklets-babel-plugin/about"},"next":{"title":"Experimental","permalink":"/react-native-worklets/docs/category/experimental"}}');var s=t(7671),o=t(620);const l={id:"plugin-options",title:"Options",sidebar_label:"Options"},a="Options for Worklets Babel Plugin",r={},c=[{value:"How to use",id:"how-to-use",level:2},{value:"Options",id:"options",level:2},{value:"relativeSourceLocation",id:"relativesourcelocation",level:3},{value:"disableInlineStylesWarning",id:"disableinlinestyleswarning",level:3},{value:"omitNativeOnlyData",id:"omitnativeonlydata",level:3},{value:"globals",id:"globals",level:3},{value:"substituteWebPlatformChecks",id:"substitutewebplatformchecks",level:3},{value:"disableSourceMaps",id:"disablesourcemaps",level:3},{value:"extraPlugins",id:"extraplugins",level:3},{value:"extraPresets",id:"extrapresets",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"options-for-worklets-babel-plugin",children:"Options for Worklets Babel Plugin"})}),"\n",(0,s.jsx)(n.p,{children:"Our plugin offers several optional functionalities that you may need to employ advanced APIs:"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Type definitions"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface ReanimatedPluginOptions {\n  relativeSourceLocation?: boolean;\n  disableInlineStylesWarning?: boolean;\n  omitNativeOnlyData?: boolean;\n  globals?: string[];\n  substituteWebPlatformChecks?: boolean;\n  disableSourceMaps?: boolean;\n  extraPlugins?: string[];\n  extraPresets?: string[];\n}\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsxs)(n.p,{children:["Using this is straightforward for Babel plugins; you just need to pass an object containing the options to the plugin in your ",(0,s.jsx)(n.code,{children:"babel.config.js"})," file."]}),"\n",(0,s.jsx)(n.p,{children:"Here's an example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"{7}",children:"module.exports = {\n  ...\n  plugins: [\n    ...\n    [\n      'react-native-worklets/plugin',\n      {\n        relativeSourceLocation: true,\n        disableInlineStylesWarning: true,\n        omitNativeOnlyData: true,\n        globals: ['myObjectOnUI'],\n        substituteWebPlatformChecks: true,\n      },\n    ],\n  ],\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,s.jsx)(n.h3,{id:"relativesourcelocation",children:"relativeSourceLocation"}),"\n",(0,s.jsxs)(n.p,{children:["Defaults to ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["This option dictates the passed file location for a worklet's source map. If you enable this option, the file paths will be relative to ",(0,s.jsx)(n.code,{children:"process.cwd"})," (the current directory where Babel executes). This can be handy for Jest test snapshots to ensure consistent results across machines."]}),"\n",(0,s.jsx)(n.h3,{id:"disableinlinestyleswarning",children:"disableInlineStylesWarning"}),"\n",(0,s.jsxs)(n.p,{children:["Defaults to ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Turning on this option suppresses a helpful warning when you use ",(0,s.jsx)(n.a,{href:"/docs/fundamentals/glossary#animations-in-inline-styling",children:"inline shared values"})," and might unintentionally write:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import Animated, {useSharedValue} from 'react-native-reanimated';\n\nfunction MyView() {\n  const width = useSharedValue(100);\n  return <Animated.View style={{ width: width.value }}>; // Loss of reactivity when using `width.value` instead of `width`!\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You'll receive a warning about accessing ",(0,s.jsx)(n.code,{children:"value"})," in an inline prop and the potential loss of reactivity that it causes. However, because there's no fail-safe mechanism that checks if the accessed property ",(0,s.jsx)(n.code,{children:"value"})," comes from a Shared Value during Babel transpilation, it might cause problems:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { View } from 'react-native';\n\ninterface MyProps {\n  taggedWidth: {\n    tag: string;\n    value: number;\n  };\n}\n\nfunction MyView({ taggedWidth }) {\n  return <View style={{ width: taggedWidth.value }} />; // This triggers a false warning.\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Enable this option to silence such false warnings."}),"\n",(0,s.jsx)(n.h3,{id:"omitnativeonlydata",children:"omitNativeOnlyData"}),"\n",(0,s.jsx)(n.p,{children:"Defaults to false."}),"\n",(0,s.jsx)(n.p,{children:"This option comes in handy for Web apps. Because Babel ordinarily doesn't get information about the target platform, it includes worklet data in the bundle that only Native apps find relevant. If you enable this option, your bundle size will be smaller."}),"\n",(0,s.jsx)(n.h3,{id:"globals",children:"globals"}),"\n",(0,s.jsx)(n.p,{children:"This is a list of identifiers (objects) that will not be copied to the UI thread if a worklet requires them. For instance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const someReference = 5;\nfunction foo() {\n  'worklet';\n  return someReference + 1;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, ",(0,s.jsx)(n.code,{children:"someReference"})," is not accessible on the UI thread. Consequently, we must copy it there, ensuring correct scoping, to keep the worklet from failing. But, consider this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"function bar() {\n  'worklet';\n  return null;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here, the identifier ",(0,s.jsx)(n.code,{children:"null"})," is already accessible on the UI thread. Therefore, we don't need to copy it and use a copied value there. While it might not immediately seem particularly useful to avoid copying the value, consider the following case:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"function setOnJS() {\n  global.something = 'JS THREAD';\n}\n\nfunction setOnUI() {\n  'worklet';\n  global.something = 'UI THREAD';\n}\n\nfunction readFromJS() {\n  console.log(global.something);\n}\n\nfunction readFromUI() {\n  'worklet';\n  console.log(global.something);\n}\n\nfunction run() {\n  setOnJS();\n  runOnUI(setOnUI)();\n  readFromJS();\n  runOnUI(readFromUI)();\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Without ",(0,s.jsx)(n.code,{children:"global"})," as a whitelisted identifier in this case, you'd only get:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"JS THREAD\nJS THREAD\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This output occurs because the entire ",(0,s.jsx)(n.code,{children:"global"})," object (!) would be copied to the UI thread for it to be assigned by ",(0,s.jsx)(n.code,{children:"setOnUI"}),". Then, ",(0,s.jsx)(n.code,{children:"readOnUI"})," would again copy the ",(0,s.jsx)(n.code,{children:"global"})," object and read from this copy."]}),"\n",(0,s.jsxs)(n.p,{children:["There is a ",(0,s.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-reanimated/blob/4.0.0-beta.3/packages/react-native-worklets/plugin/src/globals.ts",children:"huge list of identifiers whitelisted by default"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"substitutewebplatformchecks",children:"substituteWebPlatformChecks"}),"\n",(0,s.jsxs)(n.p,{children:["Defaults to ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["This option can also be useful for Web apps. In Reanimated, we have numerous checks to determine the right function implementation for a specific target platform. Enabling this option changes all the checks that identify if the target is a Web app to ",(0,s.jsx)(n.code,{children:"true"}),". This alteration can aid in tree-shaking and contribute to reducing the bundle size."]}),"\n",(0,s.jsx)(n.h3,{id:"disablesourcemaps",children:"disableSourceMaps"}),"\n",(0,s.jsxs)(n.p,{children:["Defaults to ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This option turns off the source map generation for worklets. Mostly used for testing purposes."}),"\n",(0,s.jsx)(n.h3,{id:"extraplugins",children:"extraPlugins"}),"\n",(0,s.jsx)(n.p,{children:"This is a list of Babel plugins that will be used when transforming worklets' code with Worklets Babel Plugin."}),"\n",(0,s.jsx)(n.h3,{id:"extrapresets",children:"extraPresets"}),"\n",(0,s.jsx)(n.p,{children:"This is a list of Babel presets that will be used when transforming worklets' code with Worklets Babel Plugin."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);