"use strict";(self.webpackChunkdocs_worklets=self.webpackChunkdocs_worklets||[]).push([[7224],{620:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var r=t(9471);const o={},i=r.createContext(o);function s(n){const e=r.useContext(i);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),r.createElement(i.Provider,{value:e},n.children)}},3836:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"threading/isWorkletFunction","title":"isWorkletFunction","description":"isWorkletFunction checks if a function is a worklet function. It only works with Reanimated Babel plugin enabled. Unless you are doing something with internals of Reanimated you shouldn\'t need to use this function.","source":"@site/docs/threading/isWorkletFunction.mdx","sourceDirName":"threading","slug":"/threading/isWorkletFunction","permalink":"/react-native-worklets/docs/threading/isWorkletFunction","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/docs-worklets/docs/threading/isWorkletFunction.mdx","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"getRuntimeKind","permalink":"/react-native-worklets/docs/threading/getRuntimeKind"},"next":{"title":"scheduleOnRN","permalink":"/react-native-worklets/docs/threading/scheduleOnRN"}}');var o=t(7671),i=t(620);const s={sidebar_position:8},l="isWorkletFunction",c={},a=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"value",id:"value",level:4},{value:"Returns",id:"returns",level:3},{value:"Remarks",id:"remarks",level:3}];function u(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"isworkletfunction",children:"isWorkletFunction"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"isWorkletFunction"})," checks if a function is a worklet function. It only works with Reanimated Babel plugin enabled. Unless you are doing something with internals of Reanimated you shouldn't need to use this function."]}),"\n",(0,o.jsx)(e.h2,{id:"reference",children:"Reference"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { isWorkletFunction } from 'react-native-worklets';\n\nconst workletFunction = () => {\n    'worklet';\n    return 1;\n};\n\nconst isWorkletFunction = isWorkletFunction(workletFunction);\n\nconsole.log(isWorkletFunction); // true\n\nconst nonWorkletFunction = () => {\n    return 1;\n};\n\nconst isNonWorkletFunction = isWorkletFunction(nonWorkletFunction);\n\nconsole.log(isNonWorkletFunction); // false\n"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Type definitions"}),(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"type WorkletClosure = Record<string, unknown>;\n\nexport type WorkletStackDetails = [\n  error: Error,\n  lineOffset: number,\n  columnOffset: number,\n];\n\ninterface WorkletInitData {\n  code: string;\n  /** Only in dev builds. */\n  location?: string;\n  /** Only in dev builds. */\n  sourceMap?: string;\n  /** Only in dev builds. */\n  version?: string;\n}\n\ninterface WorkletProps {\n  __closure: WorkletClosure;\n  __workletHash: number;\n  __initData: WorkletInitData;\n  __init?: () => unknown;\n  /** `__stackDetails` is removed after parsing. */\n  __stackDetails?: WorkletStackDetails;\n}\n\ntype WorkletFunction<\n  TArgs extends unknown[] = unknown[],\n  TReturn = unknown,\n> = ((...args: TArgs) => TReturn) & WorkletProps;\n\nfunction isWorkletFunction<\n  Args extends unknown[] = unknown[],\n  ReturnValue = unknown,\n>(value: unknown): value is WorkletFunction<Args, ReturnValue>\n"})})]}),"\n",(0,o.jsx)(e.h3,{id:"arguments",children:"Arguments"}),"\n",(0,o.jsx)(e.h4,{id:"value",children:"value"}),"\n",(0,o.jsx)(e.p,{children:"A function to check if it is a worklet function."}),"\n",(0,o.jsx)(e.h3,{id:"returns",children:"Returns"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"isWorkletFunction"})," returns a boolean value."]}),"\n",(0,o.jsx)(e.h3,{id:"remarks",children:"Remarks"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:["Do not call it before the worklet is declared, as it will always return ",(0,o.jsx)(e.code,{children:"false"})," then."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"isWorkletFunction(myWorklet); // Will always return false.\n\nfunction myWorklet() {\n  'worklet';\n}\n"})}),"\n"]}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}}}]);